{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/*!\n * Copyright (c) 2021 Digital Bazaar, Inc. All rights reserved.\n */\nimport * as base58btc from 'base58-universal';\nimport * as base64url from 'base64url-universal';\nimport ed25519 from './ed25519.js';\nimport { LDKeyPair } from 'crypto-ld';\nconst SUITE_ID = 'Ed25519VerificationKey2020';\n// multibase base58-btc header\nconst MULTIBASE_BASE58BTC_HEADER = 'z';\n// multicodec ed25519-pub header as varint\nconst MULTICODEC_ED25519_PUB_HEADER = new Uint8Array([0xed, 0x01]);\n// multicodec ed25519-priv header as varint\nconst MULTICODEC_ED25519_PRIV_HEADER = new Uint8Array([0x80, 0x26]);\nexport class Ed25519VerificationKey2020 extends LDKeyPair {\n  /**\n   * An implementation of the Ed25519VerificationKey2020 spec, for use with\n   * Linked Data Proofs.\n   *\n   * @see https://w3c-ccg.github.io/lds-ed25519-2020/#ed25519verificationkey2020\n   * @see https://github.com/digitalbazaar/jsonld-signatures\n   *\n   * @param {object} options - Options hashmap.\n   * @param {string} options.controller - Controller DID or document url.\n   * @param {string} [options.id] - The key ID. If not provided, will be\n   *   composed of controller and key fingerprint as hash fragment.\n   * @param {string} options.publicKeyMultibase - Multibase encoded public key\n   *   with a multicodec ed25519-pub varint header [0xed, 0x01].\n   * @param {string} [options.privateKeyMultibase] - Multibase private key\n   *   with a multicodec ed25519-priv varint header [0x80, 0x26].\n   * @param {string} [options.revoked] - Timestamp of when the key has been\n   *   revoked, in RFC3339 format. If not present, the key itself is considered\n   *   not revoked. Note that this mechanism is slightly different than DID\n   *   Document key revocation, where a DID controller can revoke a key from\n   *   that DID by removing it from the DID Document.\n   */\n  constructor(options = {}) {\n    super(options);\n    this.type = SUITE_ID;\n    const {\n      publicKeyMultibase,\n      privateKeyMultibase\n    } = options;\n    if (!publicKeyMultibase) {\n      throw new TypeError('The \"publicKeyMultibase\" property is required.');\n    }\n    if (!publicKeyMultibase || !_isValidKeyHeader(publicKeyMultibase, MULTICODEC_ED25519_PUB_HEADER)) {\n      throw new Error('\"publicKeyMultibase\" has invalid header bytes: ' + `\"${publicKeyMultibase}\".`);\n    }\n    if (privateKeyMultibase && !_isValidKeyHeader(privateKeyMultibase, MULTICODEC_ED25519_PRIV_HEADER)) {\n      throw new Error('\"privateKeyMultibase\" has invalid header bytes.');\n    }\n\n    // assign valid key values\n    this.publicKeyMultibase = publicKeyMultibase;\n    this.privateKeyMultibase = privateKeyMultibase;\n\n    // set key identifier if controller is provided\n    if (this.controller && !this.id) {\n      this.id = `${this.controller}#${this.fingerprint()}`;\n    }\n  }\n\n  /**\n   * Creates an Ed25519 Key Pair from an existing serialized key pair.\n   *\n   * @param {object} options - Key pair options (see constructor).\n   * @example\n   * > const keyPair = await Ed25519VerificationKey2020.from({\n   * controller: 'did:ex:1234',\n   * type: 'Ed25519VerificationKey2020',\n   * publicKeyMultibase,\n   * privateKeyMultibase\n   * });\n   *\n   * @returns {Promise<Ed25519VerificationKey2020>} An Ed25519 Key Pair.\n   */\n  static async from(options) {\n    if (options.type === 'Ed25519VerificationKey2018') {\n      return Ed25519VerificationKey2020.fromEd25519VerificationKey2018(options);\n    }\n    if (options.type === 'JsonWebKey2020') {\n      return Ed25519VerificationKey2020.fromJsonWebKey2020(options);\n    }\n    return new Ed25519VerificationKey2020(options);\n  }\n\n  /**\n   * Instance creation method for backwards compatibility with the\n   * `Ed25519VerificationKey2018` key suite.\n   *\n   * @see https://github.com/digitalbazaar/ed25519-verification-key-2018\n   * @typedef {object} Ed25519VerificationKey2018\n   * @param {Ed25519VerificationKey2018} keyPair - Ed25519 2018 suite key pair.\n   *\n   * @returns {Ed25519VerificationKey2020} - 2020 suite instance.\n   */\n  static fromEd25519VerificationKey2018({\n    keyPair\n  } = {}) {\n    const publicKeyMultibase = _encodeMbKey(MULTICODEC_ED25519_PUB_HEADER, base58btc.decode(keyPair.publicKeyBase58));\n    const keyPair2020 = new Ed25519VerificationKey2020({\n      id: keyPair.id,\n      controller: keyPair.controller,\n      publicKeyMultibase\n    });\n    if (keyPair.privateKeyBase58) {\n      keyPair2020.privateKeyMultibase = _encodeMbKey(MULTICODEC_ED25519_PRIV_HEADER, base58btc.decode(keyPair.privateKeyBase58));\n    }\n    return keyPair2020;\n  }\n\n  /**\n   * Creates a key pair instance (public key only) from a JsonWebKey2020\n   * object.\n   *\n   * @see https://w3c-ccg.github.io/lds-jws2020/#json-web-key-2020\n   *\n   * @param {object} options - Options hashmap.\n   * @param {string} options.id - Key id.\n   * @param {string} options.type - Key suite type.\n   * @param {string} options.controller - Key controller.\n   * @param {object} options.publicKeyJwk - JWK object.\n   *\n   * @returns {Promise<Ed25519VerificationKey2020>} Resolves with key pair.\n   */\n  static fromJsonWebKey2020({\n    id,\n    type,\n    controller,\n    publicKeyJwk\n  } = {}) {\n    if (type !== 'JsonWebKey2020') {\n      throw new TypeError(`Invalid key type: \"${type}\".`);\n    }\n    if (!publicKeyJwk) {\n      throw new TypeError('\"publicKeyJwk\" property is required.');\n    }\n    const {\n      kty,\n      crv\n    } = publicKeyJwk;\n    if (kty !== 'OKP') {\n      throw new TypeError('\"kty\" is required to be \"OKP\".');\n    }\n    if (crv !== 'Ed25519') {\n      throw new TypeError('\"crv\" is required to be \"Ed25519\".');\n    }\n    const {\n      x: publicKeyBase64Url\n    } = publicKeyJwk;\n    const publicKeyMultibase = _encodeMbKey(MULTICODEC_ED25519_PUB_HEADER, base64url.decode(publicKeyBase64Url));\n    return Ed25519VerificationKey2020.from({\n      id,\n      controller,\n      publicKeyMultibase\n    });\n  }\n\n  /**\n   * Generates a KeyPair with an optional deterministic seed.\n   *\n   * @param {object} [options={}] - Options hashmap.\n   * @param {Uint8Array} [options.seed] - A 32-byte array seed for a\n   *   deterministic key.\n   *\n   * @returns {Promise<Ed25519VerificationKey2020>} Resolves with generated\n   *   public/private key pair.\n   */\n  static async generate({\n    seed,\n    ...keyPairOptions\n  } = {}) {\n    let keyObject;\n    if (seed) {\n      keyObject = await ed25519.generateKeyPairFromSeed(seed);\n    } else {\n      keyObject = await ed25519.generateKeyPair();\n    }\n    const publicKeyMultibase = _encodeMbKey(MULTICODEC_ED25519_PUB_HEADER, keyObject.publicKey);\n    const privateKeyMultibase = _encodeMbKey(MULTICODEC_ED25519_PRIV_HEADER, keyObject.secretKey);\n    return new Ed25519VerificationKey2020({\n      publicKeyMultibase,\n      privateKeyMultibase,\n      ...keyPairOptions\n    });\n  }\n\n  /**\n   * Creates an instance of Ed25519VerificationKey2020 from a key fingerprint.\n   *\n   * @param {object} options - Options hashmap.\n   * @param {string} options.fingerprint - Multibase encoded key fingerprint.\n   *\n   * @returns {Ed25519VerificationKey2020} Returns key pair instance (with\n   *   public key only).\n   */\n  static fromFingerprint({\n    fingerprint\n  } = {}) {\n    return new Ed25519VerificationKey2020({\n      publicKeyMultibase: fingerprint\n    });\n  }\n\n  /**\n   * @returns {Uint8Array} Public key bytes.\n   */\n  get _publicKeyBuffer() {\n    if (!this.publicKeyMultibase) {\n      return;\n    }\n    // remove multibase header\n    const publicKeyMulticodec = base58btc.decode(this.publicKeyMultibase.substr(1));\n    // remove multicodec header\n    const publicKeyBytes = publicKeyMulticodec.slice(MULTICODEC_ED25519_PUB_HEADER.length);\n    return publicKeyBytes;\n  }\n\n  /**\n   * @returns {Uint8Array} Private key bytes.\n   */\n  get _privateKeyBuffer() {\n    if (!this.privateKeyMultibase) {\n      return;\n    }\n    // remove multibase header\n    const privateKeyMulticodec = base58btc.decode(this.privateKeyMultibase.substr(1));\n    // remove multicodec header\n    const privateKeyBytes = privateKeyMulticodec.slice(MULTICODEC_ED25519_PRIV_HEADER.length);\n    return privateKeyBytes;\n  }\n\n  /**\n   * Generates and returns a multiformats encoded\n   * ed25519 public key fingerprint (for use with cryptonyms, for example).\n   *\n   * @see https://github.com/multiformats/multicodec\n   *\n   * @returns {string} The fingerprint.\n   */\n  fingerprint() {\n    return this.publicKeyMultibase;\n  }\n\n  /**\n   * Exports the serialized representation of the KeyPair\n   * and other information that JSON-LD Signatures can use to form a proof.\n   *\n   * @param {object} [options={}] - Options hashmap.\n   * @param {boolean} [options.publicKey] - Export public key material?\n   * @param {boolean} [options.privateKey] - Export private key material?\n   * @param {boolean} [options.includeContext] - Include JSON-LD context?\n   *\n   * @returns {object} A plain js object that's ready for serialization\n   *   (to JSON, etc), for use in DIDs, Linked Data Proofs, etc.\n   */\n  export({\n    publicKey = false,\n    privateKey = false,\n    includeContext = false\n  } = {}) {\n    if (!(publicKey || privateKey)) {\n      throw new TypeError('Export requires specifying either \"publicKey\" or \"privateKey\".');\n    }\n    const exportedKey = {\n      id: this.id,\n      type: this.type\n    };\n    if (includeContext) {\n      exportedKey['@context'] = Ed25519VerificationKey2020.SUITE_CONTEXT;\n    }\n    if (this.controller) {\n      exportedKey.controller = this.controller;\n    }\n    if (publicKey) {\n      exportedKey.publicKeyMultibase = this.publicKeyMultibase;\n    }\n    if (privateKey) {\n      exportedKey.privateKeyMultibase = this.privateKeyMultibase;\n    }\n    if (this.revoked) {\n      exportedKey.revoked = this.revoked;\n    }\n    return exportedKey;\n  }\n\n  /**\n   * Returns the JWK representation of this key pair.\n   *\n   * @see https://datatracker.ietf.org/doc/html/rfc8037\n   *\n   * @param {object} [options={}] - Options hashmap.\n   * @param {boolean} [options.publicKey] - Include public key?\n   * @param {boolean} [options.privateKey] - Include private key?\n   *\n   * @returns {{kty: string, crv: string, x: string, d: string}} JWK\n   *   representation.\n   */\n  toJwk({\n    publicKey = true,\n    privateKey = false\n  } = {}) {\n    if (!(publicKey || privateKey)) {\n      throw TypeError('Either a \"publicKey\" or a \"privateKey\" is required.');\n    }\n    const jwk = {\n      crv: 'Ed25519',\n      kty: 'OKP'\n    };\n    if (publicKey) {\n      jwk.x = base64url.encode(this._publicKeyBuffer);\n    }\n    if (privateKey) {\n      jwk.d = base64url.encode(this._privateKeyBuffer);\n    }\n    return jwk;\n  }\n\n  /**\n   * @see https://datatracker.ietf.org/doc/html/rfc8037#appendix-A.3\n   *\n   * @returns {Promise<string>} JWK Thumbprint.\n   */\n  async jwkThumbprint() {\n    const publicKey = base64url.encode(this._publicKeyBuffer);\n    const serialized = `{\"crv\":\"Ed25519\",\"kty\":\"OKP\",\"x\":\"${publicKey}\"}`;\n    const data = new TextEncoder().encode(serialized);\n    return base64url.encode(new Uint8Array(await ed25519.sha256digest({\n      data\n    })));\n  }\n\n  /**\n   * Returns the JsonWebKey2020 representation of this key pair.\n   *\n   * @see https://w3c-ccg.github.io/lds-jws2020/#json-web-key-2020\n   *\n   * @returns {Promise<object>} JsonWebKey2020 representation.\n   */\n  async toJsonWebKey2020() {\n    return {\n      '@context': 'https://w3id.org/security/jws/v1',\n      id: this.controller + '#' + (await this.jwkThumbprint()),\n      type: 'JsonWebKey2020',\n      controller: this.controller,\n      publicKeyJwk: this.toJwk({\n        publicKey: true\n      })\n    };\n  }\n\n  /**\n   * Tests whether the fingerprint was generated from a given key pair.\n   *\n   * @example\n   * > edKeyPair.verifyFingerprint({fingerprint: 'z6Mk2S2Q...6MkaFJewa'});\n   * {valid: true};\n   *\n   * @param {object} options - Options hashmap.\n   * @param {string} options.fingerprint - A public key fingerprint.\n   *\n   * @returns {{valid: boolean, error: *}} Result of verification.\n   */\n  verifyFingerprint({\n    fingerprint\n  } = {}) {\n    // fingerprint should have multibase base58-btc header\n    if (!(typeof fingerprint === 'string' && fingerprint[0] === MULTIBASE_BASE58BTC_HEADER)) {\n      return {\n        error: new Error('\"fingerprint\" must be a multibase encoded string.'),\n        valid: false\n      };\n    }\n    let fingerprintBuffer;\n    try {\n      fingerprintBuffer = base58btc.decode(fingerprint.substr(1));\n      if (!fingerprintBuffer) {\n        throw new TypeError('Invalid encoding of fingerprint.');\n      }\n    } catch (e) {\n      return {\n        error: e,\n        valid: false\n      };\n    }\n    const buffersEqual = _isEqualBuffer(this._publicKeyBuffer, fingerprintBuffer.slice(2));\n\n    // validate the first two multicodec bytes\n    const valid = fingerprintBuffer[0] === MULTICODEC_ED25519_PUB_HEADER[0] && fingerprintBuffer[1] === MULTICODEC_ED25519_PUB_HEADER[1] && buffersEqual;\n    if (!valid) {\n      return {\n        error: new Error('The fingerprint does not match the public key.'),\n        valid: false\n      };\n    }\n    return {\n      valid\n    };\n  }\n  signer() {\n    const privateKeyBuffer = this._privateKeyBuffer;\n    return {\n      async sign({\n        data\n      }) {\n        if (!privateKeyBuffer) {\n          throw new Error('A private key is not available for signing.');\n        }\n        return ed25519.sign(privateKeyBuffer, data);\n      },\n      id: this.id\n    };\n  }\n  verifier() {\n    const publicKeyBuffer = this._publicKeyBuffer;\n    return {\n      async verify({\n        data,\n        signature\n      }) {\n        if (!publicKeyBuffer) {\n          throw new Error('A public key is not available for verifying.');\n        }\n        return ed25519.verify(publicKeyBuffer, data, signature);\n      },\n      id: this.id\n    };\n  }\n}\n// Used by CryptoLD harness for dispatching.\nEd25519VerificationKey2020.suite = SUITE_ID;\n// Used by CryptoLD harness's fromKeyId() method.\nEd25519VerificationKey2020.SUITE_CONTEXT = 'https://w3id.org/security/suites/ed25519-2020/v1';\n\n// check to ensure that two buffers are byte-for-byte equal\n// WARNING: this function must only be used to check public information as\n//          timing attacks can be used for non-constant time checks on\n//          secret information.\nfunction _isEqualBuffer(buf1, buf2) {\n  if (buf1.length !== buf2.length) {\n    return false;\n  }\n  for (let i = 0; i < buf1.length; i++) {\n    if (buf1[i] !== buf2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// check a multibase key for an expected header\nfunction _isValidKeyHeader(multibaseKey, expectedHeader) {\n  if (!(typeof multibaseKey === 'string' && multibaseKey[0] === MULTIBASE_BASE58BTC_HEADER)) {\n    return false;\n  }\n  const keyBytes = base58btc.decode(multibaseKey.slice(1));\n  return expectedHeader.every((val, i) => keyBytes[i] === val);\n}\n\n// encode a multibase base58-btc multicodec key\nfunction _encodeMbKey(header, key) {\n  const mbKey = new Uint8Array(header.length + key.length);\n  mbKey.set(header);\n  mbKey.set(key, header.length);\n  return MULTIBASE_BASE58BTC_HEADER + base58btc.encode(mbKey);\n}","map":{"version":3,"names":["base58btc","base64url","ed25519","LDKeyPair","SUITE_ID","MULTIBASE_BASE58BTC_HEADER","MULTICODEC_ED25519_PUB_HEADER","Uint8Array","MULTICODEC_ED25519_PRIV_HEADER","Ed25519VerificationKey2020","constructor","options","type","publicKeyMultibase","privateKeyMultibase","TypeError","_isValidKeyHeader","Error","controller","id","fingerprint","from","fromEd25519VerificationKey2018","fromJsonWebKey2020","keyPair","_encodeMbKey","decode","publicKeyBase58","keyPair2020","privateKeyBase58","publicKeyJwk","kty","crv","x","publicKeyBase64Url","generate","seed","keyPairOptions","keyObject","generateKeyPairFromSeed","generateKeyPair","publicKey","secretKey","fromFingerprint","_publicKeyBuffer","publicKeyMulticodec","substr","publicKeyBytes","slice","length","_privateKeyBuffer","privateKeyMulticodec","privateKeyBytes","export","privateKey","includeContext","exportedKey","SUITE_CONTEXT","revoked","toJwk","jwk","encode","d","jwkThumbprint","serialized","data","TextEncoder","sha256digest","toJsonWebKey2020","verifyFingerprint","error","valid","fingerprintBuffer","e","buffersEqual","_isEqualBuffer","signer","privateKeyBuffer","sign","verifier","publicKeyBuffer","verify","signature","suite","buf1","buf2","i","multibaseKey","expectedHeader","keyBytes","every","val","header","key","mbKey","set"],"sources":["/home/pratap/hid-ssi-js-sdk/node_modules/@digitalbazaar/ed25519-verification-key-2020/lib/Ed25519VerificationKey2020.js"],"sourcesContent":["/*!\n * Copyright (c) 2021 Digital Bazaar, Inc. All rights reserved.\n */\nimport * as base58btc from 'base58-universal';\nimport * as base64url from 'base64url-universal';\nimport ed25519 from './ed25519.js';\nimport {LDKeyPair} from 'crypto-ld';\n\nconst SUITE_ID = 'Ed25519VerificationKey2020';\n// multibase base58-btc header\nconst MULTIBASE_BASE58BTC_HEADER = 'z';\n// multicodec ed25519-pub header as varint\nconst MULTICODEC_ED25519_PUB_HEADER = new Uint8Array([0xed, 0x01]);\n// multicodec ed25519-priv header as varint\nconst MULTICODEC_ED25519_PRIV_HEADER = new Uint8Array([0x80, 0x26]);\n\nexport class Ed25519VerificationKey2020 extends LDKeyPair {\n  /**\n   * An implementation of the Ed25519VerificationKey2020 spec, for use with\n   * Linked Data Proofs.\n   *\n   * @see https://w3c-ccg.github.io/lds-ed25519-2020/#ed25519verificationkey2020\n   * @see https://github.com/digitalbazaar/jsonld-signatures\n   *\n   * @param {object} options - Options hashmap.\n   * @param {string} options.controller - Controller DID or document url.\n   * @param {string} [options.id] - The key ID. If not provided, will be\n   *   composed of controller and key fingerprint as hash fragment.\n   * @param {string} options.publicKeyMultibase - Multibase encoded public key\n   *   with a multicodec ed25519-pub varint header [0xed, 0x01].\n   * @param {string} [options.privateKeyMultibase] - Multibase private key\n   *   with a multicodec ed25519-priv varint header [0x80, 0x26].\n   * @param {string} [options.revoked] - Timestamp of when the key has been\n   *   revoked, in RFC3339 format. If not present, the key itself is considered\n   *   not revoked. Note that this mechanism is slightly different than DID\n   *   Document key revocation, where a DID controller can revoke a key from\n   *   that DID by removing it from the DID Document.\n   */\n  constructor(options = {}) {\n    super(options);\n    this.type = SUITE_ID;\n    const {publicKeyMultibase, privateKeyMultibase} = options;\n\n    if(!publicKeyMultibase) {\n      throw new TypeError('The \"publicKeyMultibase\" property is required.');\n    }\n\n    if(!publicKeyMultibase || !_isValidKeyHeader(\n      publicKeyMultibase, MULTICODEC_ED25519_PUB_HEADER)) {\n      throw new Error(\n        '\"publicKeyMultibase\" has invalid header bytes: ' +\n        `\"${publicKeyMultibase}\".`);\n    }\n\n    if(privateKeyMultibase && !_isValidKeyHeader(\n      privateKeyMultibase, MULTICODEC_ED25519_PRIV_HEADER)) {\n      throw new Error('\"privateKeyMultibase\" has invalid header bytes.');\n    }\n\n    // assign valid key values\n    this.publicKeyMultibase = publicKeyMultibase;\n    this.privateKeyMultibase = privateKeyMultibase;\n\n    // set key identifier if controller is provided\n    if(this.controller && !this.id) {\n      this.id = `${this.controller}#${this.fingerprint()}`;\n    }\n  }\n\n  /**\n   * Creates an Ed25519 Key Pair from an existing serialized key pair.\n   *\n   * @param {object} options - Key pair options (see constructor).\n   * @example\n   * > const keyPair = await Ed25519VerificationKey2020.from({\n   * controller: 'did:ex:1234',\n   * type: 'Ed25519VerificationKey2020',\n   * publicKeyMultibase,\n   * privateKeyMultibase\n   * });\n   *\n   * @returns {Promise<Ed25519VerificationKey2020>} An Ed25519 Key Pair.\n   */\n  static async from(options) {\n    if(options.type === 'Ed25519VerificationKey2018') {\n      return Ed25519VerificationKey2020.fromEd25519VerificationKey2018(options);\n    }\n    if(options.type === 'JsonWebKey2020') {\n      return Ed25519VerificationKey2020.fromJsonWebKey2020(options);\n    }\n    return new Ed25519VerificationKey2020(options);\n  }\n\n  /**\n   * Instance creation method for backwards compatibility with the\n   * `Ed25519VerificationKey2018` key suite.\n   *\n   * @see https://github.com/digitalbazaar/ed25519-verification-key-2018\n   * @typedef {object} Ed25519VerificationKey2018\n   * @param {Ed25519VerificationKey2018} keyPair - Ed25519 2018 suite key pair.\n   *\n   * @returns {Ed25519VerificationKey2020} - 2020 suite instance.\n   */\n  static fromEd25519VerificationKey2018({keyPair} = {}) {\n    const publicKeyMultibase = _encodeMbKey(\n      MULTICODEC_ED25519_PUB_HEADER, base58btc.decode(keyPair.publicKeyBase58));\n    const keyPair2020 = new Ed25519VerificationKey2020({\n      id: keyPair.id,\n      controller: keyPair.controller,\n      publicKeyMultibase\n    });\n\n    if(keyPair.privateKeyBase58) {\n      keyPair2020.privateKeyMultibase = _encodeMbKey(\n        MULTICODEC_ED25519_PRIV_HEADER,\n        base58btc.decode(keyPair.privateKeyBase58));\n    }\n\n    return keyPair2020;\n  }\n\n  /**\n   * Creates a key pair instance (public key only) from a JsonWebKey2020\n   * object.\n   *\n   * @see https://w3c-ccg.github.io/lds-jws2020/#json-web-key-2020\n   *\n   * @param {object} options - Options hashmap.\n   * @param {string} options.id - Key id.\n   * @param {string} options.type - Key suite type.\n   * @param {string} options.controller - Key controller.\n   * @param {object} options.publicKeyJwk - JWK object.\n   *\n   * @returns {Promise<Ed25519VerificationKey2020>} Resolves with key pair.\n   */\n  static fromJsonWebKey2020({id, type, controller, publicKeyJwk} = {}) {\n    if(type !== 'JsonWebKey2020') {\n      throw new TypeError(`Invalid key type: \"${type}\".`);\n    }\n    if(!publicKeyJwk) {\n      throw new TypeError('\"publicKeyJwk\" property is required.');\n    }\n    const {kty, crv} = publicKeyJwk;\n    if(kty !== 'OKP') {\n      throw new TypeError('\"kty\" is required to be \"OKP\".');\n    }\n    if(crv !== 'Ed25519') {\n      throw new TypeError('\"crv\" is required to be \"Ed25519\".');\n    }\n    const {x: publicKeyBase64Url} = publicKeyJwk;\n    const publicKeyMultibase = _encodeMbKey(\n      MULTICODEC_ED25519_PUB_HEADER,\n      base64url.decode(publicKeyBase64Url));\n\n    return Ed25519VerificationKey2020.from({\n      id, controller, publicKeyMultibase\n    });\n  }\n\n  /**\n   * Generates a KeyPair with an optional deterministic seed.\n   *\n   * @param {object} [options={}] - Options hashmap.\n   * @param {Uint8Array} [options.seed] - A 32-byte array seed for a\n   *   deterministic key.\n   *\n   * @returns {Promise<Ed25519VerificationKey2020>} Resolves with generated\n   *   public/private key pair.\n   */\n  static async generate({seed, ...keyPairOptions} = {}) {\n    let keyObject;\n    if(seed) {\n      keyObject = await ed25519.generateKeyPairFromSeed(seed);\n    } else {\n      keyObject = await ed25519.generateKeyPair();\n    }\n    const publicKeyMultibase =\n      _encodeMbKey(MULTICODEC_ED25519_PUB_HEADER, keyObject.publicKey);\n\n    const privateKeyMultibase =\n      _encodeMbKey(MULTICODEC_ED25519_PRIV_HEADER, keyObject.secretKey);\n\n    return new Ed25519VerificationKey2020({\n      publicKeyMultibase,\n      privateKeyMultibase,\n      ...keyPairOptions\n    });\n  }\n\n  /**\n   * Creates an instance of Ed25519VerificationKey2020 from a key fingerprint.\n   *\n   * @param {object} options - Options hashmap.\n   * @param {string} options.fingerprint - Multibase encoded key fingerprint.\n   *\n   * @returns {Ed25519VerificationKey2020} Returns key pair instance (with\n   *   public key only).\n   */\n  static fromFingerprint({fingerprint} = {}) {\n    return new Ed25519VerificationKey2020({publicKeyMultibase: fingerprint});\n  }\n\n  /**\n   * @returns {Uint8Array} Public key bytes.\n   */\n  get _publicKeyBuffer() {\n    if(!this.publicKeyMultibase) {\n      return;\n    }\n    // remove multibase header\n    const publicKeyMulticodec =\n      base58btc.decode(this.publicKeyMultibase.substr(1));\n    // remove multicodec header\n    const publicKeyBytes =\n      publicKeyMulticodec.slice(MULTICODEC_ED25519_PUB_HEADER.length);\n\n    return publicKeyBytes;\n  }\n\n  /**\n   * @returns {Uint8Array} Private key bytes.\n   */\n  get _privateKeyBuffer() {\n    if(!this.privateKeyMultibase) {\n      return;\n    }\n    // remove multibase header\n    const privateKeyMulticodec =\n      base58btc.decode(this.privateKeyMultibase.substr(1));\n    // remove multicodec header\n    const privateKeyBytes =\n      privateKeyMulticodec.slice(MULTICODEC_ED25519_PRIV_HEADER.length);\n\n    return privateKeyBytes;\n  }\n\n  /**\n   * Generates and returns a multiformats encoded\n   * ed25519 public key fingerprint (for use with cryptonyms, for example).\n   *\n   * @see https://github.com/multiformats/multicodec\n   *\n   * @returns {string} The fingerprint.\n   */\n  fingerprint() {\n    return this.publicKeyMultibase;\n  }\n\n  /**\n   * Exports the serialized representation of the KeyPair\n   * and other information that JSON-LD Signatures can use to form a proof.\n   *\n   * @param {object} [options={}] - Options hashmap.\n   * @param {boolean} [options.publicKey] - Export public key material?\n   * @param {boolean} [options.privateKey] - Export private key material?\n   * @param {boolean} [options.includeContext] - Include JSON-LD context?\n   *\n   * @returns {object} A plain js object that's ready for serialization\n   *   (to JSON, etc), for use in DIDs, Linked Data Proofs, etc.\n   */\n  export({publicKey = false, privateKey = false, includeContext = false} = {}) {\n    if(!(publicKey || privateKey)) {\n      throw new TypeError(\n        'Export requires specifying either \"publicKey\" or \"privateKey\".');\n    }\n    const exportedKey = {\n      id: this.id,\n      type: this.type\n    };\n    if(includeContext) {\n      exportedKey['@context'] = Ed25519VerificationKey2020.SUITE_CONTEXT;\n    }\n    if(this.controller) {\n      exportedKey.controller = this.controller;\n    }\n    if(publicKey) {\n      exportedKey.publicKeyMultibase = this.publicKeyMultibase;\n    }\n    if(privateKey) {\n      exportedKey.privateKeyMultibase = this.privateKeyMultibase;\n    }\n    if(this.revoked) {\n      exportedKey.revoked = this.revoked;\n    }\n    return exportedKey;\n  }\n\n  /**\n   * Returns the JWK representation of this key pair.\n   *\n   * @see https://datatracker.ietf.org/doc/html/rfc8037\n   *\n   * @param {object} [options={}] - Options hashmap.\n   * @param {boolean} [options.publicKey] - Include public key?\n   * @param {boolean} [options.privateKey] - Include private key?\n   *\n   * @returns {{kty: string, crv: string, x: string, d: string}} JWK\n   *   representation.\n   */\n  toJwk({publicKey = true, privateKey = false} = {}) {\n    if(!(publicKey || privateKey)) {\n      throw TypeError('Either a \"publicKey\" or a \"privateKey\" is required.');\n    }\n    const jwk = {crv: 'Ed25519', kty: 'OKP'};\n    if(publicKey) {\n      jwk.x = base64url.encode(this._publicKeyBuffer);\n    }\n    if(privateKey) {\n      jwk.d = base64url.encode(this._privateKeyBuffer);\n    }\n    return jwk;\n  }\n\n  /**\n   * @see https://datatracker.ietf.org/doc/html/rfc8037#appendix-A.3\n   *\n   * @returns {Promise<string>} JWK Thumbprint.\n   */\n  async jwkThumbprint() {\n    const publicKey = base64url.encode(this._publicKeyBuffer);\n    const serialized = `{\"crv\":\"Ed25519\",\"kty\":\"OKP\",\"x\":\"${publicKey}\"}`;\n    const data = new TextEncoder().encode(serialized);\n    return base64url.encode(\n      new Uint8Array(await ed25519.sha256digest({data})));\n  }\n\n  /**\n   * Returns the JsonWebKey2020 representation of this key pair.\n   *\n   * @see https://w3c-ccg.github.io/lds-jws2020/#json-web-key-2020\n   *\n   * @returns {Promise<object>} JsonWebKey2020 representation.\n   */\n  async toJsonWebKey2020() {\n    return {\n      '@context': 'https://w3id.org/security/jws/v1',\n      id: this.controller + '#' + await this.jwkThumbprint(),\n      type: 'JsonWebKey2020',\n      controller: this.controller,\n      publicKeyJwk: this.toJwk({publicKey: true})\n    };\n  }\n\n  /**\n   * Tests whether the fingerprint was generated from a given key pair.\n   *\n   * @example\n   * > edKeyPair.verifyFingerprint({fingerprint: 'z6Mk2S2Q...6MkaFJewa'});\n   * {valid: true};\n   *\n   * @param {object} options - Options hashmap.\n   * @param {string} options.fingerprint - A public key fingerprint.\n   *\n   * @returns {{valid: boolean, error: *}} Result of verification.\n   */\n  verifyFingerprint({fingerprint} = {}) {\n    // fingerprint should have multibase base58-btc header\n    if(!(typeof fingerprint === 'string' &&\n      fingerprint[0] === MULTIBASE_BASE58BTC_HEADER)) {\n      return {\n        error: new Error('\"fingerprint\" must be a multibase encoded string.'),\n        valid: false\n      };\n    }\n    let fingerprintBuffer;\n    try {\n      fingerprintBuffer = base58btc.decode(fingerprint.substr(1));\n      if(!fingerprintBuffer) {\n        throw new TypeError('Invalid encoding of fingerprint.');\n      }\n    } catch(e) {\n      return {error: e, valid: false};\n    }\n\n    const buffersEqual = _isEqualBuffer(this._publicKeyBuffer,\n      fingerprintBuffer.slice(2));\n\n    // validate the first two multicodec bytes\n    const valid =\n      fingerprintBuffer[0] === MULTICODEC_ED25519_PUB_HEADER[0] &&\n      fingerprintBuffer[1] === MULTICODEC_ED25519_PUB_HEADER[1] &&\n      buffersEqual;\n    if(!valid) {\n      return {\n        error: new Error('The fingerprint does not match the public key.'),\n        valid: false\n      };\n    }\n    return {valid};\n  }\n\n  signer() {\n    const privateKeyBuffer = this._privateKeyBuffer;\n\n    return {\n      async sign({data}) {\n        if(!privateKeyBuffer) {\n          throw new Error('A private key is not available for signing.');\n        }\n        return ed25519.sign(privateKeyBuffer, data);\n      },\n      id: this.id\n    };\n  }\n\n  verifier() {\n    const publicKeyBuffer = this._publicKeyBuffer;\n\n    return {\n      async verify({data, signature}) {\n        if(!publicKeyBuffer) {\n          throw new Error('A public key is not available for verifying.');\n        }\n        return ed25519.verify(publicKeyBuffer, data, signature);\n      },\n      id: this.id\n    };\n  }\n}\n// Used by CryptoLD harness for dispatching.\nEd25519VerificationKey2020.suite = SUITE_ID;\n// Used by CryptoLD harness's fromKeyId() method.\nEd25519VerificationKey2020.SUITE_CONTEXT =\n  'https://w3id.org/security/suites/ed25519-2020/v1';\n\n// check to ensure that two buffers are byte-for-byte equal\n// WARNING: this function must only be used to check public information as\n//          timing attacks can be used for non-constant time checks on\n//          secret information.\nfunction _isEqualBuffer(buf1, buf2) {\n  if(buf1.length !== buf2.length) {\n    return false;\n  }\n  for(let i = 0; i < buf1.length; i++) {\n    if(buf1[i] !== buf2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// check a multibase key for an expected header\nfunction _isValidKeyHeader(multibaseKey, expectedHeader) {\n  if(!(typeof multibaseKey === 'string' &&\n    multibaseKey[0] === MULTIBASE_BASE58BTC_HEADER)) {\n    return false;\n  }\n\n  const keyBytes = base58btc.decode(multibaseKey.slice(1));\n  return expectedHeader.every((val, i) => keyBytes[i] === val);\n}\n\n// encode a multibase base58-btc multicodec key\nfunction _encodeMbKey(header, key) {\n  const mbKey = new Uint8Array(header.length + key.length);\n\n  mbKey.set(header);\n  mbKey.set(key, header.length);\n\n  return MULTIBASE_BASE58BTC_HEADER + base58btc.encode(mbKey);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}