{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/es.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/es.typed-array.with.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodePubkey = exports.encodePubkey = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst amino_1 = require(\"@cosmjs/amino\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst keys_1 = require(\"cosmjs-types/cosmos/crypto/multisig/keys\");\nconst keys_2 = require(\"cosmjs-types/cosmos/crypto/secp256k1/keys\");\nconst any_1 = require(\"cosmjs-types/google/protobuf/any\");\nfunction encodePubkey(pubkey) {\n  if ((0, amino_1.isSecp256k1Pubkey)(pubkey)) {\n    const pubkeyProto = keys_2.PubKey.fromPartial({\n      key: (0, encoding_1.fromBase64)(pubkey.value)\n    });\n    return any_1.Any.fromPartial({\n      typeUrl: \"/cosmos.crypto.secp256k1.PubKey\",\n      value: Uint8Array.from(keys_2.PubKey.encode(pubkeyProto).finish())\n    });\n  } else if ((0, amino_1.isMultisigThresholdPubkey)(pubkey)) {\n    const pubkeyProto = keys_1.LegacyAminoPubKey.fromPartial({\n      threshold: math_1.Uint53.fromString(pubkey.value.threshold).toNumber(),\n      publicKeys: pubkey.value.pubkeys.map(encodePubkey)\n    });\n    return any_1.Any.fromPartial({\n      typeUrl: \"/cosmos.crypto.multisig.LegacyAminoPubKey\",\n      value: Uint8Array.from(keys_1.LegacyAminoPubKey.encode(pubkeyProto).finish())\n    });\n  } else {\n    throw new Error(`Pubkey type ${pubkey.type} not recognized`);\n  }\n}\nexports.encodePubkey = encodePubkey;\nfunction decodeSinglePubkey(pubkey) {\n  switch (pubkey.typeUrl) {\n    case \"/cosmos.crypto.secp256k1.PubKey\":\n      {\n        const {\n          key\n        } = keys_2.PubKey.decode(pubkey.value);\n        return (0, amino_1.encodeSecp256k1Pubkey)(key);\n      }\n    default:\n      throw new Error(`Pubkey type_url ${pubkey.typeUrl} not recognized as single public key type`);\n  }\n}\nfunction decodePubkey(pubkey) {\n  if (!pubkey || !pubkey.value) {\n    return null;\n  }\n  switch (pubkey.typeUrl) {\n    case \"/cosmos.crypto.secp256k1.PubKey\":\n      {\n        return decodeSinglePubkey(pubkey);\n      }\n    case \"/cosmos.crypto.multisig.LegacyAminoPubKey\":\n      {\n        const {\n          threshold,\n          publicKeys\n        } = keys_1.LegacyAminoPubKey.decode(pubkey.value);\n        const out = {\n          type: \"tendermint/PubKeyMultisigThreshold\",\n          value: {\n            threshold: threshold.toString(),\n            pubkeys: publicKeys.map(decodeSinglePubkey)\n          }\n        };\n        return out;\n      }\n    default:\n      throw new Error(`Pubkey type_url ${pubkey.typeUrl} not recognized`);\n  }\n}\nexports.decodePubkey = decodePubkey;","map":{"version":3,"names":["amino_1","require","encoding_1","math_1","keys_1","keys_2","any_1","encodePubkey","pubkey","isSecp256k1Pubkey","pubkeyProto","PubKey","fromPartial","key","fromBase64","value","Any","typeUrl","Uint8Array","from","encode","finish","isMultisigThresholdPubkey","LegacyAminoPubKey","threshold","Uint53","fromString","toNumber","publicKeys","pubkeys","map","Error","type","exports","decodeSinglePubkey","decode","encodeSecp256k1Pubkey","decodePubkey","out","toString"],"sources":["../src/pubkey.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}