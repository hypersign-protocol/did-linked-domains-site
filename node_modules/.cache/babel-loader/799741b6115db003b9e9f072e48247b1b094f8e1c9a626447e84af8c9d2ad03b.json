{"ast":null,"code":"\"use strict\";\n\n/**\n *  One of the most common ways to interact with the blockchain is\n *  by a node running a JSON-RPC interface which can be connected to,\n *  based on the transport, using:\n *\n *  - HTTP or HTTPS - [[JsonRpcProvider]]\n *  - WebSocket - [[WebSocketProvider]]\n *  - IPC - [[IpcSocketProvider]]\n *\n * @_section: api/providers/jsonrpc:JSON-RPC Provider  [about-jsonrpcProvider]\n */\nvar _classPrivateMethodInitSpec = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateMethodInitSpec.js\").default;\nvar _classPrivateFieldInitSpec = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _classPrivateMethodGet = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateMethodGet.js\").default;\nvar _classPrivateFieldSet = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateFieldSet.js\").default;\nvar _classPrivateFieldGet = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateFieldGet.js\").default;\nvar _defineProperty = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonRpcProvider = exports.JsonRpcApiPollingProvider = exports.JsonRpcApiProvider = exports.JsonRpcSigner = void 0;\n// @TODO:\n// - Add the batching API\n// https://playground.open-rpc.org/?schemaUrl=https://raw.githubusercontent.com/ethereum/eth1.0-apis/assembled-spec/openrpc.json&uiSchema%5BappBar%5D%5Bui:splitView%5D=true&uiSchema%5BappBar%5D%5Bui:input%5D=false&uiSchema%5BappBar%5D%5Bui:examplesDropdown%5D=false\nconst index_js_1 = require(\"../abi/index.js\");\nconst index_js_2 = require(\"../address/index.js\");\nconst index_js_3 = require(\"../hash/index.js\");\nconst index_js_4 = require(\"../transaction/index.js\");\nconst index_js_5 = require(\"../utils/index.js\");\nconst abstract_provider_js_1 = require(\"./abstract-provider.js\");\nconst abstract_signer_js_1 = require(\"./abstract-signer.js\");\nconst network_js_1 = require(\"./network.js\");\nconst subscriber_filterid_js_1 = require(\"./subscriber-filterid.js\");\nconst subscriber_polling_js_1 = require(\"./subscriber-polling.js\");\nconst Primitive = \"bigint,boolean,function,number,string,symbol\".split(/,/g);\n//const Methods = \"getAddress,then\".split(/,/g);\nfunction deepCopy(value) {\n  if (value == null || Primitive.indexOf(typeof value) >= 0) {\n    return value;\n  }\n  // Keep any Addressable\n  if (typeof value.getAddress === \"function\") {\n    return value;\n  }\n  if (Array.isArray(value)) {\n    return value.map(deepCopy);\n  }\n  if (typeof value === \"object\") {\n    return Object.keys(value).reduce((accum, key) => {\n      accum[key] = value[key];\n      return accum;\n    }, {});\n  }\n  throw new Error(`should not happen: ${value} (${typeof value})`);\n}\nfunction stall(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n}\nfunction getLowerCase(value) {\n  if (value) {\n    return value.toLowerCase();\n  }\n  return value;\n}\nfunction isPollable(value) {\n  return value && typeof value.pollingInterval === \"number\";\n}\nconst defaultOptions = {\n  polling: false,\n  staticNetwork: null,\n  batchStallTime: 10,\n  batchMaxSize: 1 << 20,\n  batchMaxCount: 100,\n  cacheTimeout: 250\n};\n// @TODO: Unchecked Signers\nclass JsonRpcSigner extends abstract_signer_js_1.AbstractSigner {\n  constructor(provider, address) {\n    super(provider);\n    _defineProperty(this, \"address\", void 0);\n    address = (0, index_js_2.getAddress)(address);\n    (0, index_js_5.defineProperties)(this, {\n      address\n    });\n  }\n  connect(provider) {\n    (0, index_js_5.assert)(false, \"cannot reconnect JsonRpcSigner\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"signer.connect\"\n    });\n  }\n  async getAddress() {\n    return this.address;\n  }\n  // JSON-RPC will automatially fill in nonce, etc. so we just check from\n  async populateTransaction(tx) {\n    return await this.populateCall(tx);\n  }\n  // Returns just the hash of the transaction after sent, which is what\n  // the bare JSON-RPC API does;\n  async sendUncheckedTransaction(_tx) {\n    const tx = deepCopy(_tx);\n    const promises = [];\n    // Make sure the from matches the sender\n    if (tx.from) {\n      const _from = tx.from;\n      promises.push((async () => {\n        const from = await (0, index_js_2.resolveAddress)(_from, this.provider);\n        (0, index_js_5.assertArgument)(from != null && from.toLowerCase() === this.address.toLowerCase(), \"from address mismatch\", \"transaction\", _tx);\n        tx.from = from;\n      })());\n    } else {\n      tx.from = this.address;\n    }\n    // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n    // wishes to use this, it is easy to specify explicitly, otherwise\n    // we look it up for them.\n    if (tx.gasLimit == null) {\n      promises.push((async () => {\n        tx.gasLimit = await this.provider.estimateGas({\n          ...tx,\n          from: this.address\n        });\n      })());\n    }\n    // The address may be an ENS name or Addressable\n    if (tx.to != null) {\n      const _to = tx.to;\n      promises.push((async () => {\n        tx.to = await (0, index_js_2.resolveAddress)(_to, this.provider);\n      })());\n    }\n    // Wait until all of our properties are filled in\n    if (promises.length) {\n      await Promise.all(promises);\n    }\n    const hexTx = this.provider.getRpcTransaction(tx);\n    return this.provider.send(\"eth_sendTransaction\", [hexTx]);\n  }\n  async sendTransaction(tx) {\n    // This cannot be mined any earlier than any recent block\n    const blockNumber = await this.provider.getBlockNumber();\n    // Send the transaction\n    const hash = await this.sendUncheckedTransaction(tx);\n    // Unfortunately, JSON-RPC only provides and opaque transaction hash\n    // for a response, and we need the actual transaction, so we poll\n    // for it; it should show up very quickly\n    return await new Promise((resolve, reject) => {\n      const timeouts = [1000, 100];\n      const checkTx = async () => {\n        // Try getting the transaction\n        const tx = await this.provider.getTransaction(hash);\n        if (tx != null) {\n          resolve(tx.replaceableTransaction(blockNumber));\n          return;\n        }\n        // Wait another 4 seconds\n        this.provider._setTimeout(() => {\n          checkTx();\n        }, timeouts.pop() || 4000);\n      };\n      checkTx();\n    });\n  }\n  async signTransaction(_tx) {\n    const tx = deepCopy(_tx);\n    // Make sure the from matches the sender\n    if (tx.from) {\n      const from = await (0, index_js_2.resolveAddress)(tx.from, this.provider);\n      (0, index_js_5.assertArgument)(from != null && from.toLowerCase() === this.address.toLowerCase(), \"from address mismatch\", \"transaction\", _tx);\n      tx.from = from;\n    } else {\n      tx.from = this.address;\n    }\n    const hexTx = this.provider.getRpcTransaction(tx);\n    return await this.provider.send(\"eth_signTransaction\", [hexTx]);\n  }\n  async signMessage(_message) {\n    const message = typeof _message === \"string\" ? (0, index_js_5.toUtf8Bytes)(_message) : _message;\n    return await this.provider.send(\"personal_sign\", [(0, index_js_5.hexlify)(message), this.address.toLowerCase()]);\n  }\n  async signTypedData(domain, types, _value) {\n    const value = deepCopy(_value);\n    // Populate any ENS names (in-place)\n    const populated = await index_js_3.TypedDataEncoder.resolveNames(domain, types, value, async value => {\n      const address = await (0, index_js_2.resolveAddress)(value);\n      (0, index_js_5.assertArgument)(address != null, \"TypedData does not support null address\", \"value\", value);\n      return address;\n    });\n    return await this.provider.send(\"eth_signTypedData_v4\", [this.address.toLowerCase(), JSON.stringify(index_js_3.TypedDataEncoder.getPayload(populated.domain, types, populated.value))]);\n  }\n  async unlock(password) {\n    return this.provider.send(\"personal_unlockAccount\", [this.address.toLowerCase(), password, null]);\n  }\n  // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n  async _legacySignMessage(_message) {\n    const message = typeof _message === \"string\" ? (0, index_js_5.toUtf8Bytes)(_message) : _message;\n    return await this.provider.send(\"eth_sign\", [this.address.toLowerCase(), (0, index_js_5.hexlify)(message)]);\n  }\n}\nexports.JsonRpcSigner = JsonRpcSigner;\n/**\n *  The JsonRpcApiProvider is an abstract class and **MUST** be\n *  sub-classed.\n *\n *  It provides the base for all JSON-RPC-based Provider interaction.\n *\n *  Sub-classing Notes:\n *  - a sub-class MUST override _send\n *  - a sub-class MUST call the `_start()` method once connected\n */\nvar _options = /*#__PURE__*/new WeakMap();\nvar _nextId = /*#__PURE__*/new WeakMap();\nvar _payloads = /*#__PURE__*/new WeakMap();\nvar _drainTimer = /*#__PURE__*/new WeakMap();\nvar _notReady = /*#__PURE__*/new WeakMap();\nvar _network = /*#__PURE__*/new WeakMap();\nvar _scheduleDrain = /*#__PURE__*/new WeakSet();\nclass JsonRpcApiProvider extends abstract_provider_js_1.AbstractProvider {\n  constructor(network, options) {\n    const superOptions = {};\n    if (options && options.cacheTimeout != null) {\n      superOptions.cacheTimeout = options.cacheTimeout;\n    }\n    super(network, superOptions);\n    _classPrivateMethodInitSpec(this, _scheduleDrain);\n    _classPrivateFieldInitSpec(this, _options, {\n      writable: true,\n      value: void 0\n    });\n    // The next ID to use for the JSON-RPC ID field\n    _classPrivateFieldInitSpec(this, _nextId, {\n      writable: true,\n      value: void 0\n    });\n    // Payloads are queued and triggered in batches using the drainTimer\n    _classPrivateFieldInitSpec(this, _payloads, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _drainTimer, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _notReady, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _network, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _nextId, 1);\n    _classPrivateFieldSet(this, _options, Object.assign({}, defaultOptions, options || {}));\n    _classPrivateFieldSet(this, _payloads, []);\n    _classPrivateFieldSet(this, _drainTimer, null);\n    _classPrivateFieldSet(this, _network, null);\n    {\n      let resolve = null;\n      const promise = new Promise(_resolve => {\n        resolve = _resolve;\n      });\n      _classPrivateFieldSet(this, _notReady, {\n        promise,\n        resolve\n      });\n    }\n    // Make sure any static network is compatbile with the provided netwrok\n    const staticNetwork = this._getOption(\"staticNetwork\");\n    if (staticNetwork) {\n      (0, index_js_5.assertArgument)(network == null || staticNetwork.matches(network), \"staticNetwork MUST match network object\", \"options\", options);\n      _classPrivateFieldSet(this, _network, staticNetwork);\n    }\n  }\n  /**\n   *  Returns the value associated with the option %%key%%.\n   *\n   *  Sub-classes can use this to inquire about configuration options.\n   */\n  _getOption(key) {\n    return _classPrivateFieldGet(this, _options)[key];\n  }\n  /**\n   *  Gets the [[Network]] this provider has committed to. On each call, the network\n   *  is detected, and if it has changed, the call will reject.\n   */\n  get _network() {\n    (0, index_js_5.assert)(_classPrivateFieldGet(this, _network), \"network is not available yet\", \"NETWORK_ERROR\");\n    return _classPrivateFieldGet(this, _network);\n  }\n  /**\n   *  Resolves to the non-normalized value by performing %%req%%.\n   *\n   *  Sub-classes may override this to modify behavior of actions,\n   *  and should generally call ``super._perform`` as a fallback.\n   */\n  async _perform(req) {\n    // Legacy networks do not like the type field being passed along (which\n    // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n    if (req.method === \"call\" || req.method === \"estimateGas\") {\n      let tx = req.transaction;\n      if (tx && tx.type != null && (0, index_js_5.getBigInt)(tx.type)) {\n        // If there are no EIP-1559 properties, it might be non-EIP-a559\n        if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n          const feeData = await this.getFeeData();\n          if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n            // Network doesn't know about EIP-1559 (and hence type)\n            req = Object.assign({}, req, {\n              transaction: Object.assign({}, tx, {\n                type: undefined\n              })\n            });\n          }\n        }\n      }\n    }\n    const request = this.getRpcRequest(req);\n    if (request != null) {\n      return await this.send(request.method, request.args);\n    }\n    return super._perform(req);\n  }\n  /**\n   *  Sub-classes may override this; it detects the *actual* network that\n   *  we are **currently** connected to.\n   *\n   *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the\n   *  _send primitive must be used instead.\n   */\n  async _detectNetwork() {\n    var _this$nextId, _this$nextId2;\n    const network = this._getOption(\"staticNetwork\");\n    if (network) {\n      return network;\n    }\n    // If we are ready, use ``send``, which enabled requests to be batched\n    if (this.ready) {\n      return network_js_1.Network.from((0, index_js_5.getBigInt)(await this.send(\"eth_chainId\", [])));\n    }\n    // We are not ready yet; use the primitive _send\n    const payload = {\n      id: (_classPrivateFieldSet(this, _nextId, (_this$nextId = _classPrivateFieldGet(this, _nextId), _this$nextId2 = _this$nextId++, _this$nextId)), _this$nextId2),\n      method: \"eth_chainId\",\n      params: [],\n      jsonrpc: \"2.0\"\n    };\n    this.emit(\"debug\", {\n      action: \"sendRpcPayload\",\n      payload\n    });\n    let result;\n    try {\n      result = (await this._send(payload))[0];\n    } catch (error) {\n      this.emit(\"debug\", {\n        action: \"receiveRpcError\",\n        error\n      });\n      throw error;\n    }\n    this.emit(\"debug\", {\n      action: \"receiveRpcResult\",\n      result\n    });\n    if (\"result\" in result) {\n      return network_js_1.Network.from((0, index_js_5.getBigInt)(result.result));\n    }\n    throw this.getRpcError(payload, result);\n  }\n  /**\n   *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls\n   *  will be passed to [[_send]] from [[send]]. If it is overridden, then\n   *  ``super._start()`` **MUST** be called.\n   *\n   *  Calling it multiple times is safe and has no effect.\n   */\n  _start() {\n    if (_classPrivateFieldGet(this, _notReady) == null || _classPrivateFieldGet(this, _notReady).resolve == null) {\n      return;\n    }\n    _classPrivateFieldGet(this, _notReady).resolve();\n    _classPrivateFieldSet(this, _notReady, null);\n    (async () => {\n      // Bootstrap the network\n      while (_classPrivateFieldGet(this, _network) == null && !this.destroyed) {\n        try {\n          _classPrivateFieldSet(this, _network, await this._detectNetwork());\n        } catch (error) {\n          console.log(\"JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)\");\n          this.emit(\"error\", (0, index_js_5.makeError)(\"failed to bootstrap network detection\", \"NETWORK_ERROR\", {\n            event: \"initial-network-discovery\",\n            info: {\n              error\n            }\n          }));\n          await stall(1000);\n        }\n      }\n      // Start dispatching requests\n      _classPrivateMethodGet(this, _scheduleDrain, _scheduleDrain2).call(this);\n    })();\n  }\n  /**\n   *  Resolves once the [[_start]] has been called. This can be used in\n   *  sub-classes to defer sending data until the connection has been\n   *  established.\n   */\n  async _waitUntilReady() {\n    if (_classPrivateFieldGet(this, _notReady) == null) {\n      return;\n    }\n    return await _classPrivateFieldGet(this, _notReady).promise;\n  }\n  /**\n   *  Return a Subscriber that will manage the %%sub%%.\n   *\n   *  Sub-classes may override this to modify the behavior of\n   *  subscription management.\n   */\n  _getSubscriber(sub) {\n    // Pending Filters aren't availble via polling\n    if (sub.type === \"pending\") {\n      return new subscriber_filterid_js_1.FilterIdPendingSubscriber(this);\n    }\n    if (sub.type === \"event\") {\n      if (this._getOption(\"polling\")) {\n        return new subscriber_polling_js_1.PollingEventSubscriber(this, sub.filter);\n      }\n      return new subscriber_filterid_js_1.FilterIdEventSubscriber(this, sub.filter);\n    }\n    // Orphaned Logs are handled automatically, by the filter, since\n    // logs with removed are emitted by it\n    if (sub.type === \"orphan\" && sub.filter.orphan === \"drop-log\") {\n      return new abstract_provider_js_1.UnmanagedSubscriber(\"orphan\");\n    }\n    return super._getSubscriber(sub);\n  }\n  /**\n   *  Returns true only if the [[_start]] has been called.\n   */\n  get ready() {\n    return _classPrivateFieldGet(this, _notReady) == null;\n  }\n  /**\n   *  Returns %%tx%% as a normalized JSON-RPC transaction request,\n   *  which has all values hexlified and any numeric values converted\n   *  to Quantity values.\n   */\n  getRpcTransaction(tx) {\n    const result = {};\n    // JSON-RPC now requires numeric values to be \"quantity\" values\n    [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(key => {\n      if (tx[key] == null) {\n        return;\n      }\n      let dstKey = key;\n      if (key === \"gasLimit\") {\n        dstKey = \"gas\";\n      }\n      result[dstKey] = (0, index_js_5.toQuantity)((0, index_js_5.getBigInt)(tx[key], `tx.${key}`));\n    });\n    // Make sure addresses and data are lowercase\n    [\"from\", \"to\", \"data\"].forEach(key => {\n      if (tx[key] == null) {\n        return;\n      }\n      result[key] = (0, index_js_5.hexlify)(tx[key]);\n    });\n    // Normalize the access list object\n    if (tx.accessList) {\n      result[\"accessList\"] = (0, index_js_4.accessListify)(tx.accessList);\n    }\n    return result;\n  }\n  /**\n   *  Returns the request method and arguments required to perform\n   *  %%req%%.\n   */\n  getRpcRequest(req) {\n    switch (req.method) {\n      case \"chainId\":\n        return {\n          method: \"eth_chainId\",\n          args: []\n        };\n      case \"getBlockNumber\":\n        return {\n          method: \"eth_blockNumber\",\n          args: []\n        };\n      case \"getGasPrice\":\n        return {\n          method: \"eth_gasPrice\",\n          args: []\n        };\n      case \"getBalance\":\n        return {\n          method: \"eth_getBalance\",\n          args: [getLowerCase(req.address), req.blockTag]\n        };\n      case \"getTransactionCount\":\n        return {\n          method: \"eth_getTransactionCount\",\n          args: [getLowerCase(req.address), req.blockTag]\n        };\n      case \"getCode\":\n        return {\n          method: \"eth_getCode\",\n          args: [getLowerCase(req.address), req.blockTag]\n        };\n      case \"getStorage\":\n        return {\n          method: \"eth_getStorageAt\",\n          args: [getLowerCase(req.address), \"0x\" + req.position.toString(16), req.blockTag]\n        };\n      case \"broadcastTransaction\":\n        return {\n          method: \"eth_sendRawTransaction\",\n          args: [req.signedTransaction]\n        };\n      case \"getBlock\":\n        if (\"blockTag\" in req) {\n          return {\n            method: \"eth_getBlockByNumber\",\n            args: [req.blockTag, !!req.includeTransactions]\n          };\n        } else if (\"blockHash\" in req) {\n          return {\n            method: \"eth_getBlockByHash\",\n            args: [req.blockHash, !!req.includeTransactions]\n          };\n        }\n        break;\n      case \"getTransaction\":\n        return {\n          method: \"eth_getTransactionByHash\",\n          args: [req.hash]\n        };\n      case \"getTransactionReceipt\":\n        return {\n          method: \"eth_getTransactionReceipt\",\n          args: [req.hash]\n        };\n      case \"call\":\n        return {\n          method: \"eth_call\",\n          args: [this.getRpcTransaction(req.transaction), req.blockTag]\n        };\n      case \"estimateGas\":\n        {\n          return {\n            method: \"eth_estimateGas\",\n            args: [this.getRpcTransaction(req.transaction)]\n          };\n        }\n      case \"getLogs\":\n        if (req.filter && req.filter.address != null) {\n          if (Array.isArray(req.filter.address)) {\n            req.filter.address = req.filter.address.map(getLowerCase);\n          } else {\n            req.filter.address = getLowerCase(req.filter.address);\n          }\n        }\n        return {\n          method: \"eth_getLogs\",\n          args: [req.filter]\n        };\n    }\n    return null;\n  }\n  /**\n   *  Returns an ethers-style Error for the given JSON-RPC error\n   *  %%payload%%, coalescing the various strings and error shapes\n   *  that different nodes return, coercing them into a machine-readable\n   *  standardized error.\n   */\n  getRpcError(payload, _error) {\n    const {\n      method\n    } = payload;\n    const {\n      error\n    } = _error;\n    if (method === \"eth_estimateGas\" && error.message) {\n      const msg = error.message;\n      if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) {\n        return (0, index_js_5.makeError)(\"insufficient funds\", \"INSUFFICIENT_FUNDS\", {\n          transaction: payload.params[0],\n          info: {\n            payload,\n            error\n          }\n        });\n      }\n    }\n    if (method === \"eth_call\" || method === \"eth_estimateGas\") {\n      const result = spelunkData(error);\n      const e = index_js_1.AbiCoder.getBuiltinCallException(method === \"eth_call\" ? \"call\" : \"estimateGas\", payload.params[0], result ? result.data : null);\n      e.info = {\n        error,\n        payload\n      };\n      return e;\n    }\n    // Only estimateGas and call can return arbitrary contract-defined text, so now we\n    // we can process text safely.\n    const message = JSON.stringify(spelunkMessage(error));\n    if (typeof error.message === \"string\" && error.message.match(/user denied|ethers-user-denied/i)) {\n      const actionMap = {\n        eth_sign: \"signMessage\",\n        personal_sign: \"signMessage\",\n        eth_signTypedData_v4: \"signTypedData\",\n        eth_signTransaction: \"signTransaction\",\n        eth_sendTransaction: \"sendTransaction\",\n        eth_requestAccounts: \"requestAccess\",\n        wallet_requestAccounts: \"requestAccess\"\n      };\n      return (0, index_js_5.makeError)(`user rejected action`, \"ACTION_REJECTED\", {\n        action: actionMap[method] || \"unknown\",\n        reason: \"rejected\",\n        info: {\n          payload,\n          error\n        }\n      });\n    }\n    if (method === \"eth_sendRawTransaction\" || method === \"eth_sendTransaction\") {\n      const transaction = payload.params[0];\n      if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {\n        return (0, index_js_5.makeError)(\"insufficient funds for intrinsic transaction cost\", \"INSUFFICIENT_FUNDS\", {\n          transaction,\n          info: {\n            error\n          }\n        });\n      }\n      if (message.match(/nonce/i) && message.match(/too low/i)) {\n        return (0, index_js_5.makeError)(\"nonce has already been used\", \"NONCE_EXPIRED\", {\n          transaction,\n          info: {\n            error\n          }\n        });\n      }\n      // \"replacement transaction underpriced\"\n      if (message.match(/replacement transaction/i) && message.match(/underpriced/i)) {\n        return (0, index_js_5.makeError)(\"replacement fee too low\", \"REPLACEMENT_UNDERPRICED\", {\n          transaction,\n          info: {\n            error\n          }\n        });\n      }\n      if (message.match(/only replay-protected/i)) {\n        return (0, index_js_5.makeError)(\"legacy pre-eip-155 transactions not supported\", \"UNSUPPORTED_OPERATION\", {\n          operation: method,\n          info: {\n            transaction,\n            info: {\n              error\n            }\n          }\n        });\n      }\n    }\n    let unsupported = !!message.match(/the method .* does not exist/i);\n    if (!unsupported) {\n      if (error && error.details && error.details.startsWith(\"Unauthorized method:\")) {\n        unsupported = true;\n      }\n    }\n    if (unsupported) {\n      return (0, index_js_5.makeError)(\"unsupported operation\", \"UNSUPPORTED_OPERATION\", {\n        operation: payload.method,\n        info: {\n          error,\n          payload\n        }\n      });\n    }\n    return (0, index_js_5.makeError)(\"could not coalesce error\", \"UNKNOWN_ERROR\", {\n      error,\n      payload\n    });\n  }\n  /**\n   *  Requests the %%method%% with %%params%% via the JSON-RPC protocol\n   *  over the underlying channel. This can be used to call methods\n   *  on the backend that do not have a high-level API within the Provider\n   *  API.\n   *\n   *  This method queues requests according to the batch constraints\n   *  in the options, assigns the request a unique ID.\n   *\n   *  **Do NOT override** this method in sub-classes; instead\n   *  override [[_send]] or force the options values in the\n   *  call to the constructor to modify this method's behavior.\n   */\n  send(method, params) {\n    var _this$nextId3, _this$nextId4;\n    // @TODO: cache chainId?? purge on switch_networks\n    // We have been destroyed; no operations are supported anymore\n    if (this.destroyed) {\n      return Promise.reject((0, index_js_5.makeError)(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", {\n        operation: method\n      }));\n    }\n    const id = (_classPrivateFieldSet(this, _nextId, (_this$nextId3 = _classPrivateFieldGet(this, _nextId), _this$nextId4 = _this$nextId3++, _this$nextId3)), _this$nextId4);\n    const promise = new Promise((resolve, reject) => {\n      _classPrivateFieldGet(this, _payloads).push({\n        resolve,\n        reject,\n        payload: {\n          method,\n          params,\n          id,\n          jsonrpc: \"2.0\"\n        }\n      });\n    });\n    // If there is not a pending drainTimer, set one\n    _classPrivateMethodGet(this, _scheduleDrain, _scheduleDrain2).call(this);\n    return promise;\n  }\n  /**\n   *  Resolves to the [[Signer]] account for  %%address%% managed by\n   *  the client.\n   *\n   *  If the %%address%% is a number, it is used as an index in the\n   *  the accounts from [[listAccounts]].\n   *\n   *  This can only be used on clients which manage accounts (such as\n   *  Geth with imported account or MetaMask).\n   *\n   *  Throws if the account doesn't exist.\n   */\n  async getSigner(address) {\n    if (address == null) {\n      address = 0;\n    }\n    const accountsPromise = this.send(\"eth_accounts\", []);\n    // Account index\n    if (typeof address === \"number\") {\n      const accounts = await accountsPromise;\n      if (address >= accounts.length) {\n        throw new Error(\"no such account\");\n      }\n      return new JsonRpcSigner(this, accounts[address]);\n    }\n    const {\n      accounts\n    } = await (0, index_js_5.resolveProperties)({\n      network: this.getNetwork(),\n      accounts: accountsPromise\n    });\n    // Account address\n    address = (0, index_js_2.getAddress)(address);\n    for (const account of accounts) {\n      if ((0, index_js_2.getAddress)(account) === address) {\n        return new JsonRpcSigner(this, address);\n      }\n    }\n    throw new Error(\"invalid account\");\n  }\n  async listAccounts() {\n    const accounts = await this.send(\"eth_accounts\", []);\n    return accounts.map(a => new JsonRpcSigner(this, a));\n  }\n  destroy() {\n    // Stop processing requests\n    if (_classPrivateFieldGet(this, _drainTimer)) {\n      clearTimeout(_classPrivateFieldGet(this, _drainTimer));\n      _classPrivateFieldSet(this, _drainTimer, null);\n    }\n    // Cancel all pending requests\n    for (const {\n      payload,\n      reject\n    } of _classPrivateFieldGet(this, _payloads)) {\n      reject((0, index_js_5.makeError)(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", {\n        operation: payload.method\n      }));\n    }\n    _classPrivateFieldSet(this, _payloads, []);\n    // Parent clean-up\n    super.destroy();\n  }\n}\nfunction _scheduleDrain2() {\n  if (_classPrivateFieldGet(this, _drainTimer)) {\n    return;\n  }\n  // If we aren't using batching, no hard in sending it immeidately\n  const stallTime = this._getOption(\"batchMaxCount\") === 1 ? 0 : this._getOption(\"batchStallTime\");\n  _classPrivateFieldSet(this, _drainTimer, setTimeout(() => {\n    _classPrivateFieldSet(this, _drainTimer, null);\n    const payloads = _classPrivateFieldGet(this, _payloads);\n    _classPrivateFieldSet(this, _payloads, []);\n    while (payloads.length) {\n      // Create payload batches that satisfy our batch constraints\n      const batch = [payloads.shift()];\n      while (payloads.length) {\n        if (batch.length === _classPrivateFieldGet(this, _options).batchMaxCount) {\n          break;\n        }\n        batch.push(payloads.shift());\n        const bytes = JSON.stringify(batch.map(p => p.payload));\n        if (bytes.length > _classPrivateFieldGet(this, _options).batchMaxSize) {\n          payloads.unshift(batch.pop());\n          break;\n        }\n      }\n      // Process the result to each payload\n      (async () => {\n        const payload = batch.length === 1 ? batch[0].payload : batch.map(p => p.payload);\n        this.emit(\"debug\", {\n          action: \"sendRpcPayload\",\n          payload\n        });\n        try {\n          const result = await this._send(payload);\n          this.emit(\"debug\", {\n            action: \"receiveRpcResult\",\n            result\n          });\n          // Process results in batch order\n          for (const {\n            resolve,\n            reject,\n            payload\n          } of batch) {\n            if (this.destroyed) {\n              reject((0, index_js_5.makeError)(\"provider destroyed; cancelled request\", \"UNSUPPORTED_OPERATION\", {\n                operation: payload.method\n              }));\n              continue;\n            }\n            // Find the matching result\n            const resp = result.filter(r => r.id === payload.id)[0];\n            // No result; the node failed us in unexpected ways\n            if (resp == null) {\n              const error = (0, index_js_5.makeError)(\"missing response for request\", \"BAD_DATA\", {\n                value: result,\n                info: {\n                  payload\n                }\n              });\n              this.emit(\"error\", error);\n              reject(error);\n              continue;\n            }\n            // The response is an error\n            if (\"error\" in resp) {\n              reject(this.getRpcError(payload, resp));\n              continue;\n            }\n            // All good; send the result\n            resolve(resp.result);\n          }\n        } catch (error) {\n          this.emit(\"debug\", {\n            action: \"receiveRpcError\",\n            error\n          });\n          for (const {\n            reject\n          } of batch) {\n            // @TODO: augment the error with the payload\n            reject(error);\n          }\n        }\n      })();\n    }\n  }, stallTime));\n}\nexports.JsonRpcApiProvider = JsonRpcApiProvider;\nvar _pollingInterval = /*#__PURE__*/new WeakMap();\nclass JsonRpcApiPollingProvider extends JsonRpcApiProvider {\n  constructor(network, options) {\n    super(network, options);\n    _classPrivateFieldInitSpec(this, _pollingInterval, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _pollingInterval, 4000);\n  }\n  _getSubscriber(sub) {\n    const subscriber = super._getSubscriber(sub);\n    if (isPollable(subscriber)) {\n      subscriber.pollingInterval = _classPrivateFieldGet(this, _pollingInterval);\n    }\n    return subscriber;\n  }\n  /**\n   *  The polling interval (default: 4000 ms)\n   */\n  get pollingInterval() {\n    return _classPrivateFieldGet(this, _pollingInterval);\n  }\n  set pollingInterval(value) {\n    if (!Number.isInteger(value) || value < 0) {\n      throw new Error(\"invalid interval\");\n    }\n    _classPrivateFieldSet(this, _pollingInterval, value);\n    this._forEachSubscriber(sub => {\n      if (isPollable(sub)) {\n        sub.pollingInterval = _classPrivateFieldGet(this, _pollingInterval);\n      }\n    });\n  }\n}\nexports.JsonRpcApiPollingProvider = JsonRpcApiPollingProvider;\n/**\n *  The JsonRpcProvider is one of the most common Providers,\n *  which performs all operations over HTTP (or HTTPS) requests.\n *\n *  Events are processed by polling the backend for the current block\n *  number; when it advances, all block-base events are then checked\n *  for updates.\n */\nvar _connect = /*#__PURE__*/new WeakMap();\nclass JsonRpcProvider extends JsonRpcApiPollingProvider {\n  constructor(url, network, options) {\n    if (url == null) {\n      url = \"http:/\\/localhost:8545\";\n    }\n    super(network, options);\n    _classPrivateFieldInitSpec(this, _connect, {\n      writable: true,\n      value: void 0\n    });\n    if (typeof url === \"string\") {\n      _classPrivateFieldSet(this, _connect, new index_js_5.FetchRequest(url));\n    } else {\n      _classPrivateFieldSet(this, _connect, url.clone());\n    }\n  }\n  _getConnection() {\n    return _classPrivateFieldGet(this, _connect).clone();\n  }\n  async send(method, params) {\n    // All requests are over HTTP, so we can just start handling requests\n    // We do this here rather than the constructor so that we don't send any\n    // requests to the network (i.e. eth_chainId) until we absolutely have to.\n    await this._start();\n    return await super.send(method, params);\n  }\n  async _send(payload) {\n    // Configure a POST connection for the requested method\n    const request = this._getConnection();\n    request.body = JSON.stringify(payload);\n    request.setHeader(\"content-type\", \"application/json\");\n    const response = await request.send();\n    response.assertOk();\n    let resp = response.bodyJson;\n    if (!Array.isArray(resp)) {\n      resp = [resp];\n    }\n    return resp;\n  }\n}\nexports.JsonRpcProvider = JsonRpcProvider;\nfunction spelunkData(value) {\n  if (value == null) {\n    return null;\n  }\n  // These *are* the droids we're looking for.\n  if (typeof value.message === \"string\" && value.message.match(/revert/i) && (0, index_js_5.isHexString)(value.data)) {\n    return {\n      message: value.message,\n      data: value.data\n    };\n  }\n  // Spelunk further...\n  if (typeof value === \"object\") {\n    for (const key in value) {\n      const result = spelunkData(value[key]);\n      if (result) {\n        return result;\n      }\n    }\n    return null;\n  }\n  // Might be a JSON string we can further descend...\n  if (typeof value === \"string\") {\n    try {\n      return spelunkData(JSON.parse(value));\n    } catch (error) {}\n  }\n  return null;\n}\nfunction _spelunkMessage(value, result) {\n  if (value == null) {\n    return;\n  }\n  // These *are* the droids we're looking for.\n  if (typeof value.message === \"string\") {\n    result.push(value.message);\n  }\n  // Spelunk further...\n  if (typeof value === \"object\") {\n    for (const key in value) {\n      _spelunkMessage(value[key], result);\n    }\n  }\n  // Might be a JSON string we can further descend...\n  if (typeof value === \"string\") {\n    try {\n      return _spelunkMessage(JSON.parse(value), result);\n    } catch (error) {}\n  }\n}\nfunction spelunkMessage(value) {\n  const result = [];\n  _spelunkMessage(value, result);\n  return result;\n}","map":{"version":3,"names":["_classPrivateMethodInitSpec","require","default","_classPrivateFieldInitSpec","_classPrivateMethodGet","_classPrivateFieldSet","_classPrivateFieldGet","_defineProperty","index_js_1","index_js_2","index_js_3","index_js_4","index_js_5","abstract_provider_js_1","abstract_signer_js_1","network_js_1","subscriber_filterid_js_1","subscriber_polling_js_1","Primitive","split","deepCopy","value","indexOf","getAddress","Array","isArray","map","Object","keys","reduce","accum","key","Error","stall","duration","Promise","resolve","setTimeout","getLowerCase","toLowerCase","isPollable","pollingInterval","defaultOptions","polling","staticNetwork","batchStallTime","batchMaxSize","batchMaxCount","cacheTimeout","JsonRpcSigner","AbstractSigner","constructor","provider","address","defineProperties","connect","assert","operation","populateTransaction","tx","populateCall","sendUncheckedTransaction","_tx","promises","from","_from","push","resolveAddress","assertArgument","gasLimit","estimateGas","to","_to","length","all","hexTx","getRpcTransaction","send","sendTransaction","blockNumber","getBlockNumber","hash","reject","timeouts","checkTx","getTransaction","replaceableTransaction","_setTimeout","pop","signTransaction","signMessage","_message","message","toUtf8Bytes","hexlify","signTypedData","domain","types","_value","populated","TypedDataEncoder","resolveNames","JSON","stringify","getPayload","unlock","password","_legacySignMessage","exports","_options","WeakMap","_nextId","_payloads","_drainTimer","_notReady","_network","_scheduleDrain","WeakSet","JsonRpcApiProvider","AbstractProvider","network","options","superOptions","writable","assign","promise","_resolve","_getOption","matches","_perform","req","method","transaction","type","getBigInt","maxFeePerGas","maxPriorityFeePerGas","feeData","getFeeData","undefined","request","getRpcRequest","args","_detectNetwork","_this$nextId","_this$nextId2","ready","Network","payload","id","params","jsonrpc","emit","action","result","_send","error","getRpcError","_start","destroyed","console","log","makeError","event","info","_scheduleDrain2","call","_waitUntilReady","_getSubscriber","sub","FilterIdPendingSubscriber","PollingEventSubscriber","filter","FilterIdEventSubscriber","orphan","UnmanagedSubscriber","forEach","dstKey","toQuantity","accessList","accessListify","blockTag","position","toString","signedTransaction","includeTransactions","blockHash","_error","msg","match","spelunkData","e","AbiCoder","getBuiltinCallException","data","spelunkMessage","actionMap","eth_sign","personal_sign","eth_signTypedData_v4","eth_signTransaction","eth_sendTransaction","eth_requestAccounts","wallet_requestAccounts","reason","unsupported","details","startsWith","_this$nextId3","_this$nextId4","getSigner","accountsPromise","accounts","resolveProperties","getNetwork","account","listAccounts","a","destroy","clearTimeout","stallTime","payloads","batch","shift","bytes","p","unshift","resp","r","_pollingInterval","JsonRpcApiPollingProvider","subscriber","Number","isInteger","_forEachSubscriber","_connect","JsonRpcProvider","url","FetchRequest","clone","_getConnection","body","setHeader","response","assertOk","bodyJson","isHexString","parse","_spelunkMessage"],"sources":["../../src.ts/providers/provider-jsonrpc.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}