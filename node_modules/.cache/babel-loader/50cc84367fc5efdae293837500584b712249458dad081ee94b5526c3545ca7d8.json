{"ast":null,"code":"\"use strict\";\n\nvar _classPrivateFieldInitSpec = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _defineProperty = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _classPrivateFieldGet = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateFieldGet.js\").default;\nvar _classPrivateFieldSet = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateFieldSet.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NonceManager = void 0;\nconst index_js_1 = require(\"../utils/index.js\");\nconst abstract_signer_js_1 = require(\"./abstract-signer.js\");\n/**\n *  A **NonceManager** wraps another [[Signer]] and automatically manages\n *  the nonce, ensuring serialized and sequential nonces are used during\n *  transaction.\n */\nvar _noncePromise = /*#__PURE__*/new WeakMap();\nvar _delta = /*#__PURE__*/new WeakMap();\nclass NonceManager extends abstract_signer_js_1.AbstractSigner {\n  /**\n   *  Creates a new **NonceManager** to manage %%signer%%.\n   */\n  constructor(signer) {\n    super(signer.provider);\n    /**\n     *  The Signer being managed.\n     */\n    _defineProperty(this, \"signer\", void 0);\n    _classPrivateFieldInitSpec(this, _noncePromise, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _delta, {\n      writable: true,\n      value: void 0\n    });\n    (0, index_js_1.defineProperties)(this, {\n      signer\n    });\n    _classPrivateFieldSet(this, _noncePromise, null);\n    _classPrivateFieldSet(this, _delta, 0);\n  }\n  async getAddress() {\n    return this.signer.getAddress();\n  }\n  connect(provider) {\n    return new NonceManager(this.signer.connect(provider));\n  }\n  async getNonce(blockTag) {\n    if (blockTag === \"pending\") {\n      if (_classPrivateFieldGet(this, _noncePromise) == null) {\n        _classPrivateFieldSet(this, _noncePromise, super.getNonce(\"pending\"));\n      }\n      const delta = _classPrivateFieldGet(this, _delta);\n      return (await _classPrivateFieldGet(this, _noncePromise)) + delta;\n    }\n    return super.getNonce(blockTag);\n  }\n  /**\n   *  Manually increment the nonce. This may be useful when managng\n   *  offline transactions.\n   */\n  increment() {\n    var _this$delta, _this$delta2;\n    _classPrivateFieldSet(this, _delta, (_this$delta = _classPrivateFieldGet(this, _delta), _this$delta2 = _this$delta++, _this$delta)), _this$delta2;\n  }\n  /**\n   *  Resets the nonce, causing the **NonceManager** to reload the current\n   *  nonce from the blockchain on the next transaction.\n   */\n  reset() {\n    _classPrivateFieldSet(this, _delta, 0);\n    _classPrivateFieldSet(this, _noncePromise, null);\n  }\n  async sendTransaction(tx) {\n    const noncePromise = this.getNonce(\"pending\");\n    this.increment();\n    tx = await this.signer.populateTransaction(tx);\n    tx.nonce = await noncePromise;\n    // @TODO: Maybe handle interesting/recoverable errors?\n    // Like don't increment if the tx was certainly not sent\n    return await this.signer.sendTransaction(tx);\n  }\n  signTransaction(tx) {\n    return this.signer.signTransaction(tx);\n  }\n  signMessage(message) {\n    return this.signer.signMessage(message);\n  }\n  signTypedData(domain, types, value) {\n    return this.signer.signTypedData(domain, types, value);\n  }\n}\nexports.NonceManager = NonceManager;","map":{"version":3,"names":["index_js_1","require","abstract_signer_js_1","_noncePromise","WeakMap","_delta","NonceManager","AbstractSigner","constructor","signer","provider","_defineProperty","_classPrivateFieldInitSpec","writable","value","defineProperties","_classPrivateFieldSet","getAddress","connect","getNonce","blockTag","_classPrivateFieldGet","delta","increment","_this$delta","_this$delta2","reset","sendTransaction","tx","noncePromise","populateTransaction","nonce","signTransaction","signMessage","message","signTypedData","domain","types","exports"],"sources":["../../src.ts/providers/signer-noncemanager.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;AAAA,MAAAA,UAAA,GAAAC,OAAA;AACA,MAAAC,oBAAA,GAAAD,OAAA;AAUA;;;;;AAAA,IAAAE,aAAA,oBAAAC,OAAA;AAAA,IAAAC,MAAA,oBAAAD,OAAA;AAKA,MAAaE,YAAa,SAAQJ,oBAAA,CAAAK,cAAc;EAS5C;;;EAGAC,YAAYC,MAAc;IACtB,KAAK,CAACA,MAAM,CAACC,QAAQ,CAAC;IAZ1B;;;IAAAC,eAAA;IAAAC,0BAAA,OAAAT,aAAA;MAAAU,QAAA;MAAAC,KAAA;IAAA;IAAAF,0BAAA,OAAAP,MAAA;MAAAQ,QAAA;MAAAC,KAAA;IAAA;IAaI,IAAAd,UAAA,CAAAe,gBAAgB,EAAe,IAAI,EAAE;MAAEN;IAAM,CAAE,CAAC;IAEhDO,qBAAA,KAAI,EAAAb,aAAA,EAAiB,IAAI;IACzBa,qBAAA,KAAI,EAAAX,MAAA,EAAU,CAAC;EACnB;EAEA,MAAMY,UAAUA,CAAA;IACZ,OAAO,IAAI,CAACR,MAAM,CAACQ,UAAU,EAAE;EACnC;EAEAC,OAAOA,CAACR,QAAyB;IAC7B,OAAO,IAAIJ,YAAY,CAAC,IAAI,CAACG,MAAM,CAACS,OAAO,CAACR,QAAQ,CAAC,CAAC;EAC1D;EAEA,MAAMS,QAAQA,CAACC,QAAmB;IAC9B,IAAIA,QAAQ,KAAK,SAAS,EAAE;MACxB,IAAIC,qBAAA,KAAI,EAAAlB,aAAA,KAAkB,IAAI,EAAE;QAC5Ba,qBAAA,KAAI,EAAAb,aAAA,EAAiB,KAAK,CAACgB,QAAQ,CAAC,SAAS,CAAC;;MAGlD,MAAMG,KAAK,GAAAD,qBAAA,CAAG,IAAI,EAAAhB,MAAA,CAAO;MACzB,OAAO,CAAC,MAAAgB,qBAAA,CAAM,IAAI,EAAAlB,aAAA,CAAc,IAAImB,KAAK;;IAG7C,OAAO,KAAK,CAACH,QAAQ,CAACC,QAAQ,CAAC;EACnC;EAEA;;;;EAIAG,SAASA,CAAA;IAAA,IAAAC,WAAA,EAAAC,YAAA;IACLT,qBAAA,KAAI,EAAAX,MAAA,GAAAmB,WAAA,GAAAH,qBAAA,CAAJ,IAAI,EAAAhB,MAAA,GAAAoB,YAAA,GAAAD,WAAA,IAAAA,WAAA,IAAAC,YAAA;EACR;EAEA;;;;EAIAC,KAAKA,CAAA;IACDV,qBAAA,KAAI,EAAAX,MAAA,EAAU,CAAC;IACfW,qBAAA,KAAI,EAAAb,aAAA,EAAiB,IAAI;EAC7B;EAEA,MAAMwB,eAAeA,CAACC,EAAsB;IACxC,MAAMC,YAAY,GAAG,IAAI,CAACV,QAAQ,CAAC,SAAS,CAAC;IAC7C,IAAI,CAACI,SAAS,EAAE;IAEhBK,EAAE,GAAG,MAAM,IAAI,CAACnB,MAAM,CAACqB,mBAAmB,CAACF,EAAE,CAAC;IAC9CA,EAAE,CAACG,KAAK,GAAG,MAAMF,YAAY;IAE7B;IACA;IACA,OAAO,MAAM,IAAI,CAACpB,MAAM,CAACkB,eAAe,CAACC,EAAE,CAAC;EAChD;EAEAI,eAAeA,CAACJ,EAAsB;IAClC,OAAO,IAAI,CAACnB,MAAM,CAACuB,eAAe,CAACJ,EAAE,CAAC;EAC1C;EAEAK,WAAWA,CAACC,OAA4B;IACpC,OAAO,IAAI,CAACzB,MAAM,CAACwB,WAAW,CAACC,OAAO,CAAC;EAC3C;EAEAC,aAAaA,CAACC,MAAuB,EAAEC,KAA4C,EAAEvB,KAA0B;IAC3G,OAAO,IAAI,CAACL,MAAM,CAAC0B,aAAa,CAACC,MAAM,EAAEC,KAAK,EAAEvB,KAAK,CAAC;EAC1D;;AAhFJwB,OAAA,CAAAhC,YAAA,GAAAA,YAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}