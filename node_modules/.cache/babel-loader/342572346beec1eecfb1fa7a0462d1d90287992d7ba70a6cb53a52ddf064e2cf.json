{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/es.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/es.typed-array.with.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DirectSecp256k1HdWallet = exports.extractKdfConfiguration = void 0;\nconst amino_1 = require(\"@cosmjs/amino\");\nconst crypto_1 = require(\"@cosmjs/crypto\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst signing_1 = require(\"./signing\");\nconst wallet_1 = require(\"./wallet\");\nconst serializationTypeV1 = \"directsecp256k1hdwallet-v1\";\n/**\n * A KDF configuration that is not very strong but can be used on the main thread.\n * It takes about 1 second in Node.js 16.0.0 and should have similar runtimes in other modern Wasm hosts.\n */\nconst basicPasswordHashingOptions = {\n  algorithm: \"argon2id\",\n  params: {\n    outputLength: 32,\n    opsLimit: 24,\n    memLimitKib: 12 * 1024\n  }\n};\nfunction isDerivationJson(thing) {\n  if (!(0, utils_1.isNonNullObject)(thing)) return false;\n  if (typeof thing.hdPath !== \"string\") return false;\n  if (typeof thing.prefix !== \"string\") return false;\n  return true;\n}\nfunction extractKdfConfigurationV1(doc) {\n  return doc.kdf;\n}\nfunction extractKdfConfiguration(serialization) {\n  const root = JSON.parse(serialization);\n  if (!(0, utils_1.isNonNullObject)(root)) throw new Error(\"Root document is not an object.\");\n  switch (root.type) {\n    case serializationTypeV1:\n      return extractKdfConfigurationV1(root);\n    default:\n      throw new Error(\"Unsupported serialization type\");\n  }\n}\nexports.extractKdfConfiguration = extractKdfConfiguration;\nconst defaultOptions = {\n  bip39Password: \"\",\n  hdPaths: [(0, amino_1.makeCosmoshubPath)(0)],\n  prefix: \"cosmos\"\n};\n/** A wallet for protobuf based signing using SIGN_MODE_DIRECT */\nclass DirectSecp256k1HdWallet {\n  constructor(mnemonic, options) {\n    var _a, _b;\n    const prefix = (_a = options.prefix) !== null && _a !== void 0 ? _a : defaultOptions.prefix;\n    const hdPaths = (_b = options.hdPaths) !== null && _b !== void 0 ? _b : defaultOptions.hdPaths;\n    this.secret = mnemonic;\n    this.seed = options.seed;\n    this.accounts = hdPaths.map(hdPath => ({\n      hdPath: hdPath,\n      prefix: prefix\n    }));\n  }\n  /**\n   * Restores a wallet from the given BIP39 mnemonic.\n   *\n   * @param mnemonic Any valid English mnemonic.\n   * @param options An optional `DirectSecp256k1HdWalletOptions` object optionally containing a bip39Password, hdPaths, and prefix.\n   */\n  static async fromMnemonic(mnemonic, options = {}) {\n    const mnemonicChecked = new crypto_1.EnglishMnemonic(mnemonic);\n    const seed = await crypto_1.Bip39.mnemonicToSeed(mnemonicChecked, options.bip39Password);\n    return new DirectSecp256k1HdWallet(mnemonicChecked, Object.assign(Object.assign({}, options), {\n      seed: seed\n    }));\n  }\n  /**\n   * Generates a new wallet with a BIP39 mnemonic of the given length.\n   *\n   * @param length The number of words in the mnemonic (12, 15, 18, 21 or 24).\n   * @param options An optional `DirectSecp256k1HdWalletOptions` object optionally containing a bip39Password, hdPaths, and prefix.\n   */\n  static async generate(length = 12, options = {}) {\n    const entropyLength = 4 * Math.floor(11 * length / 33);\n    const entropy = crypto_1.Random.getBytes(entropyLength);\n    const mnemonic = crypto_1.Bip39.encode(entropy);\n    return DirectSecp256k1HdWallet.fromMnemonic(mnemonic.toString(), options);\n  }\n  /**\n   * Restores a wallet from an encrypted serialization.\n   *\n   * @param password The user provided password used to generate an encryption key via a KDF.\n   *                 This is not normalized internally (see \"Unicode normalization\" to learn more).\n   */\n  static async deserialize(serialization, password) {\n    const root = JSON.parse(serialization);\n    if (!(0, utils_1.isNonNullObject)(root)) throw new Error(\"Root document is not an object.\");\n    switch (root.type) {\n      case serializationTypeV1:\n        return DirectSecp256k1HdWallet.deserializeTypeV1(serialization, password);\n      default:\n        throw new Error(\"Unsupported serialization type\");\n    }\n  }\n  /**\n   * Restores a wallet from an encrypted serialization.\n   *\n   * This is an advanced alternative to calling `deserialize(serialization, password)` directly, which allows\n   * you to offload the KDF execution to a non-UI thread (e.g. in a WebWorker).\n   *\n   * The caller is responsible for ensuring the key was derived with the given KDF configuration. This can be\n   * done using `extractKdfConfiguration(serialization)` and `executeKdf(password, kdfConfiguration)` from this package.\n   */\n  static async deserializeWithEncryptionKey(serialization, encryptionKey) {\n    const root = JSON.parse(serialization);\n    if (!(0, utils_1.isNonNullObject)(root)) throw new Error(\"Root document is not an object.\");\n    const untypedRoot = root;\n    switch (untypedRoot.type) {\n      case serializationTypeV1:\n        {\n          const decryptedBytes = await (0, wallet_1.decrypt)((0, encoding_1.fromBase64)(untypedRoot.data), encryptionKey, untypedRoot.encryption);\n          const decryptedDocument = JSON.parse((0, encoding_1.fromUtf8)(decryptedBytes));\n          const {\n            mnemonic,\n            accounts\n          } = decryptedDocument;\n          (0, utils_1.assert)(typeof mnemonic === \"string\");\n          if (!Array.isArray(accounts)) throw new Error(\"Property 'accounts' is not an array\");\n          if (!accounts.every(account => isDerivationJson(account))) {\n            throw new Error(\"Account is not in the correct format.\");\n          }\n          const firstPrefix = accounts[0].prefix;\n          if (!accounts.every(({\n            prefix\n          }) => prefix === firstPrefix)) {\n            throw new Error(\"Accounts do not all have the same prefix\");\n          }\n          const hdPaths = accounts.map(({\n            hdPath\n          }) => (0, crypto_1.stringToPath)(hdPath));\n          return DirectSecp256k1HdWallet.fromMnemonic(mnemonic, {\n            hdPaths: hdPaths,\n            prefix: firstPrefix\n          });\n        }\n      default:\n        throw new Error(\"Unsupported serialization type\");\n    }\n  }\n  static async deserializeTypeV1(serialization, password) {\n    const root = JSON.parse(serialization);\n    if (!(0, utils_1.isNonNullObject)(root)) throw new Error(\"Root document is not an object.\");\n    const encryptionKey = await (0, wallet_1.executeKdf)(password, root.kdf);\n    return DirectSecp256k1HdWallet.deserializeWithEncryptionKey(serialization, encryptionKey);\n  }\n  get mnemonic() {\n    return this.secret.toString();\n  }\n  async getAccounts() {\n    const accountsWithPrivkeys = await this.getAccountsWithPrivkeys();\n    return accountsWithPrivkeys.map(({\n      algo,\n      pubkey,\n      address\n    }) => ({\n      algo: algo,\n      pubkey: pubkey,\n      address: address\n    }));\n  }\n  async signDirect(signerAddress, signDoc) {\n    const accounts = await this.getAccountsWithPrivkeys();\n    const account = accounts.find(({\n      address\n    }) => address === signerAddress);\n    if (account === undefined) {\n      throw new Error(`Address ${signerAddress} not found in wallet`);\n    }\n    const {\n      privkey,\n      pubkey\n    } = account;\n    const signBytes = (0, signing_1.makeSignBytes)(signDoc);\n    const hashedMessage = (0, crypto_1.sha256)(signBytes);\n    const signature = await crypto_1.Secp256k1.createSignature(hashedMessage, privkey);\n    const signatureBytes = new Uint8Array([...signature.r(32), ...signature.s(32)]);\n    const stdSignature = (0, amino_1.encodeSecp256k1Signature)(pubkey, signatureBytes);\n    return {\n      signed: signDoc,\n      signature: stdSignature\n    };\n  }\n  /**\n   * Generates an encrypted serialization of this wallet.\n   *\n   * @param password The user provided password used to generate an encryption key via a KDF.\n   *                 This is not normalized internally (see \"Unicode normalization\" to learn more).\n   */\n  async serialize(password) {\n    const kdfConfiguration = basicPasswordHashingOptions;\n    const encryptionKey = await (0, wallet_1.executeKdf)(password, kdfConfiguration);\n    return this.serializeWithEncryptionKey(encryptionKey, kdfConfiguration);\n  }\n  /**\n   * Generates an encrypted serialization of this wallet.\n   *\n   * This is an advanced alternative to calling `serialize(password)` directly, which allows you to\n   * offload the KDF execution to a non-UI thread (e.g. in a WebWorker).\n   *\n   * The caller is responsible for ensuring the key was derived with the given KDF options. If this\n   * is not the case, the wallet cannot be restored with the original password.\n   */\n  async serializeWithEncryptionKey(encryptionKey, kdfConfiguration) {\n    const dataToEncrypt = {\n      mnemonic: this.mnemonic,\n      accounts: this.accounts.map(({\n        hdPath,\n        prefix\n      }) => ({\n        hdPath: (0, crypto_1.pathToString)(hdPath),\n        prefix: prefix\n      }))\n    };\n    const dataToEncryptRaw = (0, encoding_1.toUtf8)(JSON.stringify(dataToEncrypt));\n    const encryptionConfiguration = {\n      algorithm: wallet_1.supportedAlgorithms.xchacha20poly1305Ietf\n    };\n    const encryptedData = await (0, wallet_1.encrypt)(dataToEncryptRaw, encryptionKey, encryptionConfiguration);\n    const out = {\n      type: serializationTypeV1,\n      kdf: kdfConfiguration,\n      encryption: encryptionConfiguration,\n      data: (0, encoding_1.toBase64)(encryptedData)\n    };\n    return JSON.stringify(out);\n  }\n  async getKeyPair(hdPath) {\n    const {\n      privkey\n    } = crypto_1.Slip10.derivePath(crypto_1.Slip10Curve.Secp256k1, this.seed, hdPath);\n    const {\n      pubkey\n    } = await crypto_1.Secp256k1.makeKeypair(privkey);\n    return {\n      privkey: privkey,\n      pubkey: crypto_1.Secp256k1.compressPubkey(pubkey)\n    };\n  }\n  async getAccountsWithPrivkeys() {\n    return Promise.all(this.accounts.map(async ({\n      hdPath,\n      prefix\n    }) => {\n      const {\n        privkey,\n        pubkey\n      } = await this.getKeyPair(hdPath);\n      const address = encoding_1.Bech32.encode(prefix, (0, amino_1.rawSecp256k1PubkeyToRawAddress)(pubkey));\n      return {\n        algo: \"secp256k1\",\n        privkey: privkey,\n        pubkey: pubkey,\n        address: address\n      };\n    }));\n  }\n}\nexports.DirectSecp256k1HdWallet = DirectSecp256k1HdWallet;","map":{"version":3,"names":["amino_1","require","crypto_1","encoding_1","utils_1","signing_1","wallet_1","serializationTypeV1","basicPasswordHashingOptions","algorithm","params","outputLength","opsLimit","memLimitKib","isDerivationJson","thing","isNonNullObject","hdPath","prefix","extractKdfConfigurationV1","doc","kdf","extractKdfConfiguration","serialization","root","JSON","parse","Error","type","exports","defaultOptions","bip39Password","hdPaths","makeCosmoshubPath","DirectSecp256k1HdWallet","constructor","mnemonic","options","_a","_b","secret","seed","accounts","map","fromMnemonic","mnemonicChecked","EnglishMnemonic","Bip39","mnemonicToSeed","Object","assign","generate","length","entropyLength","Math","floor","entropy","Random","getBytes","encode","toString","deserialize","password","deserializeTypeV1","deserializeWithEncryptionKey","encryptionKey","untypedRoot","decryptedBytes","decrypt","fromBase64","data","encryption","decryptedDocument","fromUtf8","assert","Array","isArray","every","account","firstPrefix","stringToPath","executeKdf","getAccounts","accountsWithPrivkeys","getAccountsWithPrivkeys","algo","pubkey","address","signDirect","signerAddress","signDoc","find","undefined","privkey","signBytes","makeSignBytes","hashedMessage","sha256","signature","Secp256k1","createSignature","signatureBytes","Uint8Array","r","s","stdSignature","encodeSecp256k1Signature","signed","serialize","kdfConfiguration","serializeWithEncryptionKey","dataToEncrypt","pathToString","dataToEncryptRaw","toUtf8","stringify","encryptionConfiguration","supportedAlgorithms","xchacha20poly1305Ietf","encryptedData","encrypt","out","toBase64","getKeyPair","Slip10","derivePath","Slip10Curve","makeKeypair","compressPubkey","Promise","all","Bech32","rawSecp256k1PubkeyToRawAddress"],"sources":["../src/directsecp256k1hdwallet.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;AAAA,MAAAA,OAAA,GAAAC,OAAA;AACA,MAAAC,QAAA,GAAAD,OAAA;AAaA,MAAAE,UAAA,GAAAF,OAAA;AACA,MAAAG,OAAA,GAAAH,OAAA;AAIA,MAAAI,SAAA,GAAAJ,OAAA;AACA,MAAAK,QAAA,GAAAL,OAAA;AAaA,MAAMM,mBAAmB,GAAG,4BAA4B;AAExD;;;;AAIA,MAAMC,2BAA2B,GAAqB;EACpDC,SAAS,EAAE,UAAU;EACrBC,MAAM,EAAE;IACNC,YAAY,EAAE,EAAE;IAChBC,QAAQ,EAAE,EAAE;IACZC,WAAW,EAAE,EAAE,GAAG;;CAErB;AAkCD,SAASC,gBAAgBA,CAACC,KAAc;EACtC,IAAI,CAAC,IAAAX,OAAA,CAAAY,eAAe,EAACD,KAAK,CAAC,EAAE,OAAO,KAAK;EACzC,IAAI,OAAQA,KAA4B,CAACE,MAAM,KAAK,QAAQ,EAAE,OAAO,KAAK;EAC1E,IAAI,OAAQF,KAA4B,CAACG,MAAM,KAAK,QAAQ,EAAE,OAAO,KAAK;EAC1E,OAAO,IAAI;AACb;AAWA,SAASC,yBAAyBA,CAACC,GAAQ;EACzC,OAAOA,GAAG,CAACC,GAAG;AAChB;AAEA,SAAgBC,uBAAuBA,CAACC,aAAqB;EAC3D,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,aAAa,CAAC;EACtC,IAAI,CAAC,IAAAnB,OAAA,CAAAY,eAAe,EAACQ,IAAI,CAAC,EAAE,MAAM,IAAIG,KAAK,CAAC,iCAAiC,CAAC;EAE9E,QAASH,IAAY,CAACI,IAAI;IACxB,KAAKrB,mBAAmB;MACtB,OAAOY,yBAAyB,CAACK,IAAI,CAAC;IACxC;MACE,MAAM,IAAIG,KAAK,CAAC,gCAAgC,CAAC;;AAEvD;AAVAE,OAAA,CAAAP,uBAAA,GAAAA,uBAAA;AAyBA,MAAMQ,cAAc,GAAmC;EACrDC,aAAa,EAAE,EAAE;EACjBC,OAAO,EAAE,CAAC,IAAAhC,OAAA,CAAAiC,iBAAiB,EAAC,CAAC,CAAC,CAAC;EAC/Bf,MAAM,EAAE;CACT;AAED;AACA,MAAagB,uBAAuB;EAiHlCC,YAAsBC,QAAyB,EAAEC,OAAkD;;IACjG,MAAMnB,MAAM,GAAG,CAAAoB,EAAA,GAAAD,OAAO,CAACnB,MAAM,cAAAoB,EAAA,cAAAA,EAAA,GAAIR,cAAc,CAACZ,MAAM;IACtD,MAAMc,OAAO,GAAG,CAAAO,EAAA,GAAAF,OAAO,CAACL,OAAO,cAAAO,EAAA,cAAAA,EAAA,GAAIT,cAAc,CAACE,OAAO;IACzD,IAAI,CAACQ,MAAM,GAAGJ,QAAQ;IACtB,IAAI,CAACK,IAAI,GAAGJ,OAAO,CAACI,IAAI;IACxB,IAAI,CAACC,QAAQ,GAAGV,OAAO,CAACW,GAAG,CAAE1B,MAAM,KAAM;MACvCA,MAAM,EAAEA,MAAM;MACdC,MAAM,EAAEA;KACT,CAAC,CAAC;EACL;EAzHA;;;;;;EAMO,aAAa0B,YAAYA,CAC9BR,QAAgB,EAChBC,OAAA,GAAmD,EAAE;IAErD,MAAMQ,eAAe,GAAG,IAAI3C,QAAA,CAAA4C,eAAe,CAACV,QAAQ,CAAC;IACrD,MAAMK,IAAI,GAAG,MAAMvC,QAAA,CAAA6C,KAAK,CAACC,cAAc,CAACH,eAAe,EAAER,OAAO,CAACN,aAAa,CAAC;IAC/E,OAAO,IAAIG,uBAAuB,CAACW,eAAe,EAAAI,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAC7Cb,OAAO;MACVI,IAAI,EAAEA;IAAI,GACV;EACJ;EAEA;;;;;;EAMO,aAAaU,QAAQA,CAC1BC,MAAA,GAAiC,EAAE,EACnCf,OAAA,GAAmD,EAAE;IAErD,MAAMgB,aAAa,GAAG,CAAC,GAAGC,IAAI,CAACC,KAAK,CAAE,EAAE,GAAGH,MAAM,GAAI,EAAE,CAAC;IACxD,MAAMI,OAAO,GAAGtD,QAAA,CAAAuD,MAAM,CAACC,QAAQ,CAACL,aAAa,CAAC;IAC9C,MAAMjB,QAAQ,GAAGlC,QAAA,CAAA6C,KAAK,CAACY,MAAM,CAACH,OAAO,CAAC;IACtC,OAAOtB,uBAAuB,CAACU,YAAY,CAACR,QAAQ,CAACwB,QAAQ,EAAE,EAAEvB,OAAO,CAAC;EAC3E;EAEA;;;;;;EAMO,aAAawB,WAAWA,CAACtC,aAAqB,EAAEuC,QAAgB;IACrE,MAAMtC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,aAAa,CAAC;IACtC,IAAI,CAAC,IAAAnB,OAAA,CAAAY,eAAe,EAACQ,IAAI,CAAC,EAAE,MAAM,IAAIG,KAAK,CAAC,iCAAiC,CAAC;IAC9E,QAASH,IAAY,CAACI,IAAI;MACxB,KAAKrB,mBAAmB;QACtB,OAAO2B,uBAAuB,CAAC6B,iBAAiB,CAACxC,aAAa,EAAEuC,QAAQ,CAAC;MAC3E;QACE,MAAM,IAAInC,KAAK,CAAC,gCAAgC,CAAC;;EAEvD;EACA;;;;;;;;;EASO,aAAaqC,4BAA4BA,CAC9CzC,aAAqB,EACrB0C,aAAyB;IAEzB,MAAMzC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,aAAa,CAAC;IACtC,IAAI,CAAC,IAAAnB,OAAA,CAAAY,eAAe,EAACQ,IAAI,CAAC,EAAE,MAAM,IAAIG,KAAK,CAAC,iCAAiC,CAAC;IAC9E,MAAMuC,WAAW,GAAQ1C,IAAI;IAC7B,QAAQ0C,WAAW,CAACtC,IAAI;MACtB,KAAKrB,mBAAmB;QAAE;UACxB,MAAM4D,cAAc,GAAG,MAAM,IAAA7D,QAAA,CAAA8D,OAAO,EAClC,IAAAjE,UAAA,CAAAkE,UAAU,EAACH,WAAW,CAACI,IAAI,CAAC,EAC5BL,aAAa,EACbC,WAAW,CAACK,UAAU,CACvB;UACD,MAAMC,iBAAiB,GAAG/C,IAAI,CAACC,KAAK,CAAC,IAAAvB,UAAA,CAAAsE,QAAQ,EAACN,cAAc,CAAC,CAAC;UAC9D,MAAM;YAAE/B,QAAQ;YAAEM;UAAQ,CAAE,GAAG8B,iBAAiB;UAChD,IAAApE,OAAA,CAAAsE,MAAM,EAAC,OAAOtC,QAAQ,KAAK,QAAQ,CAAC;UACpC,IAAI,CAACuC,KAAK,CAACC,OAAO,CAAClC,QAAQ,CAAC,EAAE,MAAM,IAAIf,KAAK,CAAC,qCAAqC,CAAC;UACpF,IAAI,CAACe,QAAQ,CAACmC,KAAK,CAAEC,OAAO,IAAKhE,gBAAgB,CAACgE,OAAO,CAAC,CAAC,EAAE;YAC3D,MAAM,IAAInD,KAAK,CAAC,uCAAuC,CAAC;;UAE1D,MAAMoD,WAAW,GAAGrC,QAAQ,CAAC,CAAC,CAAC,CAACxB,MAAM;UACtC,IAAI,CAACwB,QAAQ,CAACmC,KAAK,CAAC,CAAC;YAAE3D;UAAM,CAAE,KAAKA,MAAM,KAAK6D,WAAW,CAAC,EAAE;YAC3D,MAAM,IAAIpD,KAAK,CAAC,0CAA0C,CAAC;;UAE7D,MAAMK,OAAO,GAAGU,QAAQ,CAACC,GAAG,CAAC,CAAC;YAAE1B;UAAM,CAAE,KAAK,IAAAf,QAAA,CAAA8E,YAAY,EAAC/D,MAAM,CAAC,CAAC;UAClE,OAAOiB,uBAAuB,CAACU,YAAY,CAACR,QAAQ,EAAE;YACpDJ,OAAO,EAAEA,OAAO;YAChBd,MAAM,EAAE6D;WACT,CAAC;;MAEJ;QACE,MAAM,IAAIpD,KAAK,CAAC,gCAAgC,CAAC;;EAEvD;EAEQ,aAAaoC,iBAAiBA,CACpCxC,aAAqB,EACrBuC,QAAgB;IAEhB,MAAMtC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,aAAa,CAAC;IACtC,IAAI,CAAC,IAAAnB,OAAA,CAAAY,eAAe,EAACQ,IAAI,CAAC,EAAE,MAAM,IAAIG,KAAK,CAAC,iCAAiC,CAAC;IAC9E,MAAMsC,aAAa,GAAG,MAAM,IAAA3D,QAAA,CAAA2E,UAAU,EAACnB,QAAQ,EAAGtC,IAAY,CAACH,GAAG,CAAC;IACnE,OAAOa,uBAAuB,CAAC8B,4BAA4B,CAACzC,aAAa,EAAE0C,aAAa,CAAC;EAC3F;EAoBA,IAAW7B,QAAQA,CAAA;IACjB,OAAO,IAAI,CAACI,MAAM,CAACoB,QAAQ,EAAE;EAC/B;EAEO,MAAMsB,WAAWA,CAAA;IACtB,MAAMC,oBAAoB,GAAG,MAAM,IAAI,CAACC,uBAAuB,EAAE;IACjE,OAAOD,oBAAoB,CAACxC,GAAG,CAAC,CAAC;MAAE0C,IAAI;MAAEC,MAAM;MAAEC;IAAO,CAAE,MAAM;MAC9DF,IAAI,EAAEA,IAAI;MACVC,MAAM,EAAEA,MAAM;MACdC,OAAO,EAAEA;KACV,CAAC,CAAC;EACL;EAEO,MAAMC,UAAUA,CAACC,aAAqB,EAAEC,OAAgB;IAC7D,MAAMhD,QAAQ,GAAG,MAAM,IAAI,CAAC0C,uBAAuB,EAAE;IACrD,MAAMN,OAAO,GAAGpC,QAAQ,CAACiD,IAAI,CAAC,CAAC;MAAEJ;IAAO,CAAE,KAAKA,OAAO,KAAKE,aAAa,CAAC;IACzE,IAAIX,OAAO,KAAKc,SAAS,EAAE;MACzB,MAAM,IAAIjE,KAAK,CAAC,WAAW8D,aAAa,sBAAsB,CAAC;;IAEjE,MAAM;MAAEI,OAAO;MAAEP;IAAM,CAAE,GAAGR,OAAO;IACnC,MAAMgB,SAAS,GAAG,IAAAzF,SAAA,CAAA0F,aAAa,EAACL,OAAO,CAAC;IACxC,MAAMM,aAAa,GAAG,IAAA9F,QAAA,CAAA+F,MAAM,EAACH,SAAS,CAAC;IACvC,MAAMI,SAAS,GAAG,MAAMhG,QAAA,CAAAiG,SAAS,CAACC,eAAe,CAACJ,aAAa,EAAEH,OAAO,CAAC;IACzE,MAAMQ,cAAc,GAAG,IAAIC,UAAU,CAAC,CAAC,GAAGJ,SAAS,CAACK,CAAC,CAAC,EAAE,CAAC,EAAE,GAAGL,SAAS,CAACM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/E,MAAMC,YAAY,GAAG,IAAAzG,OAAA,CAAA0G,wBAAwB,EAACpB,MAAM,EAAEe,cAAc,CAAC;IACrE,OAAO;MACLM,MAAM,EAAEjB,OAAO;MACfQ,SAAS,EAAEO;KACZ;EACH;EAEA;;;;;;EAMO,MAAMG,SAASA,CAAC9C,QAAgB;IACrC,MAAM+C,gBAAgB,GAAGrG,2BAA2B;IACpD,MAAMyD,aAAa,GAAG,MAAM,IAAA3D,QAAA,CAAA2E,UAAU,EAACnB,QAAQ,EAAE+C,gBAAgB,CAAC;IAClE,OAAO,IAAI,CAACC,0BAA0B,CAAC7C,aAAa,EAAE4C,gBAAgB,CAAC;EACzE;EAEA;;;;;;;;;EASO,MAAMC,0BAA0BA,CACrC7C,aAAyB,EACzB4C,gBAAkC;IAElC,MAAME,aAAa,GAAgC;MACjD3E,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBM,QAAQ,EAAE,IAAI,CAACA,QAAQ,CAACC,GAAG,CAAC,CAAC;QAAE1B,MAAM;QAAEC;MAAM,CAAE,MAAM;QACnDD,MAAM,EAAE,IAAAf,QAAA,CAAA8G,YAAY,EAAC/F,MAAM,CAAC;QAC5BC,MAAM,EAAEA;OACT,CAAC;KACH;IACD,MAAM+F,gBAAgB,GAAG,IAAA9G,UAAA,CAAA+G,MAAM,EAACzF,IAAI,CAAC0F,SAAS,CAACJ,aAAa,CAAC,CAAC;IAE9D,MAAMK,uBAAuB,GAA4B;MACvD3G,SAAS,EAAEH,QAAA,CAAA+G,mBAAmB,CAACC;KAChC;IACD,MAAMC,aAAa,GAAG,MAAM,IAAAjH,QAAA,CAAAkH,OAAO,EAACP,gBAAgB,EAAEhD,aAAa,EAAEmD,uBAAuB,CAAC;IAE7F,MAAMK,GAAG,GAAyC;MAChD7F,IAAI,EAAErB,mBAAmB;MACzBc,GAAG,EAAEwF,gBAAgB;MACrBtC,UAAU,EAAE6C,uBAAuB;MACnC9C,IAAI,EAAE,IAAAnE,UAAA,CAAAuH,QAAQ,EAACH,aAAa;KAC7B;IACD,OAAO9F,IAAI,CAAC0F,SAAS,CAACM,GAAG,CAAC;EAC5B;EAEQ,MAAME,UAAUA,CAAC1G,MAAc;IACrC,MAAM;MAAE4E;IAAO,CAAE,GAAG3F,QAAA,CAAA0H,MAAM,CAACC,UAAU,CAAC3H,QAAA,CAAA4H,WAAW,CAAC3B,SAAS,EAAE,IAAI,CAAC1D,IAAI,EAAExB,MAAM,CAAC;IAC/E,MAAM;MAAEqE;IAAM,CAAE,GAAG,MAAMpF,QAAA,CAAAiG,SAAS,CAAC4B,WAAW,CAAClC,OAAO,CAAC;IACvD,OAAO;MACLA,OAAO,EAAEA,OAAO;MAChBP,MAAM,EAAEpF,QAAA,CAAAiG,SAAS,CAAC6B,cAAc,CAAC1C,MAAM;KACxC;EACH;EAEQ,MAAMF,uBAAuBA,CAAA;IACnC,OAAO6C,OAAO,CAACC,GAAG,CAChB,IAAI,CAACxF,QAAQ,CAACC,GAAG,CAAC,OAAO;MAAE1B,MAAM;MAAEC;IAAM,CAAE,KAAI;MAC7C,MAAM;QAAE2E,OAAO;QAAEP;MAAM,CAAE,GAAG,MAAM,IAAI,CAACqC,UAAU,CAAC1G,MAAM,CAAC;MACzD,MAAMsE,OAAO,GAAGpF,UAAA,CAAAgI,MAAM,CAACxE,MAAM,CAACzC,MAAM,EAAE,IAAAlB,OAAA,CAAAoI,8BAA8B,EAAC9C,MAAM,CAAC,CAAC;MAC7E,OAAO;QACLD,IAAI,EAAE,WAAoB;QAC1BQ,OAAO,EAAEA,OAAO;QAChBP,MAAM,EAAEA,MAAM;QACdC,OAAO,EAAEA;OACV;IACH,CAAC,CAAC,CACH;EACH;;AAjOF1D,OAAA,CAAAK,uBAAA,GAAAA,uBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}