{"ast":null,"code":"\"use strict\";\n\nvar _classPrivateMethodInitSpec = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateMethodInitSpec.js\").default;\nvar _classPrivateFieldInitSpec = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _classPrivateMethodGet = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateMethodGet.js\").default;\nvar _classPrivateFieldGet = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateFieldGet.js\").default;\nvar _classPrivateFieldSet = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateFieldSet.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PollingEventSubscriber = exports.PollingTransactionSubscriber = exports.PollingOrphanSubscriber = exports.OnBlockSubscriber = exports.PollingBlockSubscriber = exports.getPollingSubscriber = void 0;\nconst index_js_1 = require(\"../utils/index.js\");\nfunction copy(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n/**\n *  Return the polling subscriber for common events.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nfunction getPollingSubscriber(provider, event) {\n  if (event === \"block\") {\n    return new PollingBlockSubscriber(provider);\n  }\n  if ((0, index_js_1.isHexString)(event, 32)) {\n    return new PollingTransactionSubscriber(provider, event);\n  }\n  (0, index_js_1.assert)(false, \"unsupported polling event\", \"UNSUPPORTED_OPERATION\", {\n    operation: \"getPollingSubscriber\",\n    info: {\n      event\n    }\n  });\n}\nexports.getPollingSubscriber = getPollingSubscriber;\n// @TODO: refactor this\n/**\n *  A **PollingBlockSubscriber** polls at a regular interval for a change\n *  in the block number.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nvar _provider = /*#__PURE__*/new WeakMap();\nvar _poller = /*#__PURE__*/new WeakMap();\nvar _interval = /*#__PURE__*/new WeakMap();\nvar _blockNumber = /*#__PURE__*/new WeakMap();\nvar _poll = /*#__PURE__*/new WeakSet();\nclass PollingBlockSubscriber {\n  /**\n   *  Create a new **PollingBlockSubscriber** attached to %%provider%%.\n   */\n  constructor(provider) {\n    _classPrivateMethodInitSpec(this, _poll);\n    _classPrivateFieldInitSpec(this, _provider, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _poller, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _interval, {\n      writable: true,\n      value: void 0\n    });\n    // The most recent block we have scanned for events. The value -2\n    // indicates we still need to fetch an initial block number\n    _classPrivateFieldInitSpec(this, _blockNumber, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _provider, provider);\n    _classPrivateFieldSet(this, _poller, null);\n    _classPrivateFieldSet(this, _interval, 4000);\n    _classPrivateFieldSet(this, _blockNumber, -2);\n  }\n  /**\n   *  The polling interval.\n   */\n  get pollingInterval() {\n    return _classPrivateFieldGet(this, _interval);\n  }\n  set pollingInterval(value) {\n    _classPrivateFieldSet(this, _interval, value);\n  }\n  start() {\n    if (_classPrivateFieldGet(this, _poller)) {\n      return;\n    }\n    _classPrivateFieldSet(this, _poller, _classPrivateFieldGet(this, _provider)._setTimeout(_classPrivateMethodGet(this, _poll, _poll2).bind(this), _classPrivateFieldGet(this, _interval)));\n    _classPrivateMethodGet(this, _poll, _poll2).call(this);\n  }\n  stop() {\n    if (!_classPrivateFieldGet(this, _poller)) {\n      return;\n    }\n    _classPrivateFieldGet(this, _provider)._clearTimeout(_classPrivateFieldGet(this, _poller));\n    _classPrivateFieldSet(this, _poller, null);\n  }\n  pause(dropWhilePaused) {\n    this.stop();\n    if (dropWhilePaused) {\n      _classPrivateFieldSet(this, _blockNumber, -2);\n    }\n  }\n  resume() {\n    this.start();\n  }\n}\nasync function _poll2() {\n  try {\n    const blockNumber = await _classPrivateFieldGet(this, _provider).getBlockNumber();\n    // Bootstrap poll to setup our initial block number\n    if (_classPrivateFieldGet(this, _blockNumber) === -2) {\n      _classPrivateFieldSet(this, _blockNumber, blockNumber);\n      return;\n    }\n    // @TODO: Put a cap on the maximum number of events per loop?\n    if (blockNumber !== _classPrivateFieldGet(this, _blockNumber)) {\n      for (let b = _classPrivateFieldGet(this, _blockNumber) + 1; b <= blockNumber; b++) {\n        // We have been stopped\n        if (_classPrivateFieldGet(this, _poller) == null) {\n          return;\n        }\n        await _classPrivateFieldGet(this, _provider).emit(\"block\", b);\n      }\n      _classPrivateFieldSet(this, _blockNumber, blockNumber);\n    }\n  } catch (error) {\n    // @TODO: Minor bump, add an \"error\" event to let subscribers\n    //        know things went awry.\n    //console.log(error);\n  }\n  // We have been stopped\n  if (_classPrivateFieldGet(this, _poller) == null) {\n    return;\n  }\n  _classPrivateFieldSet(this, _poller, _classPrivateFieldGet(this, _provider)._setTimeout(_classPrivateMethodGet(this, _poll, _poll2).bind(this), _classPrivateFieldGet(this, _interval)));\n}\nexports.PollingBlockSubscriber = PollingBlockSubscriber;\n/**\n *  An **OnBlockSubscriber** can be sub-classed, with a [[_poll]]\n *  implmentation which will be called on every new block.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nvar _provider2 = /*#__PURE__*/new WeakMap();\nvar _poll3 = /*#__PURE__*/new WeakMap();\nvar _running = /*#__PURE__*/new WeakMap();\nclass OnBlockSubscriber {\n  /**\n   *  Create a new **OnBlockSubscriber** attached to %%provider%%.\n   */\n  constructor(provider) {\n    _classPrivateFieldInitSpec(this, _provider2, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _poll3, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _running, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _provider2, provider);\n    _classPrivateFieldSet(this, _running, false);\n    _classPrivateFieldSet(this, _poll3, blockNumber => {\n      this._poll(blockNumber, _classPrivateFieldGet(this, _provider2));\n    });\n  }\n  /**\n   *  Called on every new block.\n   */\n  async _poll(blockNumber, provider) {\n    throw new Error(\"sub-classes must override this\");\n  }\n  start() {\n    if (_classPrivateFieldGet(this, _running)) {\n      return;\n    }\n    _classPrivateFieldSet(this, _running, true);\n    _classPrivateFieldGet(this, _poll3).call(this, -2);\n    _classPrivateFieldGet(this, _provider2).on(\"block\", _classPrivateFieldGet(this, _poll3));\n  }\n  stop() {\n    if (!_classPrivateFieldGet(this, _running)) {\n      return;\n    }\n    _classPrivateFieldSet(this, _running, false);\n    _classPrivateFieldGet(this, _provider2).off(\"block\", _classPrivateFieldGet(this, _poll3));\n  }\n  pause(dropWhilePaused) {\n    this.stop();\n  }\n  resume() {\n    this.start();\n  }\n}\nexports.OnBlockSubscriber = OnBlockSubscriber;\n/**\n *  @_ignore:\n *\n *  @_docloc: api/providers/abstract-provider\n */\nvar _filter = /*#__PURE__*/new WeakMap();\nclass PollingOrphanSubscriber extends OnBlockSubscriber {\n  constructor(provider, filter) {\n    super(provider);\n    _classPrivateFieldInitSpec(this, _filter, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _filter, copy(filter));\n  }\n  async _poll(blockNumber, provider) {\n    throw new Error(\"@TODO\");\n    console.log(_classPrivateFieldGet(this, _filter));\n  }\n}\nexports.PollingOrphanSubscriber = PollingOrphanSubscriber;\n/**\n *  A **PollingTransactionSubscriber** will poll for a given transaction\n *  hash for its receipt.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nvar _hash = /*#__PURE__*/new WeakMap();\nclass PollingTransactionSubscriber extends OnBlockSubscriber {\n  /**\n   *  Create a new **PollingTransactionSubscriber** attached to\n   *  %%provider%%, listening for %%hash%%.\n   */\n  constructor(provider, hash) {\n    super(provider);\n    _classPrivateFieldInitSpec(this, _hash, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _hash, hash);\n  }\n  async _poll(blockNumber, provider) {\n    const tx = await provider.getTransactionReceipt(_classPrivateFieldGet(this, _hash));\n    if (tx) {\n      provider.emit(_classPrivateFieldGet(this, _hash), tx);\n    }\n  }\n}\nexports.PollingTransactionSubscriber = PollingTransactionSubscriber;\n/**\n *  A **PollingEventSubscriber** will poll for a given filter for its logs.\n *\n *  @_docloc: api/providers/abstract-provider\n */\nvar _provider3 = /*#__PURE__*/new WeakMap();\nvar _filter2 = /*#__PURE__*/new WeakMap();\nvar _poller2 = /*#__PURE__*/new WeakMap();\nvar _running2 = /*#__PURE__*/new WeakMap();\nvar _blockNumber2 = /*#__PURE__*/new WeakMap();\nvar _poll4 = /*#__PURE__*/new WeakSet();\nclass PollingEventSubscriber {\n  /**\n   *  Create a new **PollingTransactionSubscriber** attached to\n   *  %%provider%%, listening for %%filter%%.\n   */\n  constructor(provider, _filter3) {\n    _classPrivateMethodInitSpec(this, _poll4);\n    _classPrivateFieldInitSpec(this, _provider3, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _filter2, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _poller2, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _running2, {\n      writable: true,\n      value: void 0\n    });\n    // The most recent block we have scanned for events. The value -2\n    // indicates we still need to fetch an initial block number\n    _classPrivateFieldInitSpec(this, _blockNumber2, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _provider3, provider);\n    _classPrivateFieldSet(this, _filter2, copy(_filter3));\n    _classPrivateFieldSet(this, _poller2, _classPrivateMethodGet(this, _poll4, _poll5).bind(this));\n    _classPrivateFieldSet(this, _running2, false);\n    _classPrivateFieldSet(this, _blockNumber2, -2);\n  }\n  start() {\n    if (_classPrivateFieldGet(this, _running2)) {\n      return;\n    }\n    _classPrivateFieldSet(this, _running2, true);\n    if (_classPrivateFieldGet(this, _blockNumber2) === -2) {\n      _classPrivateFieldGet(this, _provider3).getBlockNumber().then(blockNumber => {\n        _classPrivateFieldSet(this, _blockNumber2, blockNumber);\n      });\n    }\n    _classPrivateFieldGet(this, _provider3).on(\"block\", _classPrivateFieldGet(this, _poller2));\n  }\n  stop() {\n    if (!_classPrivateFieldGet(this, _running2)) {\n      return;\n    }\n    _classPrivateFieldSet(this, _running2, false);\n    _classPrivateFieldGet(this, _provider3).off(\"block\", _classPrivateFieldGet(this, _poller2));\n  }\n  pause(dropWhilePaused) {\n    this.stop();\n    if (dropWhilePaused) {\n      _classPrivateFieldSet(this, _blockNumber2, -2);\n    }\n  }\n  resume() {\n    this.start();\n  }\n}\nasync function _poll5(blockNumber) {\n  // The initial block hasn't been determined yet\n  if (_classPrivateFieldGet(this, _blockNumber2) === -2) {\n    return;\n  }\n  const filter = copy(_classPrivateFieldGet(this, _filter2));\n  filter.fromBlock = _classPrivateFieldGet(this, _blockNumber2) + 1;\n  filter.toBlock = blockNumber;\n  const logs = await _classPrivateFieldGet(this, _provider3).getLogs(filter);\n  // No logs could just mean the node has not indexed them yet,\n  // so we keep a sliding window of 60 blocks to keep scanning\n  if (logs.length === 0) {\n    if (_classPrivateFieldGet(this, _blockNumber2) < blockNumber - 60) {\n      _classPrivateFieldSet(this, _blockNumber2, blockNumber - 60);\n    }\n    return;\n  }\n  for (const log of logs) {\n    _classPrivateFieldGet(this, _provider3).emit(_classPrivateFieldGet(this, _filter2), log);\n    // Only advance the block number when logs were found to\n    // account for networks (like BNB and Polygon) which may\n    // sacrifice event consistency for block event speed\n    _classPrivateFieldSet(this, _blockNumber2, log.blockNumber);\n  }\n}\nexports.PollingEventSubscriber = PollingEventSubscriber;","map":{"version":3,"names":["index_js_1","require","copy","obj","JSON","parse","stringify","getPollingSubscriber","provider","event","PollingBlockSubscriber","isHexString","PollingTransactionSubscriber","assert","operation","info","exports","_provider","WeakMap","_poller","_interval","_blockNumber","_poll","WeakSet","constructor","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","writable","value","_classPrivateFieldSet","pollingInterval","_classPrivateFieldGet","start","_setTimeout","_classPrivateMethodGet","_poll2","bind","call","stop","_clearTimeout","pause","dropWhilePaused","resume","blockNumber","getBlockNumber","b","emit","error","_provider2","_poll3","_running","OnBlockSubscriber","Error","on","off","_filter","PollingOrphanSubscriber","filter","console","log","_hash","hash","tx","getTransactionReceipt","_provider3","_filter2","_poller2","_running2","_blockNumber2","_poll4","PollingEventSubscriber","_poll5","then","fromBlock","toBlock","logs","getLogs","length"],"sources":["../../src.ts/providers/subscriber-polling.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}