{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/es.array.push.js\";\n/**\n * Base-N/Base-X encoding/decoding functions.\n *\n * Original implementation from base-x:\n * https://github.com/cryptocoinjs/base-x\n *\n * Which is MIT licensed:\n *\n * The MIT License (MIT)\n *\n * Copyright base-x contributors (c) 2016\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// baseN alphabet indexes\nconst _reverseAlphabets = {};\n\n/**\n * BaseN-encodes a Uint8Array using the given alphabet.\n *\n * @param {Uint8Array} input - The bytes to encode in a Uint8Array.\n * @param {string} alphabet - The alphabet to use for encoding.\n * @param {number} maxline - The maximum number of encoded characters per line\n *          to use, defaults to none.\n *\n * @returns {string} The baseN-encoded output string.\n */\nexport function encode(input, alphabet, maxline) {\n  if (!(input instanceof Uint8Array)) {\n    throw new TypeError('\"input\" must be a Uint8Array.');\n  }\n  if (typeof alphabet !== 'string') {\n    throw new TypeError('\"alphabet\" must be a string.');\n  }\n  if (maxline !== undefined && typeof maxline !== 'number') {\n    throw new TypeError('\"maxline\" must be a number.');\n  }\n  if (input.length === 0) {\n    return '';\n  }\n  let output = '';\n  let i = 0;\n  const base = alphabet.length;\n  const first = alphabet.charAt(0);\n  const digits = [0];\n  for (i = 0; i < input.length; ++i) {\n    let carry = input[i];\n    for (let j = 0; j < digits.length; ++j) {\n      carry += digits[j] << 8;\n      digits[j] = carry % base;\n      carry = carry / base | 0;\n    }\n    while (carry > 0) {\n      digits.push(carry % base);\n      carry = carry / base | 0;\n    }\n  }\n\n  // deal with leading zeros\n  for (i = 0; input[i] === 0 && i < input.length - 1; ++i) {\n    output += first;\n  }\n  // convert digits to a string\n  for (i = digits.length - 1; i >= 0; --i) {\n    output += alphabet[digits[i]];\n  }\n  if (maxline) {\n    const regex = new RegExp('.{1,' + maxline + '}', 'g');\n    output = output.match(regex).join('\\r\\n');\n  }\n  return output;\n}\n\n/**\n * Decodes a baseN-encoded (using the given alphabet) string to a\n * Uint8Array.\n *\n * @param {string} input - The baseN-encoded input string.\n * @param {string} alphabet - The alphabet to use for decoding.\n *\n * @returns {Uint8Array} The decoded bytes in a Uint8Array.\n */\nexport function decode(input, alphabet) {\n  if (typeof input !== 'string') {\n    throw new TypeError('\"input\" must be a string.');\n  }\n  if (typeof alphabet !== 'string') {\n    throw new TypeError('\"alphabet\" must be a string.');\n  }\n  if (input.length === 0) {\n    return new Uint8Array();\n  }\n  let table = _reverseAlphabets[alphabet];\n  if (!table) {\n    // compute reverse alphabet\n    table = _reverseAlphabets[alphabet] = [];\n    for (let i = 0; i < alphabet.length; ++i) {\n      table[alphabet.charCodeAt(i)] = i;\n    }\n  }\n\n  // remove whitespace characters\n  input = input.replace(/\\s/g, '');\n  const base = alphabet.length;\n  const first = alphabet.charAt(0);\n  const bytes = [0];\n  for (let i = 0; i < input.length; i++) {\n    const value = table[input.charCodeAt(i)];\n    if (value === undefined) {\n      return;\n    }\n    let carry = value;\n    for (let j = 0; j < bytes.length; ++j) {\n      carry += bytes[j] * base;\n      bytes[j] = carry & 0xff;\n      carry >>= 8;\n    }\n    while (carry > 0) {\n      bytes.push(carry & 0xff);\n      carry >>= 8;\n    }\n  }\n\n  // deal with leading zeros\n  for (let k = 0; input[k] === first && k < input.length - 1; ++k) {\n    bytes.push(0);\n  }\n  return new Uint8Array(bytes.reverse());\n}","map":{"version":3,"names":["_reverseAlphabets","encode","input","alphabet","maxline","Uint8Array","TypeError","undefined","length","output","i","base","first","charAt","digits","carry","j","push","regex","RegExp","match","join","decode","table","charCodeAt","replace","bytes","value","k","reverse"],"sources":["/home/pratap/domain-linkege/node_modules/base58-universal/lib/baseN.js"],"sourcesContent":["/**\n * Base-N/Base-X encoding/decoding functions.\n *\n * Original implementation from base-x:\n * https://github.com/cryptocoinjs/base-x\n *\n * Which is MIT licensed:\n *\n * The MIT License (MIT)\n *\n * Copyright base-x contributors (c) 2016\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n// baseN alphabet indexes\nconst _reverseAlphabets = {};\n\n/**\n * BaseN-encodes a Uint8Array using the given alphabet.\n *\n * @param {Uint8Array} input - The bytes to encode in a Uint8Array.\n * @param {string} alphabet - The alphabet to use for encoding.\n * @param {number} maxline - The maximum number of encoded characters per line\n *          to use, defaults to none.\n *\n * @returns {string} The baseN-encoded output string.\n */\nexport function encode(input, alphabet, maxline) {\n  if(!(input instanceof Uint8Array)) {\n    throw new TypeError('\"input\" must be a Uint8Array.');\n  }\n  if(typeof alphabet !== 'string') {\n    throw new TypeError('\"alphabet\" must be a string.');\n  }\n  if(maxline !== undefined && typeof maxline !== 'number') {\n    throw new TypeError('\"maxline\" must be a number.');\n  }\n  if(input.length === 0) {\n    return '';\n  }\n\n  let output = '';\n\n  let i = 0;\n  const base = alphabet.length;\n  const first = alphabet.charAt(0);\n  const digits = [0];\n  for(i = 0; i < input.length; ++i) {\n    let carry = input[i];\n    for(let j = 0; j < digits.length; ++j) {\n      carry += digits[j] << 8;\n      digits[j] = carry % base;\n      carry = (carry / base) | 0;\n    }\n\n    while(carry > 0) {\n      digits.push(carry % base);\n      carry = (carry / base) | 0;\n    }\n  }\n\n  // deal with leading zeros\n  for(i = 0; input[i] === 0 && i < input.length - 1; ++i) {\n    output += first;\n  }\n  // convert digits to a string\n  for(i = digits.length - 1; i >= 0; --i) {\n    output += alphabet[digits[i]];\n  }\n\n  if(maxline) {\n    const regex = new RegExp('.{1,' + maxline + '}', 'g');\n    output = output.match(regex).join('\\r\\n');\n  }\n\n  return output;\n}\n\n/**\n * Decodes a baseN-encoded (using the given alphabet) string to a\n * Uint8Array.\n *\n * @param {string} input - The baseN-encoded input string.\n * @param {string} alphabet - The alphabet to use for decoding.\n *\n * @returns {Uint8Array} The decoded bytes in a Uint8Array.\n */\nexport function decode(input, alphabet) {\n  if(typeof input !== 'string') {\n    throw new TypeError('\"input\" must be a string.');\n  }\n  if(typeof alphabet !== 'string') {\n    throw new TypeError('\"alphabet\" must be a string.');\n  }\n  if(input.length === 0) {\n    return new Uint8Array();\n  }\n\n  let table = _reverseAlphabets[alphabet];\n  if(!table) {\n    // compute reverse alphabet\n    table = _reverseAlphabets[alphabet] = [];\n    for(let i = 0; i < alphabet.length; ++i) {\n      table[alphabet.charCodeAt(i)] = i;\n    }\n  }\n\n  // remove whitespace characters\n  input = input.replace(/\\s/g, '');\n\n  const base = alphabet.length;\n  const first = alphabet.charAt(0);\n  const bytes = [0];\n  for(let i = 0; i < input.length; i++) {\n    const value = table[input.charCodeAt(i)];\n    if(value === undefined) {\n      return;\n    }\n\n    let carry = value;\n    for(let j = 0; j < bytes.length; ++j) {\n      carry += bytes[j] * base;\n      bytes[j] = carry & 0xff;\n      carry >>= 8;\n    }\n\n    while(carry > 0) {\n      bytes.push(carry & 0xff);\n      carry >>= 8;\n    }\n  }\n\n  // deal with leading zeros\n  for(let k = 0; input[k] === first && k < input.length - 1; ++k) {\n    bytes.push(0);\n  }\n\n  return new Uint8Array(bytes.reverse());\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}