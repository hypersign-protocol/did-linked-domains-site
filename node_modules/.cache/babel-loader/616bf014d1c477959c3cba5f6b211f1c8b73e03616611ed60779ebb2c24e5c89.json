{"ast":null,"code":"/*\n * Copyright (c) 2017-2021 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nrequire(\"core-js/modules/es.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/es.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/es.typed-array.with.js\");\nconst api = {};\nmodule.exports = api;\n\n/**\n * Converts the given date into W3C datetime format (eg: 2011-03-09T21:55:41Z).\n *\n * @param date the date to convert.\n *\n * @return the date in W3C datetime format.\n */\napi.w3cDate = date => {\n  if (date === undefined || date === null) {\n    date = new Date();\n  } else if (typeof date === 'number' || typeof date === 'string') {\n    date = new Date(date);\n  }\n  const str = date.toISOString();\n  return str.substr(0, str.length - 5) + 'Z';\n};\n\n/**\n * Concatenates two Uint8Arrays.\n *\n * @param b1 {Uint8Array}.\n * @param b2 {Uint8Array}.\n *\n * @return {Uint8Array} the result.\n */\napi.concat = (b1, b2) => {\n  const rval = new Uint8Array(b1.length + b2.length);\n  rval.set(b1, 0);\n  rval.set(b2, b1.length);\n  return rval;\n};","map":{"version":3,"names":["require","api","module","exports","w3cDate","date","undefined","Date","str","toISOString","substr","length","concat","b1","b2","rval","Uint8Array","set"],"sources":["/home/pratap/did-linked-domain/node_modules/jsonld-signatures/lib/util.js"],"sourcesContent":["/*\n * Copyright (c) 2017-2021 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst api = {};\nmodule.exports = api;\n\n/**\n * Converts the given date into W3C datetime format (eg: 2011-03-09T21:55:41Z).\n *\n * @param date the date to convert.\n *\n * @return the date in W3C datetime format.\n */\napi.w3cDate = date => {\n  if(date === undefined || date === null) {\n    date = new Date();\n  } else if(typeof date === 'number' || typeof date === 'string') {\n    date = new Date(date);\n  }\n  const str = date.toISOString();\n  return str.substr(0, str.length - 5) + 'Z';\n};\n\n/**\n * Concatenates two Uint8Arrays.\n *\n * @param b1 {Uint8Array}.\n * @param b2 {Uint8Array}.\n *\n * @return {Uint8Array} the result.\n */\napi.concat = (b1, b2) => {\n  const rval = new Uint8Array(b1.length + b2.length);\n  rval.set(b1, 0);\n  rval.set(b2, b1.length);\n  return rval;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,YAAY;;AAACA,OAAA;AAAAA,OAAA;AAAAA,OAAA;AAEb,MAAMC,GAAG,GAAG,CAAC,CAAC;AACdC,MAAM,CAACC,OAAO,GAAGF,GAAG;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,GAAG,CAACG,OAAO,GAAGC,IAAI,IAAI;EACpB,IAAGA,IAAI,KAAKC,SAAS,IAAID,IAAI,KAAK,IAAI,EAAE;IACtCA,IAAI,GAAG,IAAIE,IAAI,CAAC,CAAC;EACnB,CAAC,MAAM,IAAG,OAAOF,IAAI,KAAK,QAAQ,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC9DA,IAAI,GAAG,IAAIE,IAAI,CAACF,IAAI,CAAC;EACvB;EACA,MAAMG,GAAG,GAAGH,IAAI,CAACI,WAAW,CAAC,CAAC;EAC9B,OAAOD,GAAG,CAACE,MAAM,CAAC,CAAC,EAAEF,GAAG,CAACG,MAAM,GAAG,CAAC,CAAC,GAAG,GAAG;AAC5C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAV,GAAG,CAACW,MAAM,GAAG,CAACC,EAAE,EAAEC,EAAE,KAAK;EACvB,MAAMC,IAAI,GAAG,IAAIC,UAAU,CAACH,EAAE,CAACF,MAAM,GAAGG,EAAE,CAACH,MAAM,CAAC;EAClDI,IAAI,CAACE,GAAG,CAACJ,EAAE,EAAE,CAAC,CAAC;EACfE,IAAI,CAACE,GAAG,CAACH,EAAE,EAAED,EAAE,CAACF,MAAM,CAAC;EACvB,OAAOI,IAAI;AACb,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}