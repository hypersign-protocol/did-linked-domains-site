{"ast":null,"code":"\"use strict\";\n\nvar _classPrivateMethodInitSpec = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateMethodInitSpec.js\").default;\nvar _classPrivateMethodGet = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateMethodGet.js\").default;\nvar _classPrivateFieldInitSpec = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _classPrivateFieldGet = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateFieldGet.js\").default;\nvar _classPrivateFieldSet = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateFieldSet.js\").default;\nlet _Symbol$iterator, _Symbol$iterator2;\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/es.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/es.typed-array.with.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FetchResponse = exports.FetchRequest = exports.FetchCancelSignal = void 0;\n/**\n *  Fetching content from the web is environment-specific, so Ethers\n *  provides an abstraction the each environment can implement to provide\n *  this service.\n *\n *  On [Node.js](link-node), the ``http`` and ``https`` libs are used to\n *  create a request object, register event listeners and process data\n *  and populate the [[FetchResponse]].\n *\n *  In a browser, the [DOM fetch](link-js-fetch) is used, and the resulting\n *  ``Promise`` is waited on to retreive the payload.\n *\n *  The [[FetchRequest]] is responsible for handling many common situations,\n *  such as redirects, server throttling, authentcation, etc.\n *\n *  It also handles common gateways, such as IPFS and data URIs.\n *\n *  @_section api/utils/fetching:Fetching Web Content  [about-fetch]\n */\nconst base64_js_1 = require(\"./base64.js\");\nconst data_js_1 = require(\"./data.js\");\nconst errors_js_1 = require(\"./errors.js\");\nconst properties_js_1 = require(\"./properties.js\");\nconst utf8_js_1 = require(\"./utf8.js\");\nconst geturl_js_1 = require(\"./geturl.js\");\nconst MAX_ATTEMPTS = 12;\nconst SLOT_INTERVAL = 250;\n// The global FetchGetUrlFunc implementation.\nlet getUrlFunc = geturl_js_1.getUrl;\nconst reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\nconst reIpfs = new RegExp(\"^ipfs:/\\/(ipfs/)?(.*)$\", \"i\");\n// If locked, new Gateways cannot be added\nlet locked = false;\n// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs\nasync function dataGatewayFunc(url, signal) {\n  try {\n    const match = url.match(reData);\n    if (!match) {\n      throw new Error(\"invalid data\");\n    }\n    return new FetchResponse(200, \"OK\", {\n      \"content-type\": match[1] || \"text/plain\"\n    }, match[2] ? (0, base64_js_1.decodeBase64)(match[3]) : unpercent(match[3]));\n  } catch (error) {\n    return new FetchResponse(599, \"BAD REQUEST (invalid data: URI)\", {}, null, new FetchRequest(url));\n  }\n}\n/**\n *  Returns a [[FetchGatewayFunc]] for fetching content from a standard\n *  IPFS gateway hosted at %%baseUrl%%.\n */\nfunction getIpfsGatewayFunc(baseUrl) {\n  async function gatewayIpfs(url, signal) {\n    try {\n      const match = url.match(reIpfs);\n      if (!match) {\n        throw new Error(\"invalid link\");\n      }\n      return new FetchRequest(`${baseUrl}${match[2]}`);\n    } catch (error) {\n      return new FetchResponse(599, \"BAD REQUEST (invalid IPFS URI)\", {}, null, new FetchRequest(url));\n    }\n  }\n  return gatewayIpfs;\n}\nconst Gateways = {\n  \"data\": dataGatewayFunc,\n  \"ipfs\": getIpfsGatewayFunc(\"https:/\\/gateway.ipfs.io/ipfs/\")\n};\nconst fetchSignals = new WeakMap();\n/**\n *  @_ignore\n */\nvar _listeners = /*#__PURE__*/new WeakMap();\nvar _cancelled = /*#__PURE__*/new WeakMap();\nclass FetchCancelSignal {\n  constructor(request) {\n    _classPrivateFieldInitSpec(this, _listeners, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _cancelled, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _listeners, []);\n    _classPrivateFieldSet(this, _cancelled, false);\n    fetchSignals.set(request, () => {\n      if (_classPrivateFieldGet(this, _cancelled)) {\n        return;\n      }\n      _classPrivateFieldSet(this, _cancelled, true);\n      for (const listener of _classPrivateFieldGet(this, _listeners)) {\n        setTimeout(() => {\n          listener();\n        }, 0);\n      }\n      _classPrivateFieldSet(this, _listeners, []);\n    });\n  }\n  addListener(listener) {\n    (0, errors_js_1.assert)(!_classPrivateFieldGet(this, _cancelled), \"singal already cancelled\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"fetchCancelSignal.addCancelListener\"\n    });\n    _classPrivateFieldGet(this, _listeners).push(listener);\n  }\n  get cancelled() {\n    return _classPrivateFieldGet(this, _cancelled);\n  }\n  checkSignal() {\n    (0, errors_js_1.assert)(!this.cancelled, \"cancelled\", \"CANCELLED\", {});\n  }\n}\nexports.FetchCancelSignal = FetchCancelSignal;\n// Check the signal, throwing if it is cancelled\nfunction checkSignal(signal) {\n  if (signal == null) {\n    throw new Error(\"missing signal; should not happen\");\n  }\n  signal.checkSignal();\n  return signal;\n}\n/**\n *  Represents a request for a resource using a URI.\n *\n *  By default, the supported schemes are ``HTTP``, ``HTTPS``, ``data:``,\n *  and ``IPFS:``.\n *\n *  Additional schemes can be added globally using [[registerGateway]].\n *\n *  @example:\n *    req = new FetchRequest(\"https://www.ricmoo.com\")\n *    resp = await req.send()\n *    resp.body.length\n *    //_result:\n */\nvar _allowInsecure = /*#__PURE__*/new WeakMap();\nvar _gzip = /*#__PURE__*/new WeakMap();\nvar _headers = /*#__PURE__*/new WeakMap();\nvar _method = /*#__PURE__*/new WeakMap();\nvar _timeout = /*#__PURE__*/new WeakMap();\nvar _url = /*#__PURE__*/new WeakMap();\nvar _body = /*#__PURE__*/new WeakMap();\nvar _bodyType = /*#__PURE__*/new WeakMap();\nvar _creds = /*#__PURE__*/new WeakMap();\nvar _preflight = /*#__PURE__*/new WeakMap();\nvar _process = /*#__PURE__*/new WeakMap();\nvar _retry = /*#__PURE__*/new WeakMap();\nvar _signal = /*#__PURE__*/new WeakMap();\nvar _throttle = /*#__PURE__*/new WeakMap();\nvar _send = /*#__PURE__*/new WeakSet();\n_Symbol$iterator = Symbol.iterator;\nclass FetchRequest {\n  /**\n   *  The fetch URI to requrest.\n   */\n  get url() {\n    return _classPrivateFieldGet(this, _url);\n  }\n  set url(url) {\n    _classPrivateFieldSet(this, _url, String(url));\n  }\n  /**\n   *  The fetch body, if any, to send as the request body. //(default: null)//\n   *\n   *  When setting a body, the intrinsic ``Content-Type`` is automatically\n   *  set and will be used if **not overridden** by setting a custom\n   *  header.\n   *\n   *  If %%body%% is null, the body is cleared (along with the\n   *  intrinsic ``Content-Type``) and the .\n   *\n   *  If %%body%% is a string, the intrincis ``Content-Type`` is set to\n   *  ``text/plain``.\n   *\n   *  If %%body%% is a Uint8Array, the intrincis ``Content-Type`` is set to\n   *  ``application/octet-stream``.\n   *\n   *  If %%body%% is any other object, the intrincis ``Content-Type`` is\n   *  set to ``application/json``.\n   */\n  get body() {\n    if (_classPrivateFieldGet(this, _body) == null) {\n      return null;\n    }\n    return new Uint8Array(_classPrivateFieldGet(this, _body));\n  }\n  set body(body) {\n    if (body == null) {\n      _classPrivateFieldSet(this, _body, undefined);\n      _classPrivateFieldSet(this, _bodyType, undefined);\n    } else if (typeof body === \"string\") {\n      _classPrivateFieldSet(this, _body, (0, utf8_js_1.toUtf8Bytes)(body));\n      _classPrivateFieldSet(this, _bodyType, \"text/plain\");\n    } else if (body instanceof Uint8Array) {\n      _classPrivateFieldSet(this, _body, body);\n      _classPrivateFieldSet(this, _bodyType, \"application/octet-stream\");\n    } else if (typeof body === \"object\") {\n      _classPrivateFieldSet(this, _body, (0, utf8_js_1.toUtf8Bytes)(JSON.stringify(body)));\n      _classPrivateFieldSet(this, _bodyType, \"application/json\");\n    } else {\n      throw new Error(\"invalid body\");\n    }\n  }\n  /**\n   *  Returns true if the request has a body.\n   */\n  hasBody() {\n    return _classPrivateFieldGet(this, _body) != null;\n  }\n  /**\n   *  The HTTP method to use when requesting the URI. If no method\n   *  has been explicitly set, then ``GET`` is used if the body is\n   *  null and ``POST`` otherwise.\n   */\n  get method() {\n    if (_classPrivateFieldGet(this, _method)) {\n      return _classPrivateFieldGet(this, _method);\n    }\n    if (this.hasBody()) {\n      return \"POST\";\n    }\n    return \"GET\";\n  }\n  set method(method) {\n    if (method == null) {\n      method = \"\";\n    }\n    _classPrivateFieldSet(this, _method, String(method).toUpperCase());\n  }\n  /**\n   *  The headers that will be used when requesting the URI. All\n   *  keys are lower-case.\n   *\n   *  This object is a copy, so any chnages will **NOT** be reflected\n   *  in the ``FetchRequest``.\n   *\n   *  To set a header entry, use the ``setHeader`` method.\n   */\n  get headers() {\n    const headers = Object.assign({}, _classPrivateFieldGet(this, _headers));\n    if (_classPrivateFieldGet(this, _creds)) {\n      headers[\"authorization\"] = `Basic ${(0, base64_js_1.encodeBase64)((0, utf8_js_1.toUtf8Bytes)(_classPrivateFieldGet(this, _creds)))}`;\n    }\n    ;\n    if (this.allowGzip) {\n      headers[\"accept-encoding\"] = \"gzip\";\n    }\n    if (headers[\"content-type\"] == null && _classPrivateFieldGet(this, _bodyType)) {\n      headers[\"content-type\"] = _classPrivateFieldGet(this, _bodyType);\n    }\n    if (this.body) {\n      headers[\"content-length\"] = String(this.body.length);\n    }\n    return headers;\n  }\n  /**\n   *  Get the header for %%key%%, ignoring case.\n   */\n  getHeader(key) {\n    return this.headers[key.toLowerCase()];\n  }\n  /**\n   *  Set the header for %%key%% to %%value%%. All values are coerced\n   *  to a string.\n   */\n  setHeader(key, value) {\n    _classPrivateFieldGet(this, _headers)[String(key).toLowerCase()] = String(value);\n  }\n  /**\n   *  Clear all headers, resetting all intrinsic headers.\n   */\n  clearHeaders() {\n    _classPrivateFieldSet(this, _headers, {});\n  }\n  [_Symbol$iterator]() {\n    const headers = this.headers;\n    const keys = Object.keys(headers);\n    let index = 0;\n    return {\n      next: () => {\n        if (index < keys.length) {\n          const key = keys[index++];\n          return {\n            value: [key, headers[key]],\n            done: false\n          };\n        }\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n    };\n  }\n  /**\n   *  The value that will be sent for the ``Authorization`` header.\n   *\n   *  To set the credentials, use the ``setCredentials`` method.\n   */\n  get credentials() {\n    return _classPrivateFieldGet(this, _creds) || null;\n  }\n  /**\n   *  Sets an ``Authorization`` for %%username%% with %%password%%.\n   */\n  setCredentials(username, password) {\n    (0, errors_js_1.assertArgument)(!username.match(/:/), \"invalid basic authentication username\", \"username\", \"[REDACTED]\");\n    _classPrivateFieldSet(this, _creds, `${username}:${password}`);\n  }\n  /**\n   *  Enable and request gzip-encoded responses. The response will\n   *  automatically be decompressed. //(default: true)//\n   */\n  get allowGzip() {\n    return _classPrivateFieldGet(this, _gzip);\n  }\n  set allowGzip(value) {\n    _classPrivateFieldSet(this, _gzip, !!value);\n  }\n  /**\n   *  Allow ``Authentication`` credentials to be sent over insecure\n   *  channels. //(default: false)//\n   */\n  get allowInsecureAuthentication() {\n    return !!_classPrivateFieldGet(this, _allowInsecure);\n  }\n  set allowInsecureAuthentication(value) {\n    _classPrivateFieldSet(this, _allowInsecure, !!value);\n  }\n  /**\n   *  The timeout (in milliseconds) to wait for a complere response.\n   *  //(default: 5 minutes)//\n   */\n  get timeout() {\n    return _classPrivateFieldGet(this, _timeout);\n  }\n  set timeout(timeout) {\n    (0, errors_js_1.assertArgument)(timeout >= 0, \"timeout must be non-zero\", \"timeout\", timeout);\n    _classPrivateFieldSet(this, _timeout, timeout);\n  }\n  /**\n   *  This function is called prior to each request, for example\n   *  during a redirection or retry in case of server throttling.\n   *\n   *  This offers an opportunity to populate headers or update\n   *  content before sending a request.\n   */\n  get preflightFunc() {\n    return _classPrivateFieldGet(this, _preflight) || null;\n  }\n  set preflightFunc(preflight) {\n    _classPrivateFieldSet(this, _preflight, preflight);\n  }\n  /**\n   *  This function is called after each response, offering an\n   *  opportunity to provide client-level throttling or updating\n   *  response data.\n   *\n   *  Any error thrown in this causes the ``send()`` to throw.\n   *\n   *  To schedule a retry attempt (assuming the maximum retry limit\n   *  has not been reached), use [[response.throwThrottleError]].\n   */\n  get processFunc() {\n    return _classPrivateFieldGet(this, _process) || null;\n  }\n  set processFunc(process) {\n    _classPrivateFieldSet(this, _process, process);\n  }\n  /**\n   *  This function is called on each retry attempt.\n   */\n  get retryFunc() {\n    return _classPrivateFieldGet(this, _retry) || null;\n  }\n  set retryFunc(retry) {\n    _classPrivateFieldSet(this, _retry, retry);\n  }\n  /**\n   *  Create a new FetchRequest instance with default values.\n   *\n   *  Once created, each property may be set before issuing a\n   *  ``.send()`` to make the request.\n   */\n  constructor(url) {\n    _classPrivateMethodInitSpec(this, _send);\n    _classPrivateFieldInitSpec(this, _allowInsecure, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _gzip, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _headers, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _method, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _timeout, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _url, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _body, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _bodyType, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _creds, {\n      writable: true,\n      value: void 0\n    });\n    // Hooks\n    _classPrivateFieldInitSpec(this, _preflight, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _process, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _retry, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _signal, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _throttle, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _url, String(url));\n    _classPrivateFieldSet(this, _allowInsecure, false);\n    _classPrivateFieldSet(this, _gzip, true);\n    _classPrivateFieldSet(this, _headers, {});\n    _classPrivateFieldSet(this, _method, \"\");\n    _classPrivateFieldSet(this, _timeout, 300000);\n    _classPrivateFieldSet(this, _throttle, {\n      slotInterval: SLOT_INTERVAL,\n      maxAttempts: MAX_ATTEMPTS\n    });\n  }\n  toString() {\n    return `<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${_classPrivateFieldGet(this, _body) ? (0, data_js_1.hexlify)(_classPrivateFieldGet(this, _body)) : \"null\"}>`;\n  }\n  /**\n   *  Update the throttle parameters used to determine maximum\n   *  attempts and exponential-backoff properties.\n   */\n  setThrottleParams(params) {\n    if (params.slotInterval != null) {\n      _classPrivateFieldGet(this, _throttle).slotInterval = params.slotInterval;\n    }\n    if (params.maxAttempts != null) {\n      _classPrivateFieldGet(this, _throttle).maxAttempts = params.maxAttempts;\n    }\n  }\n  /**\n   *  Resolves to the response by sending the request.\n   */\n  send() {\n    (0, errors_js_1.assert)(_classPrivateFieldGet(this, _signal) == null, \"request already sent\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"fetchRequest.send\"\n    });\n    _classPrivateFieldSet(this, _signal, new FetchCancelSignal(this));\n    return _classPrivateMethodGet(this, _send, _send2).call(this, 0, getTime() + this.timeout, 0, this, new FetchResponse(0, \"\", {}, null, this));\n  }\n  /**\n   *  Cancels the inflight response, causing a ``CANCELLED``\n   *  error to be rejected from the [[send]].\n   */\n  cancel() {\n    (0, errors_js_1.assert)(_classPrivateFieldGet(this, _signal) != null, \"request has not been sent\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"fetchRequest.cancel\"\n    });\n    const signal = fetchSignals.get(this);\n    if (!signal) {\n      throw new Error(\"missing signal; should not happen\");\n    }\n    signal();\n  }\n  /**\n   *  Returns a new [[FetchRequest]] that represents the redirection\n   *  to %%location%%.\n   */\n  redirect(location) {\n    // Redirection; for now we only support absolute locataions\n    const current = this.url.split(\":\")[0].toLowerCase();\n    const target = location.split(\":\")[0].toLowerCase();\n    // Don't allow redirecting:\n    // - non-GET requests\n    // - downgrading the security (e.g. https => http)\n    // - to non-HTTP (or non-HTTPS) protocols [this could be relaxed?]\n    (0, errors_js_1.assert)(this.method === \"GET\" && (current !== \"https\" || target !== \"http\") && location.match(/^https?:/), `unsupported redirect`, \"UNSUPPORTED_OPERATION\", {\n      operation: `redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(location)})`\n    });\n    // Create a copy of this request, with a new URL\n    const req = new FetchRequest(location);\n    req.method = \"GET\";\n    req.allowGzip = this.allowGzip;\n    req.timeout = this.timeout;\n    _classPrivateFieldSet(req, _headers, Object.assign({}, _classPrivateFieldGet(this, _headers)));\n    if (_classPrivateFieldGet(this, _body)) {\n      _classPrivateFieldSet(req, _body, new Uint8Array(_classPrivateFieldGet(this, _body)));\n    }\n    _classPrivateFieldSet(req, _bodyType, _classPrivateFieldGet(this, _bodyType));\n    // Do not forward credentials unless on the same domain; only absolute\n    //req.allowInsecure = false;\n    // paths are currently supported; may want a way to specify to forward?\n    //setStore(req.#props, \"creds\", getStore(this.#pros, \"creds\"));\n    return req;\n  }\n  /**\n   *  Create a new copy of this request.\n   */\n  clone() {\n    const clone = new FetchRequest(this.url);\n    // Preserve \"default method\" (i.e. null)\n    _classPrivateFieldSet(clone, _method, _classPrivateFieldGet(this, _method));\n    // Preserve \"default body\" with type, copying the Uint8Array is present\n    if (_classPrivateFieldGet(this, _body)) {\n      _classPrivateFieldSet(clone, _body, _classPrivateFieldGet(this, _body));\n    }\n    _classPrivateFieldSet(clone, _bodyType, _classPrivateFieldGet(this, _bodyType));\n    // Preserve \"default headers\"\n    _classPrivateFieldSet(clone, _headers, Object.assign({}, _classPrivateFieldGet(this, _headers)));\n    // Credentials is readonly, so we copy internally\n    _classPrivateFieldSet(clone, _creds, _classPrivateFieldGet(this, _creds));\n    if (this.allowGzip) {\n      clone.allowGzip = true;\n    }\n    clone.timeout = this.timeout;\n    if (this.allowInsecureAuthentication) {\n      clone.allowInsecureAuthentication = true;\n    }\n    _classPrivateFieldSet(clone, _preflight, _classPrivateFieldGet(this, _preflight));\n    _classPrivateFieldSet(clone, _process, _classPrivateFieldGet(this, _process));\n    _classPrivateFieldSet(clone, _retry, _classPrivateFieldGet(this, _retry));\n    return clone;\n  }\n  /**\n   *  Locks all static configuration for gateways and FetchGetUrlFunc\n   *  registration.\n   */\n  static lockConfig() {\n    locked = true;\n  }\n  /**\n   *  Get the current Gateway function for %%scheme%%.\n   */\n  static getGateway(scheme) {\n    return Gateways[scheme.toLowerCase()] || null;\n  }\n  /**\n   *  Use the %%func%% when fetching URIs using %%scheme%%.\n   *\n   *  This method affects all requests globally.\n   *\n   *  If [[lockConfig]] has been called, no change is made and this\n   *  throws.\n   */\n  static registerGateway(scheme, func) {\n    scheme = scheme.toLowerCase();\n    if (scheme === \"http\" || scheme === \"https\") {\n      throw new Error(`cannot intercept ${scheme}; use registerGetUrl`);\n    }\n    if (locked) {\n      throw new Error(\"gateways locked\");\n    }\n    Gateways[scheme] = func;\n  }\n  /**\n   *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.\n   *\n   *  This method affects all requests globally.\n   *\n   *  If [[lockConfig]] has been called, no change is made and this\n   *  throws.\n   */\n  static registerGetUrl(getUrl) {\n    if (locked) {\n      throw new Error(\"gateways locked\");\n    }\n    getUrlFunc = getUrl;\n  }\n  /**\n   *  Creates a function that can \"fetch\" data URIs.\n   *\n   *  Note that this is automatically done internally to support\n   *  data URIs, so it is not necessary to register it.\n   *\n   *  This is not generally something that is needed, but may\n   *  be useful in a wrapper to perfom custom data URI functionality.\n   */\n  static createDataGateway() {\n    return dataGatewayFunc;\n  }\n  /**\n   *  Creates a function that will fetch IPFS (unvalidated) from\n   *  a custom gateway baseUrl.\n   *\n   *  The default IPFS gateway used internally is\n   *  ``\"https:/\\/gateway.ipfs.io/ipfs/\"``.\n   */\n  static createIpfsGatewayFunc(baseUrl) {\n    return getIpfsGatewayFunc(baseUrl);\n  }\n}\nasync function _send2(attempt, expires, delay, _request, _response) {\n  if (attempt >= _classPrivateFieldGet(this, _throttle).maxAttempts) {\n    return _response.makeServerError(\"exceeded maximum retry limit\");\n  }\n  (0, errors_js_1.assert)(getTime() <= expires, \"timeout\", \"TIMEOUT\", {\n    operation: \"request.send\",\n    reason: \"timeout\",\n    request: _request\n  });\n  if (delay > 0) {\n    await wait(delay);\n  }\n  let req = this.clone();\n  const scheme = (req.url.split(\":\")[0] || \"\").toLowerCase();\n  // Process any Gateways\n  if (scheme in Gateways) {\n    const result = await Gateways[scheme](req.url, checkSignal(_classPrivateFieldGet(_request, _signal)));\n    if (result instanceof FetchResponse) {\n      let response = result;\n      if (this.processFunc) {\n        checkSignal(_classPrivateFieldGet(_request, _signal));\n        try {\n          response = await this.processFunc(req, response);\n        } catch (error) {\n          // Something went wrong during processing; throw a 5xx server error\n          if (error.throttle == null || typeof error.stall !== \"number\") {\n            response.makeServerError(\"error in post-processing function\", error).assertOk();\n          }\n          // Ignore throttling\n        }\n      }\n\n      return response;\n    }\n    req = result;\n  }\n  // We have a preflight function; update the request\n  if (this.preflightFunc) {\n    req = await this.preflightFunc(req);\n  }\n  const resp = await getUrlFunc(req, checkSignal(_classPrivateFieldGet(_request, _signal)));\n  let response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request);\n  if (response.statusCode === 301 || response.statusCode === 302) {\n    // Redirect\n    try {\n      var _req$redirect;\n      const location = response.headers.location || \"\";\n      return _classPrivateMethodGet(_req$redirect = req.redirect(location), _send, _send2).call(_req$redirect, attempt + 1, expires, 0, _request, response);\n    } catch (error) {}\n    // Things won't get any better on another attempt; abort\n    return response;\n  } else if (response.statusCode === 429) {\n    // Throttle\n    if (this.retryFunc == null || (await this.retryFunc(req, response, attempt))) {\n      var _req$clone;\n      const retryAfter = response.headers[\"retry-after\"];\n      let delay = _classPrivateFieldGet(this, _throttle).slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));\n      if (typeof retryAfter === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n        delay = parseInt(retryAfter);\n      }\n      return _classPrivateMethodGet(_req$clone = req.clone(), _send, _send2).call(_req$clone, attempt + 1, expires, delay, _request, response);\n    }\n  }\n  if (this.processFunc) {\n    checkSignal(_classPrivateFieldGet(_request, _signal));\n    try {\n      response = await this.processFunc(req, response);\n    } catch (error) {\n      var _req$clone2;\n      // Something went wrong during processing; throw a 5xx server error\n      if (error.throttle == null || typeof error.stall !== \"number\") {\n        response.makeServerError(\"error in post-processing function\", error).assertOk();\n      }\n      // Throttle\n      let delay = _classPrivateFieldGet(this, _throttle).slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));\n      ;\n      if (error.stall >= 0) {\n        delay = error.stall;\n      }\n      return _classPrivateMethodGet(_req$clone2 = req.clone(), _send, _send2).call(_req$clone2, attempt + 1, expires, delay, _request, response);\n    }\n  }\n  return response;\n}\nexports.FetchRequest = FetchRequest;\n;\n/**\n *  The response for a FetchREquest.\n */\nvar _statusCode = /*#__PURE__*/new WeakMap();\nvar _statusMessage = /*#__PURE__*/new WeakMap();\nvar _headers2 = /*#__PURE__*/new WeakMap();\nvar _body2 = /*#__PURE__*/new WeakMap();\nvar _request2 = /*#__PURE__*/new WeakMap();\nvar _error = /*#__PURE__*/new WeakMap();\n_Symbol$iterator2 = Symbol.iterator;\nclass FetchResponse {\n  toString() {\n    return `<FetchResponse status=${this.statusCode} body=${_classPrivateFieldGet(this, _body2) ? (0, data_js_1.hexlify)(_classPrivateFieldGet(this, _body2)) : \"null\"}>`;\n  }\n  /**\n   *  The response status code.\n   */\n  get statusCode() {\n    return _classPrivateFieldGet(this, _statusCode);\n  }\n  /**\n   *  The response status message.\n   */\n  get statusMessage() {\n    return _classPrivateFieldGet(this, _statusMessage);\n  }\n  /**\n   *  The response headers. All keys are lower-case.\n   */\n  get headers() {\n    return Object.assign({}, _classPrivateFieldGet(this, _headers2));\n  }\n  /**\n   *  The response body, or ``null`` if there was no body.\n   */\n  get body() {\n    return _classPrivateFieldGet(this, _body2) == null ? null : new Uint8Array(_classPrivateFieldGet(this, _body2));\n  }\n  /**\n   *  The response body as a UTF-8 encoded string, or the empty\n   *  string (i.e. ``\"\"``) if there was no body.\n   *\n   *  An error is thrown if the body is invalid UTF-8 data.\n   */\n  get bodyText() {\n    try {\n      return _classPrivateFieldGet(this, _body2) == null ? \"\" : (0, utf8_js_1.toUtf8String)(_classPrivateFieldGet(this, _body2));\n    } catch (error) {\n      (0, errors_js_1.assert)(false, \"response body is not valid UTF-8 data\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"bodyText\",\n        info: {\n          response: this\n        }\n      });\n    }\n  }\n  /**\n   *  The response body, decoded as JSON.\n   *\n   *  An error is thrown if the body is invalid JSON-encoded data\n   *  or if there was no body.\n   */\n  get bodyJson() {\n    try {\n      return JSON.parse(this.bodyText);\n    } catch (error) {\n      (0, errors_js_1.assert)(false, \"response body is not valid JSON\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"bodyJson\",\n        info: {\n          response: this\n        }\n      });\n    }\n  }\n  [_Symbol$iterator2]() {\n    const headers = this.headers;\n    const keys = Object.keys(headers);\n    let index = 0;\n    return {\n      next: () => {\n        if (index < keys.length) {\n          const key = keys[index++];\n          return {\n            value: [key, headers[key]],\n            done: false\n          };\n        }\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n    };\n  }\n  constructor(statusCode, statusMessage, headers, body, request) {\n    _classPrivateFieldInitSpec(this, _statusCode, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _statusMessage, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _headers2, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _body2, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _request2, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _error, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _statusCode, statusCode);\n    _classPrivateFieldSet(this, _statusMessage, statusMessage);\n    _classPrivateFieldSet(this, _headers2, Object.keys(headers).reduce((accum, k) => {\n      accum[k.toLowerCase()] = String(headers[k]);\n      return accum;\n    }, {}));\n    _classPrivateFieldSet(this, _body2, body == null ? null : new Uint8Array(body));\n    _classPrivateFieldSet(this, _request2, request || null);\n    _classPrivateFieldSet(this, _error, {\n      message: \"\"\n    });\n  }\n  /**\n   *  Return a Response with matching headers and body, but with\n   *  an error status code (i.e. 599) and %%message%% with an\n   *  optional %%error%%.\n   */\n  makeServerError(message, error) {\n    let statusMessage;\n    if (!message) {\n      message = `${this.statusCode} ${this.statusMessage}`;\n      statusMessage = `CLIENT ESCALATED SERVER ERROR (${message})`;\n    } else {\n      statusMessage = `CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${message})`;\n    }\n    const response = new FetchResponse(599, statusMessage, this.headers, this.body, _classPrivateFieldGet(this, _request2) || undefined);\n    _classPrivateFieldSet(response, _error, {\n      message,\n      error\n    });\n    return response;\n  }\n  /**\n   *  If called within a [request.processFunc](FetchRequest-processFunc)\n   *  call, causes the request to retry as if throttled for %%stall%%\n   *  milliseconds.\n   */\n  throwThrottleError(message, stall) {\n    if (stall == null) {\n      stall = -1;\n    } else {\n      (0, errors_js_1.assertArgument)(Number.isInteger(stall) && stall >= 0, \"invalid stall timeout\", \"stall\", stall);\n    }\n    const error = new Error(message || \"throttling requests\");\n    (0, properties_js_1.defineProperties)(error, {\n      stall,\n      throttle: true\n    });\n    throw error;\n  }\n  /**\n   *  Get the header value for %%key%%, ignoring case.\n   */\n  getHeader(key) {\n    return this.headers[key.toLowerCase()];\n  }\n  /**\n   *  Returns true of the response has a body.\n   */\n  hasBody() {\n    return _classPrivateFieldGet(this, _body2) != null;\n  }\n  /**\n   *  The request made for this response.\n   */\n  get request() {\n    return _classPrivateFieldGet(this, _request2);\n  }\n  /**\n   *  Returns true if this response was a success statusCode.\n   */\n  ok() {\n    return _classPrivateFieldGet(this, _error).message === \"\" && this.statusCode >= 200 && this.statusCode < 300;\n  }\n  /**\n   *  Throws a ``SERVER_ERROR`` if this response is not ok.\n   */\n  assertOk() {\n    if (this.ok()) {\n      return;\n    }\n    let {\n      message,\n      error\n    } = _classPrivateFieldGet(this, _error);\n    if (message === \"\") {\n      message = `server response ${this.statusCode} ${this.statusMessage}`;\n    }\n    (0, errors_js_1.assert)(false, message, \"SERVER_ERROR\", {\n      request: this.request || \"unknown request\",\n      response: this,\n      error\n    });\n  }\n}\nexports.FetchResponse = FetchResponse;\nfunction getTime() {\n  return new Date().getTime();\n}\nfunction unpercent(value) {\n  return (0, utf8_js_1.toUtf8Bytes)(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n    return String.fromCharCode(parseInt(code, 16));\n  }));\n}\nfunction wait(delay) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}","map":{"version":3,"names":["base64_js_1","require","data_js_1","errors_js_1","properties_js_1","utf8_js_1","geturl_js_1","MAX_ATTEMPTS","SLOT_INTERVAL","getUrlFunc","getUrl","reData","RegExp","reIpfs","locked","dataGatewayFunc","url","signal","match","Error","FetchResponse","decodeBase64","unpercent","error","FetchRequest","getIpfsGatewayFunc","baseUrl","gatewayIpfs","Gateways","fetchSignals","WeakMap","_listeners","_cancelled","FetchCancelSignal","constructor","request","_classPrivateFieldInitSpec","writable","value","_classPrivateFieldSet","set","_classPrivateFieldGet","listener","setTimeout","addListener","assert","operation","push","cancelled","checkSignal","exports","_allowInsecure","_gzip","_headers","_method","_timeout","_url","_body","_bodyType","_creds","_preflight","_process","_retry","_signal","_throttle","_send","WeakSet","_Symbol$iterator","Symbol","iterator","String","body","Uint8Array","undefined","toUtf8Bytes","JSON","stringify","hasBody","method","toUpperCase","headers","Object","assign","encodeBase64","allowGzip","length","getHeader","key","toLowerCase","setHeader","clearHeaders","keys","index","next","done","credentials","setCredentials","username","password","assertArgument","allowInsecureAuthentication","timeout","preflightFunc","preflight","processFunc","process","retryFunc","retry","_classPrivateMethodInitSpec","slotInterval","maxAttempts","toString","hexlify","setThrottleParams","params","send","_classPrivateMethodGet","_send2","call","getTime","cancel","get","redirect","location","current","split","target","req","clone","lockConfig","getGateway","scheme","registerGateway","func","registerGetUrl","createDataGateway","createIpfsGatewayFunc","attempt","expires","delay","_request","_response","makeServerError","reason","wait","result","response","throttle","stall","assertOk","resp","statusCode","statusMessage","_req$redirect","_req$clone","retryAfter","Math","trunc","random","pow","parseInt","_req$clone2","_statusCode","_statusMessage","_headers2","_body2","_request2","_error","_Symbol$iterator2","bodyText","toUtf8String","info","bodyJson","parse","reduce","accum","k","message","throwThrottleError","Number","isInteger","defineProperties","ok","Date","replace","all","code","fromCharCode","Promise","resolve"],"sources":["../../src.ts/utils/fetch.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}