{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { HypersignDID, HypersignVerifiableCredential } from 'hs-ssi-sdk';\nimport jsonld from 'jsonld';\nimport DomainLinkage from '@hypersign-protocol/domain-linkage-verifier';\nimport { purposes } from 'jsonld-signatures';\nimport { createWallet, generateMnemonicToHDSeed } from '../scripts/wallet';\nimport { issue } from '@digitalbazaar/vc';\nimport { Ed25519Signature2020 } from '@digitalbazaar/ed25519-signature-2020';\nimport { Ed25519VerificationKey2020 } from '@digitalbazaar/ed25519-verification-key-2020';\nimport { generateMnemonic } from 'bip39';\nexport default {\n  name: 'HelloWorld',\n  data() {\n    return {\n      import_file: false,\n      didDocument: '',\n      didConfiguration: '',\n      domain: '',\n      namespace: 'testnet',\n      status: '',\n      rpc: 'https://rpc.jagrat.hypersign.id/',\n      api: 'https://api.jagrat.hypersign.id/'\n    };\n  },\n  mounted() {\n    const mnemonic = localStorage.getItem('mnemonic');\n    if (mnemonic) {\n      this.walletAddress = JSON.parse(localStorage.getItem('keys')).address;\n      this.domain = JSON.parse(localStorage.getItem('didDocument')).service[0].serviceEndpoint.split('/')[2];\n      document.getElementById(\"verify\").style.display = \"block\";\n      document.getElementById(\"verify\").disabled = false;\n      document.getElementById(\"verify\").innerHTML = \"Next\";\n      document.getElementById(\"link\").style.display = \"none\";\n      this.didDocument = JSON.parse(localStorage.getItem('didDocument'));\n      this.didConfiguration = JSON.parse(localStorage.getItem('didConfiguration'));\n    }\n  },\n  methods: {\n    reset() {\n      localStorage.clear();\n      this.walletAddress = '';\n      this.domain = '';\n      this.didDocument = '';\n      this.didConfiguration = '';\n      document.getElementById(\"verify\").style.display = \"none\";\n      document.getElementById(\"verify\").disabled = true;\n      document.getElementById(\"verify\").innerHTML = \"Next\";\n      document.getElementById(\"link\").style.display = \"block\";\n    },\n    filetoupload() {\n      console.log(this.$refs.file.files[0]);\n    },\n    upload() {\n      try {\n        const file = this.$refs.file.files[0];\n        const reader = new FileReader();\n        reader.onload = e => {\n          const data = JSON.parse(e.target.result);\n          localStorage.setItem('didDocument', JSON.stringify(data.didDocument));\n          localStorage.setItem('didConfiguration', JSON.stringify(data.didConfiguration));\n          localStorage.setItem('mnemonic', data.mnemonic);\n          localStorage.setItem('keys', JSON.stringify(data.keys));\n          localStorage.setItem('domain', new URL(data.didDocument.service[0].serviceEndpoint).hostname);\n          this.walletAddress = data.keys.address;\n          this.domain = data.didDocument.service[0].serviceEndpoint.split('/')[2];\n          document.getElementById(\"verify\").style.display = \"block\";\n          document.getElementById(\"verify\").disabled = false;\n          document.getElementById(\"verify\").innerHTML = \"Next\";\n          document.getElementById(\"link\").style.display = \"none\";\n          this.didDocument = data.didDocument;\n          this.didConfiguration = data.didConfiguration;\n          this.import_file = false;\n        };\n        reader.readAsText(file);\n      } catch (error) {\n        console.log(error);\n        this.alert('error', 'Something went wrong');\n      }\n    },\n    import_config() {\n      this.import_file ? this.import_file = false : this.import_file = true;\n    },\n    export_config() {\n      const didDocument = JSON.parse(localStorage.getItem('didDocument'));\n      const didConfiguration = JSON.parse(localStorage.getItem('didConfiguration'));\n      const mnemonic = localStorage.getItem('mnemonic');\n      const keys = JSON.parse(localStorage.getItem('keys'));\n      const data = {\n        didDocument,\n        didConfiguration,\n        mnemonic,\n        keys\n      };\n      this.download(data, 'exportconfig.json');\n    },\n    async resolveDID() {\n      const resolveDID = 'https://' + this.domain + '/.well-known/did.json';\n      const resolveDIDConfig = 'https://' + this.domain + '/.well-known/did-configuration.json';\n      const didDocument = await this.fetch(resolveDID);\n      const didConfiguration = await this.fetch(resolveDIDConfig);\n      if (didDocument.id != JSON.parse(localStorage.getItem('didDocument')).id) {\n        this.alert('Domain is not linked to the DID');\n        document.getElementById(\"verify\").innerHTML = \"Retry ↻  \";\n        return;\n      }\n      const credential = didConfiguration.linked_dids[0];\n      if (credential.credentialSubject.id != didDocument.id) {\n        this.alert('Domain is not linked to the DID');\n        document.getElementById(\"verify\").innerHTML = \"Retry ↻  \";\n        return;\n      }\n      if (credential.credentialSubject.id != credential.credentialSubject.id) {\n        this.alert('DidConfiguration is not linked to the DID');\n        document.getElementById(\"verify\").innerHTML = \"Retry ↻  \";\n        return;\n      }\n      if (credential.credentialSubject.origin != this.domain) {\n        this.alert('Domain is not linked to the DID');\n        document.getElementById(\"verify\").innerHTML = \"Retry ↻  \";\n        return;\n      }\n    },\n    download(file, filename) {\n      const blob = new Blob([JSON.stringify(file)], {\n        type: 'application/json'\n      });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = filename;\n      // attach this link to the document a of id did\n      link.click();\n    },\n    loader(show = true) {\n      // a div based loader that will show a loader in the middle of the screen based on show variable and transparent background and animated and use the loader image from cdn \n      if (show) {\n        const div = document.createElement('div');\n        div.className = 'loader';\n        div.style.cssText = 'position:fixed; top:0; left:0; width:100%; height:100%; background-color: rgba(0,0,0,0.8); z-index: 9999; display:flex; justify-content:center; align-items:center;';\n        div.img = document.createElement('img');\n        div.img.style.cssText = 'width:150px';\n        div.img.src = 'https://cdn.dribbble.com/users/421466/screenshots/2377950/drops-400px.gif';\n        div.appendChild(div.img);\n        document.body.appendChild(div);\n      } else {\n        document.querySelector('.loader').remove();\n      }\n    },\n    alert(msg, time = 3000) {\n      //  a alert that will push a floatable div in the left corner\n      const div = document.createElement('div');\n      div.className = 'alert';\n      // style for top right corner floatable div fade in and out transperent blue\n      div.style.cssText = 'position:fixed; top:10px; right:10px; background-color: #054126; color: #fff; padding: 10px; border-radius: 5px; z-index: 9999; animation: fadein 0.5s, fadeout 0.5s 2.5s;';\n      div.innerHTML = msg;\n      document.body.appendChild(div);\n      setTimeout(function () {\n        div.remove();\n      }, time);\n    },\n    copy(text) {\n      // copy to clipboard\n      const that = this;\n      navigator.clipboard.writeText(text).then(function () {\n        that.alert('Copied to clipboard');\n      }, function (err) {\n        that.alert('Failed to copy to clipboard');\n        console.error('Async: Could not copy text: ', err);\n      });\n    },\n    async link() {\n      this.loader(true);\n      if (!this.domain) {\n        this.alert('Please enter domain name');\n        return;\n      }\n      localStorage.setItem('domain', this.domain);\n      await this.generateDID();\n      await this.signcredential();\n      this.alert(`<h3 style='text-align:center'>Follow the steps</h3><p>Please put the did.json and did-configuration.json</p><p> to your servers .well-known folder.</p>`, 10000);\n\n      // download did.json\n      const didDocument = JSON.parse(localStorage.getItem('didDocument'));\n      const didConfiguration = JSON.parse(localStorage.getItem('didConfiguration'));\n      this.didConfiguration = didConfiguration;\n      this.didDocument = didDocument;\n      const didDocumentBlob = new Blob([JSON.stringify(didDocument)], {\n        type: 'application/json'\n      });\n      const didConfigurationBlob = new Blob([JSON.stringify(didConfiguration)], {\n        type: 'application/json'\n      });\n      const didDocumentUrl = URL.createObjectURL(didDocumentBlob);\n      const didConfigurationUrl = URL.createObjectURL(didConfigurationBlob);\n      const didDocumentLink = document.createElement('a');\n      const didConfigurationLink = document.createElement('a');\n      didDocumentLink.href = didDocumentUrl;\n      didConfigurationLink.href = didConfigurationUrl;\n      didDocumentLink.download = 'did.json';\n      didConfigurationLink.download = 'did-configuration.json';\n      // attach this link to the document a of id did\n      didDocumentLink.click();\n      didConfigurationLink.click();\n      document.getElementById(\"verify\").style.display = \"block\";\n      document.getElementById(\"verify\").disabled = false;\n      document.getElementById(\"verify\").innerHTML = \"Verify\";\n      document.getElementById(\"link\").style.display = \"none\";\n      this.loader(false);\n    },\n    async fetch(url) {\n      const response = await fetch(url);\n      const data = await response.json();\n      return data;\n    },\n    // async VerifyCredentials(credential, didDocument) {\n\n    //   const suite = new Ed25519Signature2020({\n    //     key: new Ed25519VerificationKey2020({\n    //       id: JSON.parse(localStorage.getItem('didDocument')).verificationMethod[0].id,\n    //       controller: JSON.parse(localStorage.getItem('didDocument')).id,\n    //       publicKeyMultibase: JSON.parse(localStorage.getItem('keys')).publicKeyMultibase,\n\n    //     }),\n    //   })\n\n    //   const result = await verifyCredential({\n    //     credential: credential,\n    //     suite: suite,\n    //     purpose: new purposes.AssertionProofPurpose({\n    //       controller: {\n    //         '@context': 'https://w3id.org/security/v2',\n    //         id: didDocument.id,\n\n    //         assertionMethod: [didDocument.verificationMethod[0].id]\n    //       }\n    //     }),\n    //     documentLoader: async (url) => {\n\n    //       return await jsonld.documentLoader(url)\n    //     }\n    //   });\n    //   return result\n    // },\n    async Verify() {\n      try {\n        this.loader(true);\n        const dl = new DomainLinkage(this.domain);\n        var button = document.getElementById(\"verify\");\n        button.innerHTML = \"Processing\";\n        button.disabled = true;\n        const result = await dl.verify(this.didDocument.id);\n        button.style['background-color'] = \"#e4a11b\";\n        if (result.verified) {\n          console.log(result);\n          this.alert('Domain is linked to the DID');\n\n          // button.disabled = true;\n\n          button.innerHTML = \"Verified ✔\";\n          button.style['background-color'] = \"#14A44D\";\n          button.disabled = true;\n          this.loader(false);\n          return this.$emit('can-continue', {\n            value: true\n          });\n        } else {\n          this.alert('Domain is not linked to the DID');\n          button.innerHTML = \"Retry ↻  \";\n          button.style['background-color'] = \"#DC4C64\";\n          button.disabled = false;\n          this.loader(false);\n        }\n        return this.$emit('can-continue', {\n          value: true\n        });\n      } catch (e) {\n        console.log(e);\n        this.alert('Domain is not linked to the DID');\n        document.getElementById(\"verify\").innerHTML = \"Retry ↻  \";\n        button.style['background-color'] = \"#DC4C64\";\n        document.getElementById(\"verify\").disabled = false;\n        this.loader(false);\n      }\n    },\n    // async Verify() {\n    //   try {\n\n    //     this.loader(true)\n\n    //     const resolveDID = 'https://' + this.domain + '/.well-known/did.json'\n    //     const resolveDIDConfig = 'https://' + this.domain + '/.well-known/did-configuration.json'\n\n    //     const didDocument = await this.fetch(resolveDID)\n    //     const didConfiguration = await this.fetch(resolveDIDConfig)\n    //     if (didDocument.id != JSON.parse(localStorage.getItem('didDocument')).id) {\n    //       this.alert('Domain is not linked to the DID')\n    //       document.getElementById(\"verify\").innerHTML = \"Retry ↻  \";\n\n    //       return\n    //     }\n\n    //     const credential = didConfiguration.linked_dids[0]\n    //     if (credential.credentialSubject.id != didDocument.id) {\n    //       this.alert('Domain is not linked to the DID')\n    //       document.getElementById(\"verify\").innerHTML = \"Retry ↻  \";\n\n    //       return\n    //     }\n    //     if (credential.credentialSubject.id != credential.credentialSubject.id) {\n    //       this.alert('DidConfiguration is not linked to the DID')\n    //       document.getElementById(\"verify\").innerHTML = \"Retry ↻  \";\n\n    //       return\n    //     }\n\n    //     if (credential.credentialSubject.origin != this.domain) {\n    //       this.alert('Domain is not linked to the DID')\n    //       document.getElementById(\"verify\").innerHTML = \"Retry ↻  \";\n\n    //       return\n    //     }\n\n    //     // verify the credential\n    //     await this.VerifyCredentials(credential, didDocument).then(async (result) => {\n    //       console.log(result);\n    //       if (result.verified) {\n    //         this.alert('Domain is linked to the DID')\n    //         document.getElementById(\"verify\").innerHTML = \"Verified ✔\";\n    //         document.getElementById(\"verify\").disabled = true;\n    //         document.getElementById(\"verify\").style['background-color'] = \"#14A44D\";\n    //         document.getElementById(\"link\").style.display = \"none\";\n    //         this.loader(false)\n    //         this.status = '✔'\n    //         return this.$emit('can-continue', { value: true });\n    //       } else {\n    //         this.alert('Domain is not linked to the DID')\n    //         document.getElementById(\"verify\").innerHTML = \"Retry ↻  \";\n    //         this.status = '✘'\n\n    //         return this.loader(false)\n    //       }\n    //     })\n    //       .catch((err) => {\n    //         this.alert('Domain is not linked to the DID')\n    //         document.getElementById(\"verify\").innerHTML = \"Retry ↻  \";\n    //         this.status = '✘'\n    //         this.loader(false)\n    //         this.alert(err)\n\n    //         return\n    //       })\n\n    //     // var domain = document.getElementById(\"domain\").value;\n    //     //   var button = document.getElementById(\"verify\");\n    //     //   button.innerHTML = \"Processing\";\n    //     //   button.style['background-color']=\"#e4a11b\";\n    //     //   // button.disabled = true;\n    //     //   setTimeout(function(){\n    //     //     button.innerHTML = \"Verified ✔\";\n    //     //     button.style['background-color']=\"#14A44D\";\n    //     //     button.disabled = true;\n    //     //   }, 2000);\n    //     //   setTimeout(function(){\n    //     //     button.innerHTML = \"Retry ↻  \";\n    //     //     button.style['background-color']=\"#DC4C64\";\n\n    //     //   }, 4000);\n    //   } catch (error) {\n    //     this.alert(error)\n    //     document.getElementById(\"verify\").innerHTML = \"Retry ↻  \";\n    //     this.status = '✘'\n    //     this.loader(false)\n\n    //   }\n    // },\n\n    async generateDID() {\n      try {\n        const mnemonic = generateMnemonic();\n        const offlineSigner = await createWallet(mnemonic, 0);\n        const hsDID = new HypersignDID({\n          offlineSigner,\n          namespace: this.namespace,\n          nodeRestEndpoint: this.api,\n          nodeRpcEndpoint: this.rpc\n        });\n        await hsDID.init();\n\n        // seed modidied by hdpath\n        const seed = await generateMnemonicToHDSeed(mnemonic, 0);\n        const keys = await hsDID.generateKeys({\n          seed\n        });\n        const didDocument = await hsDID.generate({\n          publicKeyMultibase: keys.publicKeyMultibase\n        });\n        didDocument.service.push({\n          id: didDocument.id + '#LinkedDomains',\n          type: 'LinkedDomains',\n          serviceEndpoint: 'https://' + this.domain + '/.well-known/did.json'\n        });\n        didDocument['@context'].push('https://w3id.org/security/suites/ed25519-2020/v1');\n        localStorage.setItem('didDocument', JSON.stringify(didDocument));\n        localStorage.setItem('mnemonic', mnemonic);\n        localStorage.setItem('keys', JSON.stringify(keys));\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    async signcredential() {\n      const hsCred = new HypersignVerifiableCredential({\n        namespace: this.namespace,\n        nodeRestEndpoint: this.api,\n        nodeRpcEndpoint: this.rpc\n      });\n      const did_configuration = await hsCred.generate({\n        subjectDid: JSON.parse(localStorage.getItem('didDocument')).id,\n        type: ['DomainLinkageCredential'],\n        schemaContext: ['https://identity.foundation/.well-known/did-configuration/v1'],\n        issuerDid: JSON.parse(localStorage.getItem('didDocument')).id,\n        expirationDate: new Date('2030-01-01T00:00:02.022Z').toISOString(),\n        fields: {\n          origin: this.domain\n        }\n      });\n      const suite = new Ed25519Signature2020({\n        key: new Ed25519VerificationKey2020({\n          id: JSON.parse(localStorage.getItem('didDocument')).verificationMethod[0].id,\n          controller: JSON.parse(localStorage.getItem('didDocument')).id,\n          publicKeyMultibase: JSON.parse(localStorage.getItem('keys')).publicKeyMultibase,\n          privateKeyMultibase: JSON.parse(localStorage.getItem('keys')).privateKeyMultibase\n        })\n      });\n      const didDocument = JSON.parse(localStorage.getItem('didDocument'));\n      delete did_configuration.credentialStatus;\n      const signedCredential = await issue({\n        credential: did_configuration,\n        suite: suite,\n        purpose: new purposes.AssertionProofPurpose({\n          controller: {\n            '@context': 'https://w3id.org/security/v2',\n            id: didDocument.id,\n            assertionMethod: [didDocument.verificationMethod[0].id]\n          }\n        }),\n        documentLoader: async url => {\n          return await jsonld.documentLoader(url);\n        }\n      });\n      const didConfiguration = {\n        '@context': 'https://identity.foundation/.well-known/did-configuration/v1',\n        'linked_dids': [signedCredential]\n      };\n      localStorage.setItem('didConfiguration', JSON.stringify(didConfiguration));\n    }\n  }\n};","map":{"version":3,"names":["HypersignDID","HypersignVerifiableCredential","jsonld","DomainLinkage","purposes","createWallet","generateMnemonicToHDSeed","issue","Ed25519Signature2020","Ed25519VerificationKey2020","generateMnemonic","name","data","import_file","didDocument","didConfiguration","domain","namespace","status","rpc","api","mounted","mnemonic","localStorage","getItem","walletAddress","JSON","parse","address","service","serviceEndpoint","split","document","getElementById","style","display","disabled","innerHTML","methods","reset","clear","filetoupload","console","log","$refs","file","files","upload","reader","FileReader","onload","e","target","result","setItem","stringify","keys","URL","hostname","readAsText","error","alert","import_config","export_config","download","resolveDID","resolveDIDConfig","fetch","id","credential","linked_dids","credentialSubject","origin","filename","blob","Blob","type","url","createObjectURL","link","createElement","href","click","loader","show","div","className","cssText","img","src","appendChild","body","querySelector","remove","msg","time","setTimeout","copy","text","that","navigator","clipboard","writeText","then","err","generateDID","signcredential","didDocumentBlob","didConfigurationBlob","didDocumentUrl","didConfigurationUrl","didDocumentLink","didConfigurationLink","response","json","Verify","dl","button","verify","verified","$emit","value","offlineSigner","hsDID","nodeRestEndpoint","nodeRpcEndpoint","init","seed","generateKeys","generate","publicKeyMultibase","push","hsCred","did_configuration","subjectDid","schemaContext","issuerDid","expirationDate","Date","toISOString","fields","suite","key","verificationMethod","controller","privateKeyMultibase","credentialStatus","signedCredential","purpose","AssertionProofPurpose","assertionMethod","documentLoader"],"sources":["src/components/HelloWorld.vue"],"sourcesContent":["<template>\n  <div class=\"hello\">\n\n\n\n    <div class=\"form\">\n      <p id=\"header\">Link your domain to your App</p>\n      <div id=\"export_import\" style=\"float: right;\">\n        <a href=\"#\" @click=\"import_config()\"> <b-icon icon=\"arrow-down-circle-fill\" style=\"margin-right: 5px;\"  title=\"Import Configuration\" />\n        </a>\n\n        <a href=\"#\" @click=\"export_config()\"> <b-icon icon=\"arrow-right-square-fill\" style=\"margin-right: 5px;\" title=\"Export Configuration\" />\n        </a>\n        <a href=\"#\" @click=\"reset()\"> <b-icon icon=\"arrow-clockwise\"  title=\"Reset Configuration\" />\n        </a>\n\n\n      </div>\n      <input type=\"text\" id=\"domain\" v-model=\"domain\" placeholder=\"Enter your domain name\" />\n      <br>\n      <input type=\"file\" id=\"upload\" v-if=\"import_file\" @change=\"filetoupload\" ref=\"file\">\n      <button @click=\"upload()\" v-if=\"import_file\">Upload</button>\n      <button @click=\"link\" id=\"link\">Link</button>\n      <!-- dns text record btn -->\n      <!-- <span style=\"font-size: small;\" v-if=\"status\"> Please add <strong @click=\"copy(didDocument.id)\"\n          style=\"cursor: pointer;\">{{ didDocument.id }}</strong> as TXT record to your domain </span> -->\n      <!-- <button @click=\"Verify\" id=\"dns\" v-if=\"status\">Verify Txt Record</button> -->\n      <div v-if=\"didConfiguration\">\n\n        <h6 style=\"color: red;\">\n          {{ didDocument ? \"Please put this two files did.json and did-configuration.json to the servers .well-known \\\n                    folder.So it can be resolved as `${YourDomain}/.well-known/did.json` and \\\n                    `${YourDomain}/.well-known/did-configuration.json`\": '' }}</h6>\n        <!-- <p> 💳 {{ walletAddress ? walletAddress : '.....' }}</p> -->\n        <p> 🌐 {{ domain ? domain : '.....' }} {{ status ? status : '' }}</p>\n        <p> <a @click=\"download(didDocument, 'did.json')\" href=\"#\" id=\"did\">did.json</a> <json-viewer\n            :value=\"didDocument ? didDocument : {}\" :expand-depth=1 copyable></json-viewer></p>\n        <p> <a @click=\"download(didConfiguration, 'did-configuration.json')\" href=\"#\"\n            id=\"didconfig\">did-configuration.json</a><json-viewer :value=\"didConfiguration ? didConfiguration : {}\"\n            :expand-depth=1 copyable></json-viewer></p>\n      </div>\n      <button @click=\"Verify\" id=\"verify\">Verify</button>\n\n    </div>\n  </div>\n</template>\n\n<script>\nimport {\n  HypersignDID, HypersignVerifiableCredential\n} from 'hs-ssi-sdk'\nimport jsonld from 'jsonld'\nimport DomainLinkage from '@hypersign-protocol/domain-linkage-verifier'\nimport { purposes } from 'jsonld-signatures'\nimport { createWallet, generateMnemonicToHDSeed } from '../scripts/wallet'\nimport { issue } from '@digitalbazaar/vc'\nimport { Ed25519Signature2020 } from '@digitalbazaar/ed25519-signature-2020';\nimport { Ed25519VerificationKey2020 } from '@digitalbazaar/ed25519-verification-key-2020';\nimport {generateMnemonic} from 'bip39'\nexport default {\n  name: 'HelloWorld',\n  data() {\n    return {\n      import_file: false,\n      didDocument: '',\n      didConfiguration: '',\n      domain: '',\n      namespace: 'testnet',\n      status: '',\n      rpc: 'https://rpc.jagrat.hypersign.id/',\n      api: 'https://api.jagrat.hypersign.id/'\n    }\n\n\n  },\n\n   mounted() {\n    const mnemonic = localStorage.getItem('mnemonic')\n    if (mnemonic) {\n      this.walletAddress = JSON.parse(localStorage.getItem('keys')).address\n      this.domain = JSON.parse(localStorage.getItem('didDocument')).service[0].serviceEndpoint.split('/')[2]\n      document.getElementById(\"verify\").style.display = \"block\";\n      document.getElementById(\"verify\").disabled = false;\n      document.getElementById(\"verify\").innerHTML = \"Next\";\n      document.getElementById(\"link\").style.display = \"none\";\n      this.didDocument = JSON.parse(localStorage.getItem('didDocument'))\n      this.didConfiguration = JSON.parse(localStorage.getItem('didConfiguration'))\n    }\n\n\n\n\n  },\n  methods: {\n    reset() {\n      localStorage.clear()\n      this.walletAddress = ''\n      this.domain = ''\n      this.didDocument = ''\n      this.didConfiguration = ''\n      document.getElementById(\"verify\").style.display = \"none\";\n      document.getElementById(\"verify\").disabled = true;\n      document.getElementById(\"verify\").innerHTML = \"Next\";\n      document.getElementById(\"link\").style.display = \"block\";\n\n\n\n\n    },\n    filetoupload() {\n      console.log(this.$refs.file.files[0]);\n    }\n    ,\n    upload() {\n      try {\n\n\n        const file = this.$refs.file.files[0]\n        const reader = new FileReader()\n        reader.onload = (e) => {\n\n          const data = JSON.parse(e.target.result)\n          localStorage.setItem('didDocument', JSON.stringify(data.didDocument))\n          localStorage.setItem('didConfiguration', JSON.stringify(data.didConfiguration))\n          localStorage.setItem('mnemonic', data.mnemonic)\n          localStorage.setItem('keys', JSON.stringify(data.keys))\n          localStorage.setItem('domain', new URL(data.didDocument.service[0].serviceEndpoint).hostname)\n          this.walletAddress = data.keys.address\n          this.domain = data.didDocument.service[0].serviceEndpoint.split('/')[2]\n          document.getElementById(\"verify\").style.display = \"block\";\n          document.getElementById(\"verify\").disabled = false;\n          document.getElementById(\"verify\").innerHTML = \"Next\";\n          document.getElementById(\"link\").style.display = \"none\";\n          this.didDocument = data.didDocument\n          this.didConfiguration = data.didConfiguration\n          this.import_file = false\n        }\n        reader.readAsText(file)\n      } catch (error) {\n        console.log(error);\n        this.alert('error', 'Something went wrong')\n\n      }\n\n    },\n    import_config() {\n      this.import_file ? this.import_file = false : this.import_file = true\n\n\n\n    },\n    export_config() {\n      const didDocument = JSON.parse(localStorage.getItem('didDocument'))\n      const didConfiguration = JSON.parse(localStorage.getItem('didConfiguration'))\n      const mnemonic = localStorage.getItem('mnemonic')\n      const keys = JSON.parse(localStorage.getItem('keys'))\n      const data = {\n        didDocument,\n        didConfiguration,\n        mnemonic,\n        keys\n      }\n      this.download(data, 'exportconfig.json')\n\n\n    },\n    async resolveDID() {\n      const resolveDID = 'https://' + this.domain + '/.well-known/did.json'\n      const resolveDIDConfig = 'https://' + this.domain + '/.well-known/did-configuration.json'\n\n      const didDocument = await this.fetch(resolveDID)\n      const didConfiguration = await this.fetch(resolveDIDConfig)\n      if (didDocument.id != JSON.parse(localStorage.getItem('didDocument')).id) {\n        this.alert('Domain is not linked to the DID')\n        document.getElementById(\"verify\").innerHTML = \"Retry ↻  \";\n\n        return\n      }\n\n      const credential = didConfiguration.linked_dids[0]\n      if (credential.credentialSubject.id != didDocument.id) {\n        this.alert('Domain is not linked to the DID')\n        document.getElementById(\"verify\").innerHTML = \"Retry ↻  \";\n\n        return\n      }\n      if (credential.credentialSubject.id != credential.credentialSubject.id) {\n        this.alert('DidConfiguration is not linked to the DID')\n        document.getElementById(\"verify\").innerHTML = \"Retry ↻  \";\n\n        return\n      }\n\n      if (credential.credentialSubject.origin != this.domain) {\n        this.alert('Domain is not linked to the DID')\n        document.getElementById(\"verify\").innerHTML = \"Retry ↻  \";\n\n        return\n      }\n    },\n    download(file, filename) {\n      const blob = new Blob([JSON.stringify(file)], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = filename;\n      // attach this link to the document a of id did\n      link.click();\n\n    },\n\n    loader(show = true) {\n      // a div based loader that will show a loader in the middle of the screen based on show variable and transparent background and animated and use the loader image from cdn \n      if (show) {\n        const div = document.createElement('div');\n        div.className = 'loader';\n        div.style.cssText = 'position:fixed; top:0; left:0; width:100%; height:100%; background-color: rgba(0,0,0,0.8); z-index: 9999; display:flex; justify-content:center; align-items:center;';\n        div.img = document.createElement('img');\n        div.img.style.cssText = 'width:150px'\n        div.img.src = 'https://cdn.dribbble.com/users/421466/screenshots/2377950/drops-400px.gif'\n\n        div.appendChild(div.img)\n\n        document.body.appendChild(div);\n      } else {\n        document.querySelector('.loader').remove()\n      }\n\n\n\n    },\n    alert(msg, time = 3000) {\n      //  a alert that will push a floatable div in the left corner\n      const div = document.createElement('div');\n      div.className = 'alert';\n      // style for top right corner floatable div fade in and out transperent blue\n      div.style.cssText = 'position:fixed; top:10px; right:10px; background-color: #054126; color: #fff; padding: 10px; border-radius: 5px; z-index: 9999; animation: fadein 0.5s, fadeout 0.5s 2.5s;';\n      div.innerHTML = msg;\n      document.body.appendChild(div);\n      setTimeout(function () {\n        div.remove();\n      }, time);\n\n\n\n\n    },\n    copy(text) {\n      // copy to clipboard\n      const that = this\n      navigator.clipboard.writeText(text).then(function () {\n        that.alert('Copied to clipboard')\n      }, function (err) {\n        that.alert('Failed to copy to clipboard')\n        console.error('Async: Could not copy text: ', err);\n      });\n    },\n\n\n    async link() {\n      this.loader(true)\n      if (!this.domain) {\n        this.alert('Please enter domain name')\n        return\n      }\n      localStorage.setItem('domain', this.domain)\n      await this.generateDID()\n      await this.signcredential()\n\n\n      this.alert(`<h3 style='text-align:center'>Follow the steps</h3><p>Please put the did.json and did-configuration.json</p><p> to your servers .well-known folder.</p>`, 10000)\n\n      // download did.json\n      const didDocument = JSON.parse(localStorage.getItem('didDocument'))\n      const didConfiguration = JSON.parse(localStorage.getItem('didConfiguration'))\n      this.didConfiguration = didConfiguration\n      this.didDocument = didDocument\n      const didDocumentBlob = new Blob([JSON.stringify(didDocument)], { type: 'application/json' });\n      const didConfigurationBlob = new Blob([JSON.stringify(didConfiguration)], { type: 'application/json' });\n      const didDocumentUrl = URL.createObjectURL(didDocumentBlob);\n      const didConfigurationUrl = URL.createObjectURL(didConfigurationBlob);\n      const didDocumentLink = document.createElement('a');\n      const didConfigurationLink = document.createElement('a');\n      didDocumentLink.href = didDocumentUrl;\n      didConfigurationLink.href = didConfigurationUrl;\n      didDocumentLink.download = 'did.json';\n      didConfigurationLink.download = 'did-configuration.json';\n      // attach this link to the document a of id did\n      didDocumentLink.click();\n      didConfigurationLink.click();\n\n      document.getElementById(\"verify\").style.display = \"block\";\n      document.getElementById(\"verify\").disabled = false;\n      document.getElementById(\"verify\").innerHTML = \"Verify\";\n      document.getElementById(\"link\").style.display = \"none\";\n\n      this.loader(false)\n\n\n    },\n    async fetch(url) {\n      const response = await fetch(url)\n      const data = await response.json();\n      return data\n    }\n    ,\n    // async VerifyCredentials(credential, didDocument) {\n\n    //   const suite = new Ed25519Signature2020({\n    //     key: new Ed25519VerificationKey2020({\n    //       id: JSON.parse(localStorage.getItem('didDocument')).verificationMethod[0].id,\n    //       controller: JSON.parse(localStorage.getItem('didDocument')).id,\n    //       publicKeyMultibase: JSON.parse(localStorage.getItem('keys')).publicKeyMultibase,\n\n    //     }),\n    //   })\n\n\n    //   const result = await verifyCredential({\n    //     credential: credential,\n    //     suite: suite,\n    //     purpose: new purposes.AssertionProofPurpose({\n    //       controller: {\n    //         '@context': 'https://w3id.org/security/v2',\n    //         id: didDocument.id,\n\n    //         assertionMethod: [didDocument.verificationMethod[0].id]\n    //       }\n    //     }),\n    //     documentLoader: async (url) => {\n\n    //       return await jsonld.documentLoader(url)\n    //     }\n    //   });\n    //   return result\n    // },\n    async Verify() {\n      try {\n        this.loader(true)\n        const dl = new DomainLinkage(this.domain)\n        var button = document.getElementById(\"verify\");\n        button.innerHTML = \"Processing\";\n        button.disabled = true;\n        const result = await dl.verify(this.didDocument.id)\n\n        button.style['background-color'] = \"#e4a11b\";\n        if (result.verified) {\n          console.log(result);\n          this.alert('Domain is linked to the DID')\n\n          // button.disabled = true;\n\n          button.innerHTML = \"Verified ✔\";\n          button.style['background-color'] = \"#14A44D\";\n          button.disabled = true;\n\n\n          this.loader(false)\n          return this.$emit('can-continue', { value: true });\n\n        }\n        else {\n          this.alert('Domain is not linked to the DID')\n          button.innerHTML = \"Retry ↻  \";\n          button.style['background-color'] = \"#DC4C64\";\n          button.disabled = false;\n          this.loader(false)\n        }\n        return this.$emit('can-continue', { value: true });\n\n      }\n      catch (e) {\n        console.log(e);\n        this.alert('Domain is not linked to the DID')\n        document.getElementById(\"verify\").innerHTML = \"Retry ↻  \";\n        button.style['background-color'] = \"#DC4C64\";\n\n        document.getElementById(\"verify\").disabled = false;\n        this.loader(false)\n      }\n    },\n\n    // async Verify() {\n    //   try {\n\n\n    //     this.loader(true)\n\n    //     const resolveDID = 'https://' + this.domain + '/.well-known/did.json'\n    //     const resolveDIDConfig = 'https://' + this.domain + '/.well-known/did-configuration.json'\n\n    //     const didDocument = await this.fetch(resolveDID)\n    //     const didConfiguration = await this.fetch(resolveDIDConfig)\n    //     if (didDocument.id != JSON.parse(localStorage.getItem('didDocument')).id) {\n    //       this.alert('Domain is not linked to the DID')\n    //       document.getElementById(\"verify\").innerHTML = \"Retry ↻  \";\n\n    //       return\n    //     }\n\n    //     const credential = didConfiguration.linked_dids[0]\n    //     if (credential.credentialSubject.id != didDocument.id) {\n    //       this.alert('Domain is not linked to the DID')\n    //       document.getElementById(\"verify\").innerHTML = \"Retry ↻  \";\n\n    //       return\n    //     }\n    //     if (credential.credentialSubject.id != credential.credentialSubject.id) {\n    //       this.alert('DidConfiguration is not linked to the DID')\n    //       document.getElementById(\"verify\").innerHTML = \"Retry ↻  \";\n\n    //       return\n    //     }\n\n    //     if (credential.credentialSubject.origin != this.domain) {\n    //       this.alert('Domain is not linked to the DID')\n    //       document.getElementById(\"verify\").innerHTML = \"Retry ↻  \";\n\n    //       return\n    //     }\n\n\n    //     // verify the credential\n    //     await this.VerifyCredentials(credential, didDocument).then(async (result) => {\n    //       console.log(result);\n    //       if (result.verified) {\n    //         this.alert('Domain is linked to the DID')\n    //         document.getElementById(\"verify\").innerHTML = \"Verified ✔\";\n    //         document.getElementById(\"verify\").disabled = true;\n    //         document.getElementById(\"verify\").style['background-color'] = \"#14A44D\";\n    //         document.getElementById(\"link\").style.display = \"none\";\n    //         this.loader(false)\n    //         this.status = '✔'\n    //         return this.$emit('can-continue', { value: true });\n    //       } else {\n    //         this.alert('Domain is not linked to the DID')\n    //         document.getElementById(\"verify\").innerHTML = \"Retry ↻  \";\n    //         this.status = '✘'\n\n    //         return this.loader(false)\n    //       }\n    //     })\n    //       .catch((err) => {\n    //         this.alert('Domain is not linked to the DID')\n    //         document.getElementById(\"verify\").innerHTML = \"Retry ↻  \";\n    //         this.status = '✘'\n    //         this.loader(false)\n    //         this.alert(err)\n\n    //         return\n    //       })\n\n\n\n\n\n\n\n\n    //     // var domain = document.getElementById(\"domain\").value;\n    //     //   var button = document.getElementById(\"verify\");\n    //     //   button.innerHTML = \"Processing\";\n    //     //   button.style['background-color']=\"#e4a11b\";\n    //     //   // button.disabled = true;\n    //     //   setTimeout(function(){\n    //     //     button.innerHTML = \"Verified ✔\";\n    //     //     button.style['background-color']=\"#14A44D\";\n    //     //     button.disabled = true;\n    //     //   }, 2000);\n    //     //   setTimeout(function(){\n    //     //     button.innerHTML = \"Retry ↻  \";\n    //     //     button.style['background-color']=\"#DC4C64\";\n\n    //     //   }, 4000);\n    //   } catch (error) {\n    //     this.alert(error)\n    //     document.getElementById(\"verify\").innerHTML = \"Retry ↻  \";\n    //     this.status = '✘'\n    //     this.loader(false)\n\n\n    //   }\n    // },\n\n    async generateDID() {\n      try {\n\n\n        const mnemonic = generateMnemonic()\n        const offlineSigner = await createWallet(mnemonic, 0)\n        const hsDID = new HypersignDID({\n          offlineSigner,\n          namespace: this.namespace,\n          nodeRestEndpoint: this.api,\n          nodeRpcEndpoint: this.rpc\n        });\n        await hsDID.init()\n\n        // seed modidied by hdpath\n        const seed = await generateMnemonicToHDSeed(mnemonic, 0)\n        const keys = await hsDID.generateKeys({\n          seed\n        });\n\n        const didDocument = await hsDID.generate({\n          publicKeyMultibase: keys.publicKeyMultibase,\n        })\n        didDocument.service.push({\n          id: didDocument.id + '#LinkedDomains',\n          type: 'LinkedDomains',\n          serviceEndpoint: 'https://' + this.domain + '/.well-known/did.json',\n\n\n        })\n        didDocument['@context'].push('https://w3id.org/security/suites/ed25519-2020/v1')\n       \n     localStorage.setItem('didDocument', JSON.stringify(didDocument))\n        localStorage.setItem('mnemonic', mnemonic)\n        localStorage.setItem('keys', JSON.stringify(keys))\n\n      } catch (error) {\n        console.log(error);\n\n\n      }\n\n\n    },\n    async signcredential() {\n      const hsCred = new HypersignVerifiableCredential({\n        namespace: this.namespace,\n        nodeRestEndpoint: this.api,\n        nodeRpcEndpoint: this.rpc\n      })\n\n      const did_configuration = await hsCred.generate({\n        subjectDid: JSON.parse(localStorage.getItem('didDocument')).id,\n        type: ['DomainLinkageCredential'],\n        schemaContext: ['https://identity.foundation/.well-known/did-configuration/v1'],\n        issuerDid: JSON.parse(localStorage.getItem('didDocument')).id,\n        expirationDate: new Date('2030-01-01T00:00:02.022Z').toISOString(),\n        fields: {\n          origin: this.domain,\n        },\n\n      })\n      const suite = new Ed25519Signature2020({\n        key: new Ed25519VerificationKey2020({\n          id: JSON.parse(localStorage.getItem('didDocument')).verificationMethod[0].id,\n          controller: JSON.parse(localStorage.getItem('didDocument')).id,\n          publicKeyMultibase: JSON.parse(localStorage.getItem('keys')).publicKeyMultibase,\n          privateKeyMultibase: JSON.parse(localStorage.getItem('keys')).privateKeyMultibase\n\n        }),\n      })\n      const didDocument = JSON.parse(localStorage.getItem('didDocument'))\n      delete did_configuration.credentialStatus\n\n      const signedCredential = await issue({\n        credential: did_configuration,\n        suite: suite,\n        purpose: new purposes.AssertionProofPurpose({\n          controller: {\n            '@context': 'https://w3id.org/security/v2',\n            id: didDocument.id,\n\n            assertionMethod: [didDocument.verificationMethod[0].id]\n          }\n        }),\n        documentLoader: async (url) => {\n\n          return await jsonld.documentLoader(url)\n        }\n      })\n\n      const didConfiguration = {\n        '@context': 'https://identity.foundation/.well-known/did-configuration/v1',\n        'linked_dids': [\n          signedCredential\n        ]\n\n      }\n      localStorage.setItem('didConfiguration', JSON.stringify(didConfiguration))\n    }\n\n  }\n\n}\n</script>\n\n\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n/* Profile section should compact and well styled and match the design center aligned */\n#profile {\n  width: 100%;\n  max-width: 600px;\n  margin: 0 auto;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  margin-top: 20px;\n\n\n}\n\n.form {\n  width: 100%;\n  max-width: 600px;\n  margin: 0 auto;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n}\n\ninput {\n  width: 100%;\n  padding: 10px;\n  box-sizing: border-box;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  margin: 10px 0;\n  font-size: 14px;\n\n}\n\n/* input type file upload buton on right and button looks cool */\n.input_container {\n  border: 1px solid #e5e5e5;\n}\n\ninput[type=file]::file-selector-button {\n  background-color: #fff;\n  color: #000;\n  border: 0px;\n  border-right: 1px solid #e5e5e5;\n  margin-right: 20px;\n  transition: .5s;\n}\n\ninput[type=file]::file-selector-button:hover {\n  background-color: #eee;\n  border: 0px;\n  border-right: 1px solid #e5e5e5;\n}\n\n#verify {\n  background-color: #42b983;\n  display: none;\n}\n\n/* animated button with status change verify to processing and verified and disable */\nbutton {\n  width: 100%;\n  padding: 10px;\n  box-sizing: border-box;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  margin: 10px 0;\n  font-size: 14px;\n  background-color: #054126;\n  color: #fff;\n  cursor: pointer;\n  transition: all 0.3s ease-in-out;\n}\n\nh6 {\n  font-size: small;\n}\n\n#header {\n  text-align: center;\n  font-size: 25px;\n  color: #054126;\n}\n\nh5 {\n  text-align: center;\n}\n\nh1 {\n  font-size: 30px;\n  text-align: center;\n  color: #054126;\n}\n\nh3 {\n  margin: 40px 0 0;\n}\n\nul {\n  list-style-type: none;\n  padding: 0;\n}\n\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\n\na {\n  color: #42b983;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}