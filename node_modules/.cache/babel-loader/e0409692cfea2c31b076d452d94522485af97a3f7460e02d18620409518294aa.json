{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/*!\n * Copyright (c) 2018-2022 Digital Bazaar, Inc. All rights reserved.\n */\n/**\n * Encode/Decode input according to the \"Base64url Encoding\" format as specified\n * in JSON Web Signature (JWS) RFC7517. A URL safe character set is used and\n * trailing '=', line breaks, whitespace, and other characters are omitted.\n *\n * @module base64url-universal\n */\n\nconst _alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';\nconst _alphabetIdx = [62, -1, -1, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, 64, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51];\n\n/**\n * Encodes input according to the \"Base64url Encoding\" format as specified\n * in JSON Web Signature (JWS) RFC7517. A URL safe character set is used and\n * trailing '=', line breaks, whitespace, and other characters are omitted.\n *\n * @alias module:base64url-universal\n * @param {(Uint8Array | string)} input - The data to encode.\n *\n * @returns {string} The encoded value.\n */\nexport function encode(input) {\n  if (!(input instanceof Uint8Array || typeof input === 'string')) {\n    throw new TypeError('\"input\" be a string or Uint8Array.');\n  }\n  if (typeof input === 'string') {\n    // convert input to Uint8Array\n    input = new TextEncoder().encode(input);\n  }\n  let output = '';\n  let chr1;\n  let chr2;\n  let chr3;\n  let i = 0;\n  while (i < input.byteLength) {\n    chr1 = input[i++];\n    chr2 = input[i++];\n    chr3 = input[i++];\n\n    // encode 4 character group\n    output += _alphabet.charAt(chr1 >> 2);\n    output += _alphabet.charAt((chr1 & 3) << 4 | chr2 >> 4);\n    if (!isNaN(chr2)) {\n      output += _alphabet.charAt((chr2 & 15) << 2 | chr3 >> 6);\n      if (!isNaN(chr3)) {\n        output += _alphabet.charAt(chr3 & 63);\n      }\n    }\n  }\n  return output;\n}\n\n/**\n * Decodes input according to the \"Base64url Encoding\" format as specified\n * in JSON Web Signature (JWS) RFC7517. A URL safe character set is used and\n * trailing '=', line breaks, whitespace, and other characters are omitted.\n *\n * @alias module:base64url-universal\n * @param {string} input - The data to decode.\n *\n * @returns {Uint8Array} The decoded value.\n */\nexport function decode(input) {\n  let length = input.length;\n  const mod4 = length % 4;\n  if (mod4 === 1) {\n    throw new Error('Illegal base64 string.');\n  }\n  let diff = 0;\n  if (mod4 > 0) {\n    diff = 4 - mod4;\n    length += diff;\n  }\n  const output = new Uint8Array(length / 4 * 3 - diff);\n  let enc1;\n  let enc2;\n  let enc3;\n  let enc4;\n  let i = 0;\n  let j = 0;\n  while (i < length) {\n    enc1 = _alphabetIdx[input.charCodeAt(i++) - 45];\n    enc2 = _alphabetIdx[input.charCodeAt(i++) - 45];\n    output[j++] = enc1 << 2 | enc2 >> 4;\n    if (i < input.length) {\n      // can decode at least 2 bytes\n      enc3 = _alphabetIdx[input.charCodeAt(i++) - 45];\n      output[j++] = (enc2 & 15) << 4 | enc3 >> 2;\n      if (i < input.length) {\n        // can decode 3 bytes\n        enc4 = _alphabetIdx[input.charCodeAt(i++) - 45];\n        output[j++] = (enc3 & 3) << 6 | enc4;\n      }\n    }\n  }\n  return output;\n}","map":{"version":3,"names":["_alphabet","_alphabetIdx","encode","input","Uint8Array","TypeError","TextEncoder","output","chr1","chr2","chr3","i","byteLength","charAt","isNaN","decode","length","mod4","Error","diff","enc1","enc2","enc3","enc4","j","charCodeAt"],"sources":["/home/pratap/domain-linkege/node_modules/base64url-universal/lib/base64url.js"],"sourcesContent":["/*!\n * Copyright (c) 2018-2022 Digital Bazaar, Inc. All rights reserved.\n */\n/**\n * Encode/Decode input according to the \"Base64url Encoding\" format as specified\n * in JSON Web Signature (JWS) RFC7517. A URL safe character set is used and\n * trailing '=', line breaks, whitespace, and other characters are omitted.\n *\n * @module base64url-universal\n */\n\nconst _alphabet =\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';\nconst _alphabetIdx = [\n  62, -1, -1,\n  52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\n  -1, -1, -1, 64, -1, -1, -1,\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\n  13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\n  -1, -1, -1, -1, 63, -1,\n  26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,\n  39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51\n];\n\n/**\n * Encodes input according to the \"Base64url Encoding\" format as specified\n * in JSON Web Signature (JWS) RFC7517. A URL safe character set is used and\n * trailing '=', line breaks, whitespace, and other characters are omitted.\n *\n * @alias module:base64url-universal\n * @param {(Uint8Array | string)} input - The data to encode.\n *\n * @returns {string} The encoded value.\n */\nexport function encode(input) {\n  if(!((input instanceof Uint8Array) || (typeof input === 'string'))) {\n    throw new TypeError('\"input\" be a string or Uint8Array.');\n  }\n  if(typeof input === 'string') {\n    // convert input to Uint8Array\n    input = new TextEncoder().encode(input);\n  }\n  let output = '';\n  let chr1;\n  let chr2;\n  let chr3;\n  let i = 0;\n  while(i < input.byteLength) {\n    chr1 = input[i++];\n    chr2 = input[i++];\n    chr3 = input[i++];\n\n    // encode 4 character group\n    output += _alphabet.charAt(chr1 >> 2);\n    output += _alphabet.charAt(((chr1 & 3) << 4) | (chr2 >> 4));\n    if(!isNaN(chr2)) {\n      output += _alphabet.charAt(((chr2 & 15) << 2) | (chr3 >> 6));\n      if(!isNaN(chr3)) {\n        output += _alphabet.charAt(chr3 & 63);\n      }\n    }\n  }\n  return output;\n}\n\n/**\n * Decodes input according to the \"Base64url Encoding\" format as specified\n * in JSON Web Signature (JWS) RFC7517. A URL safe character set is used and\n * trailing '=', line breaks, whitespace, and other characters are omitted.\n *\n * @alias module:base64url-universal\n * @param {string} input - The data to decode.\n *\n * @returns {Uint8Array} The decoded value.\n */\nexport function decode(input) {\n  let length = input.length;\n  const mod4 = length % 4;\n  if(mod4 === 1) {\n    throw new Error('Illegal base64 string.');\n  }\n  let diff = 0;\n  if(mod4 > 0) {\n    diff = 4 - mod4;\n    length += diff;\n  }\n\n  const output = new Uint8Array(length / 4 * 3 - diff);\n\n  let enc1;\n  let enc2;\n  let enc3;\n  let enc4;\n  let i = 0;\n  let j = 0;\n\n  while(i < length) {\n    enc1 = _alphabetIdx[input.charCodeAt(i++) - 45];\n    enc2 = _alphabetIdx[input.charCodeAt(i++) - 45];\n\n    output[j++] = (enc1 << 2) | (enc2 >> 4);\n    if(i < input.length) {\n      // can decode at least 2 bytes\n      enc3 = _alphabetIdx[input.charCodeAt(i++) - 45];\n      output[j++] = ((enc2 & 15) << 4) | (enc3 >> 2);\n      if(i < input.length) {\n        // can decode 3 bytes\n        enc4 = _alphabetIdx[input.charCodeAt(i++) - 45];\n        output[j++] = ((enc3 & 3) << 6) | enc4;\n      }\n    }\n  }\n\n  return output;\n}\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,SAAS,GACb,kEAAkE;AACpE,MAAMC,YAAY,GAAG,CACnB,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EACV,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACtC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAC1B,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EACxC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAClD,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EACtB,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAClD,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CACnD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,MAAMA,CAACC,KAAK,EAAE;EAC5B,IAAG,EAAGA,KAAK,YAAYC,UAAU,IAAM,OAAOD,KAAK,KAAK,QAAS,CAAC,EAAE;IAClE,MAAM,IAAIE,SAAS,CAAC,oCAAoC,CAAC;EAC3D;EACA,IAAG,OAAOF,KAAK,KAAK,QAAQ,EAAE;IAC5B;IACAA,KAAK,GAAG,IAAIG,WAAW,CAAC,CAAC,CAACJ,MAAM,CAACC,KAAK,CAAC;EACzC;EACA,IAAII,MAAM,GAAG,EAAE;EACf,IAAIC,IAAI;EACR,IAAIC,IAAI;EACR,IAAIC,IAAI;EACR,IAAIC,CAAC,GAAG,CAAC;EACT,OAAMA,CAAC,GAAGR,KAAK,CAACS,UAAU,EAAE;IAC1BJ,IAAI,GAAGL,KAAK,CAACQ,CAAC,EAAE,CAAC;IACjBF,IAAI,GAAGN,KAAK,CAACQ,CAAC,EAAE,CAAC;IACjBD,IAAI,GAAGP,KAAK,CAACQ,CAAC,EAAE,CAAC;;IAEjB;IACAJ,MAAM,IAAIP,SAAS,CAACa,MAAM,CAACL,IAAI,IAAI,CAAC,CAAC;IACrCD,MAAM,IAAIP,SAAS,CAACa,MAAM,CAAE,CAACL,IAAI,GAAG,CAAC,KAAK,CAAC,GAAKC,IAAI,IAAI,CAAE,CAAC;IAC3D,IAAG,CAACK,KAAK,CAACL,IAAI,CAAC,EAAE;MACfF,MAAM,IAAIP,SAAS,CAACa,MAAM,CAAE,CAACJ,IAAI,GAAG,EAAE,KAAK,CAAC,GAAKC,IAAI,IAAI,CAAE,CAAC;MAC5D,IAAG,CAACI,KAAK,CAACJ,IAAI,CAAC,EAAE;QACfH,MAAM,IAAIP,SAAS,CAACa,MAAM,CAACH,IAAI,GAAG,EAAE,CAAC;MACvC;IACF;EACF;EACA,OAAOH,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASQ,MAAMA,CAACZ,KAAK,EAAE;EAC5B,IAAIa,MAAM,GAAGb,KAAK,CAACa,MAAM;EACzB,MAAMC,IAAI,GAAGD,MAAM,GAAG,CAAC;EACvB,IAAGC,IAAI,KAAK,CAAC,EAAE;IACb,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC3C;EACA,IAAIC,IAAI,GAAG,CAAC;EACZ,IAAGF,IAAI,GAAG,CAAC,EAAE;IACXE,IAAI,GAAG,CAAC,GAAGF,IAAI;IACfD,MAAM,IAAIG,IAAI;EAChB;EAEA,MAAMZ,MAAM,GAAG,IAAIH,UAAU,CAACY,MAAM,GAAG,CAAC,GAAG,CAAC,GAAGG,IAAI,CAAC;EAEpD,IAAIC,IAAI;EACR,IAAIC,IAAI;EACR,IAAIC,IAAI;EACR,IAAIC,IAAI;EACR,IAAIZ,CAAC,GAAG,CAAC;EACT,IAAIa,CAAC,GAAG,CAAC;EAET,OAAMb,CAAC,GAAGK,MAAM,EAAE;IAChBI,IAAI,GAAGnB,YAAY,CAACE,KAAK,CAACsB,UAAU,CAACd,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;IAC/CU,IAAI,GAAGpB,YAAY,CAACE,KAAK,CAACsB,UAAU,CAACd,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;IAE/CJ,MAAM,CAACiB,CAAC,EAAE,CAAC,GAAIJ,IAAI,IAAI,CAAC,GAAKC,IAAI,IAAI,CAAE;IACvC,IAAGV,CAAC,GAAGR,KAAK,CAACa,MAAM,EAAE;MACnB;MACAM,IAAI,GAAGrB,YAAY,CAACE,KAAK,CAACsB,UAAU,CAACd,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;MAC/CJ,MAAM,CAACiB,CAAC,EAAE,CAAC,GAAI,CAACH,IAAI,GAAG,EAAE,KAAK,CAAC,GAAKC,IAAI,IAAI,CAAE;MAC9C,IAAGX,CAAC,GAAGR,KAAK,CAACa,MAAM,EAAE;QACnB;QACAO,IAAI,GAAGtB,YAAY,CAACE,KAAK,CAACsB,UAAU,CAACd,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;QAC/CJ,MAAM,CAACiB,CAAC,EAAE,CAAC,GAAI,CAACF,IAAI,GAAG,CAAC,KAAK,CAAC,GAAIC,IAAI;MACxC;IACF;EACF;EAEA,OAAOhB,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}