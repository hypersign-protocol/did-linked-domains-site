{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/*!\n * Copyright (c) 2020-2022 Digital Bazaar, Inc. All rights reserved.\n */\nimport * as ed25519 from '@noble/ed25519';\n\n// browser MUST provide \"crypto.getRandomValues\"\nconst crypto = self.crypto;\nif (!crypto.getRandomValues) {\n  throw new Error('Browser does not provide \"crypto.getRandomValues\".');\n}\nexport default {\n  async generateKeyPair() {\n    const seed = new Uint8Array(32);\n    crypto.getRandomValues(seed);\n    const keyPair = await generateKeyPairFromSeed(seed);\n    seed.fill(0);\n    return keyPair;\n  },\n  generateKeyPairFromSeed,\n  async sign(secretKey, data) {\n    return ed25519.sign(data, secretKey.slice(0, 32));\n  },\n  async verify(publicKey, data, signature) {\n    return ed25519.verify(signature, data, publicKey);\n  },\n  async sha256digest({\n    data\n  }) {\n    return crypto.subtle.digest('SHA-256', data);\n  }\n};\nasync function generateKeyPairFromSeed(seed) {\n  const publicKey = await ed25519.getPublicKey(seed);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(seed);\n  secretKey.set(publicKey, seed.length);\n  return {\n    publicKey,\n    secretKey\n  };\n}","map":{"version":3,"names":["ed25519","crypto","self","getRandomValues","Error","generateKeyPair","seed","Uint8Array","keyPair","generateKeyPairFromSeed","fill","sign","secretKey","data","slice","verify","publicKey","signature","sha256digest","subtle","digest","getPublicKey","set","length"],"sources":["/home/pratap/hid-ssi-js-sdk/node_modules/@digitalbazaar/ed25519-verification-key-2020/lib/ed25519-browser.js"],"sourcesContent":["/*!\n * Copyright (c) 2020-2022 Digital Bazaar, Inc. All rights reserved.\n */\nimport * as ed25519 from '@noble/ed25519';\n\n// browser MUST provide \"crypto.getRandomValues\"\nconst crypto = self.crypto;\nif(!crypto.getRandomValues) {\n  throw new Error('Browser does not provide \"crypto.getRandomValues\".');\n}\n\nexport default {\n  async generateKeyPair() {\n    const seed = new Uint8Array(32);\n    crypto.getRandomValues(seed);\n    const keyPair = await generateKeyPairFromSeed(seed);\n    seed.fill(0);\n    return keyPair;\n  },\n  generateKeyPairFromSeed,\n  async sign(secretKey, data) {\n    return ed25519.sign(data, secretKey.slice(0, 32));\n  },\n  async verify(publicKey, data, signature) {\n    return ed25519.verify(signature, data, publicKey);\n  },\n  async sha256digest({data}) {\n    return crypto.subtle.digest('SHA-256', data);\n  }\n};\n\nasync function generateKeyPairFromSeed(seed) {\n  const publicKey = await ed25519.getPublicKey(seed);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(seed);\n  secretKey.set(publicKey, seed.length);\n  return {\n    publicKey,\n    secretKey\n  };\n}\n"],"mappings":";;;AAAA;AACA;AACA;AACA,OAAO,KAAKA,OAAO,MAAM,gBAAgB;;AAEzC;AACA,MAAMC,MAAM,GAAGC,IAAI,CAACD,MAAM;AAC1B,IAAG,CAACA,MAAM,CAACE,eAAe,EAAE;EAC1B,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;AACvE;AAEA,eAAe;EACb,MAAMC,eAAeA,CAAA,EAAG;IACtB,MAAMC,IAAI,GAAG,IAAIC,UAAU,CAAC,EAAE,CAAC;IAC/BN,MAAM,CAACE,eAAe,CAACG,IAAI,CAAC;IAC5B,MAAME,OAAO,GAAG,MAAMC,uBAAuB,CAACH,IAAI,CAAC;IACnDA,IAAI,CAACI,IAAI,CAAC,CAAC,CAAC;IACZ,OAAOF,OAAO;EAChB,CAAC;EACDC,uBAAuB;EACvB,MAAME,IAAIA,CAACC,SAAS,EAAEC,IAAI,EAAE;IAC1B,OAAOb,OAAO,CAACW,IAAI,CAACE,IAAI,EAAED,SAAS,CAACE,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;EACnD,CAAC;EACD,MAAMC,MAAMA,CAACC,SAAS,EAAEH,IAAI,EAAEI,SAAS,EAAE;IACvC,OAAOjB,OAAO,CAACe,MAAM,CAACE,SAAS,EAAEJ,IAAI,EAAEG,SAAS,CAAC;EACnD,CAAC;EACD,MAAME,YAAYA,CAAC;IAACL;EAAI,CAAC,EAAE;IACzB,OAAOZ,MAAM,CAACkB,MAAM,CAACC,MAAM,CAAC,SAAS,EAAEP,IAAI,CAAC;EAC9C;AACF,CAAC;AAED,eAAeJ,uBAAuBA,CAACH,IAAI,EAAE;EAC3C,MAAMU,SAAS,GAAG,MAAMhB,OAAO,CAACqB,YAAY,CAACf,IAAI,CAAC;EAClD,MAAMM,SAAS,GAAG,IAAIL,UAAU,CAAC,EAAE,CAAC;EACpCK,SAAS,CAACU,GAAG,CAAChB,IAAI,CAAC;EACnBM,SAAS,CAACU,GAAG,CAACN,SAAS,EAAEV,IAAI,CAACiB,MAAM,CAAC;EACrC,OAAO;IACLP,SAAS;IACTJ;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}