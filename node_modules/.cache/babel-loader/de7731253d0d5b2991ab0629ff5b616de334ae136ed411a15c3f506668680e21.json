{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/es.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/es.typed-array.with.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromHex = exports.toHex = void 0;\nfunction toHex(data) {\n  let out = \"\";\n  for (const byte of data) {\n    out += (\"0\" + byte.toString(16)).slice(-2);\n  }\n  return out;\n}\nexports.toHex = toHex;\nfunction fromHex(hexstring) {\n  if (hexstring.length % 2 !== 0) {\n    throw new Error(\"hex string length must be a multiple of 2\");\n  }\n  const listOfInts = [];\n  for (let i = 0; i < hexstring.length; i += 2) {\n    const hexByteAsString = hexstring.substr(i, 2);\n    if (!hexByteAsString.match(/[0-9a-f]{2}/i)) {\n      throw new Error(\"hex string contains invalid characters\");\n    }\n    listOfInts.push(parseInt(hexByteAsString, 16));\n  }\n  return new Uint8Array(listOfInts);\n}\nexports.fromHex = fromHex;","map":{"version":3,"names":["toHex","data","out","byte","toString","slice","exports","fromHex","hexstring","length","Error","listOfInts","i","hexByteAsString","substr","match","push","parseInt","Uint8Array"],"sources":["../src/hex.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;AAAA,SAAgBA,KAAKA,CAACC,IAAgB;EACpC,IAAIC,GAAG,GAAG,EAAE;EACZ,KAAK,MAAMC,IAAI,IAAIF,IAAI,EAAE;IACvBC,GAAG,IAAI,CAAC,GAAG,GAAGC,IAAI,CAACC,QAAQ,CAAC,EAAE,CAAC,EAAEC,KAAK,CAAC,CAAC,CAAC,CAAC;;EAE5C,OAAOH,GAAG;AACZ;AANAI,OAAA,CAAAN,KAAA,GAAAA,KAAA;AAQA,SAAgBO,OAAOA,CAACC,SAAiB;EACvC,IAAIA,SAAS,CAACC,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;IAC9B,MAAM,IAAIC,KAAK,CAAC,2CAA2C,CAAC;;EAG9D,MAAMC,UAAU,GAAa,EAAE;EAC/B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,SAAS,CAACC,MAAM,EAAEG,CAAC,IAAI,CAAC,EAAE;IAC5C,MAAMC,eAAe,GAAGL,SAAS,CAACM,MAAM,CAACF,CAAC,EAAE,CAAC,CAAC;IAC9C,IAAI,CAACC,eAAe,CAACE,KAAK,CAAC,cAAc,CAAC,EAAE;MAC1C,MAAM,IAAIL,KAAK,CAAC,wCAAwC,CAAC;;IAE3DC,UAAU,CAACK,IAAI,CAACC,QAAQ,CAACJ,eAAe,EAAE,EAAE,CAAC,CAAC;;EAEhD,OAAO,IAAIK,UAAU,CAACP,UAAU,CAAC;AACnC;AAdAL,OAAA,CAAAC,OAAA,GAAAA,OAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}