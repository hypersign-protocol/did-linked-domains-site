{"ast":null,"code":"\"use strict\";\n\nvar _classPrivateFieldInitSpec = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _classPrivateFieldGet = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateFieldGet.js\").default;\nvar _classPrivateFieldSet = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateFieldSet.js\").default;\nvar _defineProperty = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContractEventPayload = exports.ContractUnknownEventPayload = exports.ContractTransactionResponse = exports.ContractTransactionReceipt = exports.EventLog = void 0;\n// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\nconst provider_js_1 = require(\"../providers/provider.js\");\nconst index_js_1 = require(\"../utils/index.js\");\n/**\n *  An **EventLog** contains additional properties parsed from the [[Log]].\n */\nclass EventLog extends provider_js_1.Log {\n  /**\n   * @_ignore:\n   */\n  constructor(log, iface, fragment) {\n    super(log, log.provider);\n    /**\n     *  The Contract Interface.\n     */\n    _defineProperty(this, \"interface\", void 0);\n    /**\n     *  The matching event.\n     */\n    _defineProperty(this, \"fragment\", void 0);\n    /**\n     *  The parsed arguments passed to the event by ``emit``.\n     */\n    _defineProperty(this, \"args\", void 0);\n    const args = iface.decodeEventLog(fragment, log.data, log.topics);\n    (0, index_js_1.defineProperties)(this, {\n      args,\n      fragment,\n      interface: iface\n    });\n  }\n  /**\n   *  The name of the event.\n   */\n  get eventName() {\n    return this.fragment.name;\n  }\n  /**\n   *  The signature of the event.\n   */\n  get eventSignature() {\n    return this.fragment.format();\n  }\n}\nexports.EventLog = EventLog;\n/**\n *  A **ContractTransactionReceipt** includes the parsed logs from a\n *  [[TransactionReceipt]].\n */\nvar _iface = /*#__PURE__*/new WeakMap();\nclass ContractTransactionReceipt extends provider_js_1.TransactionReceipt {\n  /**\n   *  @_ignore:\n   */\n  constructor(iface, provider, tx) {\n    super(tx, provider);\n    _classPrivateFieldInitSpec(this, _iface, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _iface, iface);\n  }\n  /**\n   *  The parsed logs for any [[Log]] which has a matching event in the\n   *  Contract ABI.\n   */\n  get logs() {\n    return super.logs.map(log => {\n      const fragment = log.topics.length ? _classPrivateFieldGet(this, _iface).getEvent(log.topics[0]) : null;\n      if (fragment) {\n        return new EventLog(log, _classPrivateFieldGet(this, _iface), fragment);\n      } else {\n        return log;\n      }\n    });\n  }\n}\nexports.ContractTransactionReceipt = ContractTransactionReceipt;\n/**\n *  A **ContractTransactionResponse** will return a\n *  [[ContractTransactionReceipt]] when waited on.\n */\nvar _iface2 = /*#__PURE__*/new WeakMap();\nclass ContractTransactionResponse extends provider_js_1.TransactionResponse {\n  /**\n   *  @_ignore:\n   */\n  constructor(iface, provider, tx) {\n    super(tx, provider);\n    _classPrivateFieldInitSpec(this, _iface2, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _iface2, iface);\n  }\n  /**\n   *  Resolves once this transaction has been mined and has\n   *  %%confirms%% blocks including it (default: ``1``) with an\n   *  optional %%timeout%%.\n   *\n   *  This can resolve to ``null`` only if %%confirms%% is ``0``\n   *  and the transaction has not been mined, otherwise this will\n   *  wait until enough confirmations have completed.\n   */\n  async wait(confirms) {\n    const receipt = await super.wait(confirms);\n    if (receipt == null) {\n      return null;\n    }\n    return new ContractTransactionReceipt(_classPrivateFieldGet(this, _iface2), this.provider, receipt);\n  }\n}\nexports.ContractTransactionResponse = ContractTransactionResponse;\n/**\n *  A **ContractUnknownEventPayload** is included as the last parameter to\n *  Contract Events when the event does not match any events in the ABI.\n */\nclass ContractUnknownEventPayload extends index_js_1.EventPayload {\n  /**\n   *  @_event:\n   */\n  constructor(contract, listener, filter, log) {\n    super(contract, listener, filter);\n    /**\n     *  The log with no matching events.\n     */\n    _defineProperty(this, \"log\", void 0);\n    (0, index_js_1.defineProperties)(this, {\n      log\n    });\n  }\n  /**\n   *  Resolves to the block the event occured in.\n   */\n  async getBlock() {\n    return await this.log.getBlock();\n  }\n  /**\n   *  Resolves to the transaction the event occured in.\n   */\n  async getTransaction() {\n    return await this.log.getTransaction();\n  }\n  /**\n   *  Resolves to the transaction receipt the event occured in.\n   */\n  async getTransactionReceipt() {\n    return await this.log.getTransactionReceipt();\n  }\n}\nexports.ContractUnknownEventPayload = ContractUnknownEventPayload;\n/**\n *  A **ContractEventPayload** is included as the last parameter to\n *  Contract Events when the event is known.\n */\nclass ContractEventPayload extends ContractUnknownEventPayload {\n  /**\n   *  @_ignore:\n   */\n  constructor(contract, listener, filter, fragment, _log) {\n    super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));\n    const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);\n    (0, index_js_1.defineProperties)(this, {\n      args,\n      fragment\n    });\n  }\n  /**\n   *  The event name.\n   */\n  get eventName() {\n    return this.fragment.name;\n  }\n  /**\n   *  The event signature.\n   */\n  get eventSignature() {\n    return this.fragment.format();\n  }\n}\nexports.ContractEventPayload = ContractEventPayload;","map":{"version":3,"names":["provider_js_1","require","index_js_1","EventLog","Log","constructor","log","iface","fragment","provider","_defineProperty","args","decodeEventLog","data","topics","defineProperties","interface","eventName","name","eventSignature","format","exports","_iface","WeakMap","ContractTransactionReceipt","TransactionReceipt","tx","_classPrivateFieldInitSpec","writable","value","_classPrivateFieldSet","logs","map","length","_classPrivateFieldGet","getEvent","_iface2","ContractTransactionResponse","TransactionResponse","wait","confirms","receipt","ContractUnknownEventPayload","EventPayload","contract","listener","filter","getBlock","getTransaction","getTransactionReceipt","ContractEventPayload","_log"],"sources":["../../src.ts/contract/wrappers.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}