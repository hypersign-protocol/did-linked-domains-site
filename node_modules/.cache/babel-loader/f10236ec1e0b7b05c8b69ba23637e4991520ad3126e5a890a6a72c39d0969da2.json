{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/*!\n * Copyright (c) 2022 Digital Bazaar, Inc. All rights reserved.\n */\n\n/**\n * Asserts that key bytes have a type of Uint8Array and a specific length.\n *\n * @throws {TypeError|SyntaxError} - Throws a Type or Syntax error.\n *\n * @param {object} options - Options to use.\n * @param {Uint8Array} options.bytes - The bytes being checked.\n * @param {number} [options.expectedLength=32] - The expected bytes length.\n * @param {string} [options.code] - An optional code for the error.\n *\n * @returns {undefined} Returns on success throws on error.\n */\nexport function assertKeyBytes({\n  bytes,\n  expectedLength = 32,\n  code\n}) {\n  if (!(bytes instanceof Uint8Array)) {\n    throw new TypeError('\"bytes\" must be a Uint8Array.');\n  }\n  if (bytes.length !== expectedLength) {\n    const error = new Error(`\"bytes\" must be a ${expectedLength}-byte Uint8Array.`);\n    // we need DataError for invalid byte length\n    error.name = 'DataError';\n    // add the error code from the did:key spec if provided\n    if (code) {\n      error.code = code;\n    }\n    throw error;\n  }\n}","map":{"version":3,"names":["assertKeyBytes","bytes","expectedLength","code","Uint8Array","TypeError","length","error","Error","name"],"sources":["/home/pratap/did-linked-domain/node_modules/@digitalbazaar/ed25519-verification-key-2020/lib/validators.js"],"sourcesContent":["/*!\n * Copyright (c) 2022 Digital Bazaar, Inc. All rights reserved.\n */\n\n/**\n * Asserts that key bytes have a type of Uint8Array and a specific length.\n *\n * @throws {TypeError|SyntaxError} - Throws a Type or Syntax error.\n *\n * @param {object} options - Options to use.\n * @param {Uint8Array} options.bytes - The bytes being checked.\n * @param {number} [options.expectedLength=32] - The expected bytes length.\n * @param {string} [options.code] - An optional code for the error.\n *\n * @returns {undefined} Returns on success throws on error.\n */\nexport function assertKeyBytes({bytes, expectedLength = 32, code}) {\n  if(!(bytes instanceof Uint8Array)) {\n    throw new TypeError('\"bytes\" must be a Uint8Array.');\n  }\n  if(bytes.length !== expectedLength) {\n    const error = new Error(\n      `\"bytes\" must be a ${expectedLength}-byte Uint8Array.`);\n    // we need DataError for invalid byte length\n    error.name = 'DataError';\n    // add the error code from the did:key spec if provided\n    if(code) {\n      error.code = code;\n    }\n    throw error;\n  }\n}\n"],"mappings":";;;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,cAAcA,CAAC;EAACC,KAAK;EAAEC,cAAc,GAAG,EAAE;EAAEC;AAAI,CAAC,EAAE;EACjE,IAAG,EAAEF,KAAK,YAAYG,UAAU,CAAC,EAAE;IACjC,MAAM,IAAIC,SAAS,CAAC,+BAA+B,CAAC;EACtD;EACA,IAAGJ,KAAK,CAACK,MAAM,KAAKJ,cAAc,EAAE;IAClC,MAAMK,KAAK,GAAG,IAAIC,KAAK,CACpB,qBAAoBN,cAAe,mBAAkB,CAAC;IACzD;IACAK,KAAK,CAACE,IAAI,GAAG,WAAW;IACxB;IACA,IAAGN,IAAI,EAAE;MACPI,KAAK,CAACJ,IAAI,GAAGA,IAAI;IACnB;IACA,MAAMI,KAAK;EACb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}