{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HIDClient = void 0;\nconst stargate_1 = require(\"@cosmjs/stargate\");\nconst math_1 = require(\"@cosmjs/math\");\nconst rpcFactory_1 = require(\"../rpcFactory\");\nconst constants_1 = require(\"../constants\");\nconst utils_1 = __importDefault(require(\"../utils\"));\nconst {\n  HYPERSIGN_TESTNET_RPC,\n  HYPERSIGN_TESTNET_REST,\n  HYPERSIGN_MAINNET_RPC,\n  HYPERSIGN_MAINNET_REST,\n  HIDRpcEnums\n} = require('../constants');\nclass HIDClient {\n  constructor(signer, hidNodeEndpoint,\n  // 'TEST' | 'MAIN' | <custom node url>\n  hidNodeRestEndpoint) {\n    this.signer = signer;\n    this.registry = new rpcFactory_1.HIDRpcFactory();\n    if (!hidNodeEndpoint) {\n      throw new Error(\"HID-SSI-SDK:: Error: HID Node enpoint must be passed. Possible values:  'TEST' | 'MAIN' | <custom node url>\");\n    }\n    if (hidNodeEndpoint === 'TEST') {\n      HIDClient.hidNodeEndpoint = utils_1.default.checkUrl(HYPERSIGN_TESTNET_RPC);\n      HIDClient.hidNodeRestEndpoint = utils_1.default.checkUrl(HYPERSIGN_TESTNET_REST);\n    } else if (hidNodeEndpoint === 'MAIN') {\n      HIDClient.hidNodeEndpoint = utils_1.default.checkUrl(HYPERSIGN_MAINNET_RPC);\n      HIDClient.hidNodeRestEndpoint = utils_1.default.checkUrl(HYPERSIGN_MAINNET_REST);\n    } else {\n      HIDClient.hidNodeEndpoint = utils_1.default.checkUrl(hidNodeEndpoint);\n      if (!hidNodeRestEndpoint) {\n        throw new Error('HID-SSI-SDK:: Error: HID node REST endpoint can not be empty for custom network');\n      }\n      HIDClient.hidNodeRestEndpoint = utils_1.default.checkUrl(hidNodeRestEndpoint);\n    }\n  }\n  init() {\n    return __awaiter(this, void 0, void 0, function* () {\n      Object.keys(HIDRpcEnums).forEach(rpc => {\n        this.registry.registerRpc(HIDRpcEnums[rpc]);\n      });\n      const gasPrice = new stargate_1.GasPrice(math_1.Decimal.fromUserInput(constants_1.GAS_PRICE, constants_1.HID_DECIMAL), constants_1.HID_DNOMINATION);\n      HIDClient.hidNodeClient = yield stargate_1.SigningStargateClient.connectWithSigner(HIDClient.hidNodeEndpoint, this.signer, {\n        gasPrice,\n        registry: this.registry.hidRPCRegistery\n      });\n      const accounts = yield this.signer.getAccounts();\n      HIDClient.hidWalletAddress = accounts[0].address;\n    });\n  }\n  static getHidClient() {\n    return HIDClient.hidNodeClient;\n  }\n  static getHidWalletAddress() {\n    return HIDClient.hidWalletAddress;\n  }\n}\nexports.HIDClient = HIDClient;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__importDefault","mod","__esModule","Object","defineProperty","exports","HIDClient","stargate_1","require","math_1","rpcFactory_1","constants_1","utils_1","HYPERSIGN_TESTNET_RPC","HYPERSIGN_TESTNET_REST","HYPERSIGN_MAINNET_RPC","HYPERSIGN_MAINNET_REST","HIDRpcEnums","constructor","signer","hidNodeEndpoint","hidNodeRestEndpoint","registry","HIDRpcFactory","Error","default","checkUrl","init","keys","forEach","rpc","registerRpc","gasPrice","GasPrice","Decimal","fromUserInput","GAS_PRICE","HID_DECIMAL","HID_DNOMINATION","hidNodeClient","SigningStargateClient","connectWithSigner","hidRPCRegistery","accounts","getAccounts","hidWalletAddress","address","getHidClient","getHidWalletAddress"],"sources":["/home/pratap/hid-ssi-js-sdk/build/src/hid/client.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HIDClient = void 0;\nconst stargate_1 = require(\"@cosmjs/stargate\");\nconst math_1 = require(\"@cosmjs/math\");\nconst rpcFactory_1 = require(\"../rpcFactory\");\nconst constants_1 = require(\"../constants\");\nconst utils_1 = __importDefault(require(\"../utils\"));\nconst { HYPERSIGN_TESTNET_RPC, HYPERSIGN_TESTNET_REST, HYPERSIGN_MAINNET_RPC, HYPERSIGN_MAINNET_REST, HIDRpcEnums, } = require('../constants');\nclass HIDClient {\n    constructor(signer, hidNodeEndpoint, // 'TEST' | 'MAIN' | <custom node url>\n    hidNodeRestEndpoint) {\n        this.signer = signer;\n        this.registry = new rpcFactory_1.HIDRpcFactory();\n        if (!hidNodeEndpoint) {\n            throw new Error(\"HID-SSI-SDK:: Error: HID Node enpoint must be passed. Possible values:  'TEST' | 'MAIN' | <custom node url>\");\n        }\n        if (hidNodeEndpoint === 'TEST') {\n            HIDClient.hidNodeEndpoint = utils_1.default.checkUrl(HYPERSIGN_TESTNET_RPC);\n            HIDClient.hidNodeRestEndpoint = utils_1.default.checkUrl(HYPERSIGN_TESTNET_REST);\n        }\n        else if (hidNodeEndpoint === 'MAIN') {\n            HIDClient.hidNodeEndpoint = utils_1.default.checkUrl(HYPERSIGN_MAINNET_RPC);\n            HIDClient.hidNodeRestEndpoint = utils_1.default.checkUrl(HYPERSIGN_MAINNET_REST);\n        }\n        else {\n            HIDClient.hidNodeEndpoint = utils_1.default.checkUrl(hidNodeEndpoint);\n            if (!hidNodeRestEndpoint) {\n                throw new Error('HID-SSI-SDK:: Error: HID node REST endpoint can not be empty for custom network');\n            }\n            HIDClient.hidNodeRestEndpoint = utils_1.default.checkUrl(hidNodeRestEndpoint);\n        }\n    }\n    init() {\n        return __awaiter(this, void 0, void 0, function* () {\n            Object.keys(HIDRpcEnums).forEach((rpc) => {\n                this.registry.registerRpc(HIDRpcEnums[rpc]);\n            });\n            const gasPrice = new stargate_1.GasPrice(math_1.Decimal.fromUserInput(constants_1.GAS_PRICE, constants_1.HID_DECIMAL), constants_1.HID_DNOMINATION);\n            HIDClient.hidNodeClient = yield stargate_1.SigningStargateClient.connectWithSigner(HIDClient.hidNodeEndpoint, this.signer, {\n                gasPrice,\n                registry: this.registry.hidRPCRegistery,\n            });\n            const accounts = yield this.signer.getAccounts();\n            HIDClient.hidWalletAddress = accounts[0].address;\n        });\n    }\n    static getHidClient() {\n        return HIDClient.hidNodeClient;\n    }\n    static getHidWalletAddress() {\n        return HIDClient.hidWalletAddress;\n    }\n}\nexports.HIDClient = HIDClient;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}