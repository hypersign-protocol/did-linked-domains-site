{"ast":null,"code":"/*!\n * Copyright (c) 2019-2023 Digital Bazaar, Inc. All rights reserved.\n */\nimport jsigs from 'jsonld-signatures';\nimport jsonld from 'jsonld';\nconst {\n  purposes: {\n    AssertionProofPurpose\n  }\n} = jsigs;\n\n/**\n * Creates a proof purpose that will validate whether or not the verification\n * method in a proof was authorized by its declared controller for the\n * proof's purpose.\n */\nexport class CredentialIssuancePurpose extends AssertionProofPurpose {\n  /**\n   * @param {object} options - The options to use.\n   * @param {object} [options.controller] - The description of the controller,\n   *   if it is not to be dereferenced via a `documentLoader`.\n   * @param {string|Date|number} [options.date] - The expected date for\n   *   the creation of the proof.\n   * @param {number} [options.maxTimestampDelta=Infinity] - A maximum number\n   *   of seconds that the date on the signature can deviate from.\n   */\n  constructor({\n    controller,\n    date,\n    maxTimestampDelta\n  } = {}) {\n    super({\n      controller,\n      date,\n      maxTimestampDelta\n    });\n  }\n\n  /**\n   * Validates the purpose of a proof. This method is called during\n   * proof verification, after the proof value has been checked against the\n   * given verification method (in the case of a digital signature, the\n   * signature has been cryptographically verified against the public key).\n   *\n   * @param {object} proof - The proof to validate.\n   * @param {object} options - The options to use.\n   * @param {object} options.document - The document whose signature is\n   *   being verified.\n   * @param {object} options.suite - Signature suite used in\n   *   the proof.\n   * @param {string} options.verificationMethod - Key id URL to the paired\n   *   public key.\n   * @param {object} [options.documentLoader] - A document loader.\n   *\n   * @throws {Error} If verification method not authorized by controller.\n   * @throws {Error} If proof's created timestamp is out of range.\n   *\n   * @returns {Promise<{valid: boolean, error: Error}>} Resolves on completion.\n   */\n  async validate(proof, {\n    document,\n    suite,\n    verificationMethod,\n    documentLoader\n  }) {\n    try {\n      const result = await super.validate(proof, {\n        document,\n        suite,\n        verificationMethod,\n        documentLoader\n      });\n      if (!result.valid) {\n        throw result.error;\n      }\n      const issuer = jsonld.getValues(document, 'issuer');\n      if (!issuer || issuer.length === 0) {\n        throw new Error('Credential issuer is required.');\n      }\n      const issuerId = typeof issuer[0] === 'string' ? issuer[0] : issuer[0].id;\n      if (result.controller.id !== issuerId) {\n        throw new Error('Credential issuer must match the verification method controller.');\n      }\n      return {\n        valid: true\n      };\n    } catch (error) {\n      return {\n        valid: false,\n        error\n      };\n    }\n  }\n}","map":{"version":3,"names":["jsigs","jsonld","purposes","AssertionProofPurpose","CredentialIssuancePurpose","constructor","controller","date","maxTimestampDelta","validate","proof","document","suite","verificationMethod","documentLoader","result","valid","error","issuer","getValues","length","Error","issuerId","id"],"sources":["/home/pratap/did-linked-domain/node_modules/@digitalbazaar/vc/lib/CredentialIssuancePurpose.js"],"sourcesContent":["/*!\n * Copyright (c) 2019-2023 Digital Bazaar, Inc. All rights reserved.\n */\nimport jsigs from 'jsonld-signatures';\nimport jsonld from 'jsonld';\n\nconst {purposes: {AssertionProofPurpose}} = jsigs;\n\n/**\n * Creates a proof purpose that will validate whether or not the verification\n * method in a proof was authorized by its declared controller for the\n * proof's purpose.\n */\nexport class CredentialIssuancePurpose extends AssertionProofPurpose {\n  /**\n   * @param {object} options - The options to use.\n   * @param {object} [options.controller] - The description of the controller,\n   *   if it is not to be dereferenced via a `documentLoader`.\n   * @param {string|Date|number} [options.date] - The expected date for\n   *   the creation of the proof.\n   * @param {number} [options.maxTimestampDelta=Infinity] - A maximum number\n   *   of seconds that the date on the signature can deviate from.\n   */\n  constructor({controller, date, maxTimestampDelta} = {}) {\n    super({controller, date, maxTimestampDelta});\n  }\n\n  /**\n   * Validates the purpose of a proof. This method is called during\n   * proof verification, after the proof value has been checked against the\n   * given verification method (in the case of a digital signature, the\n   * signature has been cryptographically verified against the public key).\n   *\n   * @param {object} proof - The proof to validate.\n   * @param {object} options - The options to use.\n   * @param {object} options.document - The document whose signature is\n   *   being verified.\n   * @param {object} options.suite - Signature suite used in\n   *   the proof.\n   * @param {string} options.verificationMethod - Key id URL to the paired\n   *   public key.\n   * @param {object} [options.documentLoader] - A document loader.\n   *\n   * @throws {Error} If verification method not authorized by controller.\n   * @throws {Error} If proof's created timestamp is out of range.\n   *\n   * @returns {Promise<{valid: boolean, error: Error}>} Resolves on completion.\n   */\n  async validate(proof, {\n    document, suite, verificationMethod, documentLoader\n  }) {\n    try {\n      const result = await super.validate(proof, {\n        document, suite, verificationMethod, documentLoader\n      });\n\n      if(!result.valid) {\n        throw result.error;\n      }\n\n      const issuer = jsonld.getValues(document, 'issuer');\n\n      if(!issuer || issuer.length === 0) {\n        throw new Error('Credential issuer is required.');\n      }\n\n      const issuerId = typeof issuer[0] === 'string' ? issuer[0] : issuer[0].id;\n\n      if(result.controller.id !== issuerId) {\n        throw new Error(\n          'Credential issuer must match the verification method controller.');\n      }\n\n      return {valid: true};\n    } catch(error) {\n      return {valid: false, error};\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,mBAAmB;AACrC,OAAOC,MAAM,MAAM,QAAQ;AAE3B,MAAM;EAACC,QAAQ,EAAE;IAACC;EAAqB;AAAC,CAAC,GAAGH,KAAK;;AAEjD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,yBAAyB,SAASD,qBAAqB,CAAC;EACnE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,WAAWA,CAAC;IAACC,UAAU;IAAEC,IAAI;IAAEC;EAAiB,CAAC,GAAG,CAAC,CAAC,EAAE;IACtD,KAAK,CAAC;MAACF,UAAU;MAAEC,IAAI;MAAEC;IAAiB,CAAC,CAAC;EAC9C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,QAAQA,CAACC,KAAK,EAAE;IACpBC,QAAQ;IAAEC,KAAK;IAAEC,kBAAkB;IAAEC;EACvC,CAAC,EAAE;IACD,IAAI;MACF,MAAMC,MAAM,GAAG,MAAM,KAAK,CAACN,QAAQ,CAACC,KAAK,EAAE;QACzCC,QAAQ;QAAEC,KAAK;QAAEC,kBAAkB;QAAEC;MACvC,CAAC,CAAC;MAEF,IAAG,CAACC,MAAM,CAACC,KAAK,EAAE;QAChB,MAAMD,MAAM,CAACE,KAAK;MACpB;MAEA,MAAMC,MAAM,GAAGjB,MAAM,CAACkB,SAAS,CAACR,QAAQ,EAAE,QAAQ,CAAC;MAEnD,IAAG,CAACO,MAAM,IAAIA,MAAM,CAACE,MAAM,KAAK,CAAC,EAAE;QACjC,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;MACnD;MAEA,MAAMC,QAAQ,GAAG,OAAOJ,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,GAAGA,MAAM,CAAC,CAAC,CAAC,GAAGA,MAAM,CAAC,CAAC,CAAC,CAACK,EAAE;MAEzE,IAAGR,MAAM,CAACT,UAAU,CAACiB,EAAE,KAAKD,QAAQ,EAAE;QACpC,MAAM,IAAID,KAAK,CACb,kEAAkE,CAAC;MACvE;MAEA,OAAO;QAACL,KAAK,EAAE;MAAI,CAAC;IACtB,CAAC,CAAC,OAAMC,KAAK,EAAE;MACb,OAAO;QAACD,KAAK,EAAE,KAAK;QAAEC;MAAK,CAAC;IAC9B;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}