{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/es.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/es.typed-array.with.js\");\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bip39 = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst bip39 = __importStar(require(\"bip39\"));\nconst englishmnemonic_1 = require(\"./englishmnemonic\");\nclass Bip39 {\n  /**\n   * Encodes raw entropy of length 16, 20, 24, 28 or 32 bytes as an English mnemonic between 12 and 24 words.\n   *\n   * | Entropy            | Words |\n   * |--------------------|-------|\n   * | 128 bit (16 bytes) |    12 |\n   * | 160 bit (20 bytes) |    15 |\n   * | 192 bit (24 bytes) |    18 |\n   * | 224 bit (28 bytes) |    21 |\n   * | 256 bit (32 bytes) |    24 |\n   *\n   *\n   * @see https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki#generating-the-mnemonic\n   * @param entropy The entropy to be encoded. This must be cryptographically secure.\n   */\n  static encode(entropy) {\n    const allowedEntropyLengths = [16, 20, 24, 28, 32];\n    if (allowedEntropyLengths.indexOf(entropy.length) === -1) {\n      throw new Error(\"invalid input length\");\n    }\n    return new englishmnemonic_1.EnglishMnemonic(bip39.entropyToMnemonic((0, encoding_1.toHex)(entropy)));\n  }\n  static decode(mnemonic) {\n    return (0, encoding_1.fromHex)(bip39.mnemonicToEntropy(mnemonic.toString()));\n  }\n  static async mnemonicToSeed(mnemonic, password) {\n    return new Uint8Array(await bip39.mnemonicToSeed(mnemonic.toString(), password));\n  }\n}\nexports.Bip39 = Bip39;","map":{"version":3,"names":["encoding_1","require","bip39","__importStar","englishmnemonic_1","Bip39","encode","entropy","allowedEntropyLengths","indexOf","length","Error","EnglishMnemonic","entropyToMnemonic","toHex","decode","mnemonic","fromHex","mnemonicToEntropy","toString","mnemonicToSeed","password","Uint8Array","exports"],"sources":["../src/bip39.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAAA,UAAA,GAAAC,OAAA;AACA,MAAAC,KAAA,GAAAC,YAAA,CAAAF,OAAA;AAEA,MAAAG,iBAAA,GAAAH,OAAA;AAEA,MAAaI,KAAK;EAChB;;;;;;;;;;;;;;;EAeO,OAAOC,MAAMA,CAACC,OAAmB;IACtC,MAAMC,qBAAqB,GAAsB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IAErE,IAAIA,qBAAqB,CAACC,OAAO,CAACF,OAAO,CAACG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;MACxD,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;;IAGzC,OAAO,IAAIP,iBAAA,CAAAQ,eAAe,CAACV,KAAK,CAACW,iBAAiB,CAAC,IAAAb,UAAA,CAAAc,KAAK,EAACP,OAAO,CAAC,CAAC,CAAC;EACrE;EAEO,OAAOQ,MAAMA,CAACC,QAAyB;IAC5C,OAAO,IAAAhB,UAAA,CAAAiB,OAAO,EAACf,KAAK,CAACgB,iBAAiB,CAACF,QAAQ,CAACG,QAAQ,EAAE,CAAC,CAAC;EAC9D;EAEO,aAAaC,cAAcA,CAACJ,QAAyB,EAAEK,QAAiB;IAC7E,OAAO,IAAIC,UAAU,CAAC,MAAMpB,KAAK,CAACkB,cAAc,CAACJ,QAAQ,CAACG,QAAQ,EAAE,EAAEE,QAAQ,CAAC,CAAC;EAClF;;AAhCFE,OAAA,CAAAlB,KAAA,GAAAA,KAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}