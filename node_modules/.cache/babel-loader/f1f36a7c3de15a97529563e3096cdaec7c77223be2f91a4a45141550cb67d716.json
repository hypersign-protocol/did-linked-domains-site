{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SigningStargateClient = exports.defaultRegistryTypes = void 0;\nconst amino_1 = require(\"@cosmjs/amino\");\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\nconst tendermint_rpc_1 = require(\"@cosmjs/tendermint-rpc\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst tx_1 = require(\"cosmjs-types/cosmos/bank/v1beta1/tx\");\nconst tx_2 = require(\"cosmjs-types/cosmos/distribution/v1beta1/tx\");\nconst tx_3 = require(\"cosmjs-types/cosmos/gov/v1beta1/tx\");\nconst tx_4 = require(\"cosmjs-types/cosmos/staking/v1beta1/tx\");\nconst signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\nconst tx_5 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\nconst tx_6 = require(\"cosmjs-types/ibc/applications/transfer/v1/tx\");\nconst tx_7 = require(\"cosmjs-types/ibc/core/channel/v1/tx\");\nconst tx_8 = require(\"cosmjs-types/ibc/core/client/v1/tx\");\nconst tx_9 = require(\"cosmjs-types/ibc/core/connection/v1/tx\");\nconst long_1 = __importDefault(require(\"long\"));\nconst aminotypes_1 = require(\"./aminotypes\");\nconst fee_1 = require(\"./fee\");\nconst stargateclient_1 = require(\"./stargateclient\");\nexports.defaultRegistryTypes = [[\"/cosmos.bank.v1beta1.MsgMultiSend\", tx_1.MsgMultiSend], [\"/cosmos.distribution.v1beta1.MsgFundCommunityPool\", tx_2.MsgFundCommunityPool], [\"/cosmos.distribution.v1beta1.MsgSetWithdrawAddress\", tx_2.MsgSetWithdrawAddress], [\"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\", tx_2.MsgWithdrawDelegatorReward], [\"/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission\", tx_2.MsgWithdrawValidatorCommission], [\"/cosmos.gov.v1beta1.MsgDeposit\", tx_3.MsgDeposit], [\"/cosmos.gov.v1beta1.MsgSubmitProposal\", tx_3.MsgSubmitProposal], [\"/cosmos.gov.v1beta1.MsgVote\", tx_3.MsgVote], [\"/cosmos.staking.v1beta1.MsgBeginRedelegate\", tx_4.MsgBeginRedelegate], [\"/cosmos.staking.v1beta1.MsgCreateValidator\", tx_4.MsgCreateValidator], [\"/cosmos.staking.v1beta1.MsgDelegate\", tx_4.MsgDelegate], [\"/cosmos.staking.v1beta1.MsgEditValidator\", tx_4.MsgEditValidator], [\"/cosmos.staking.v1beta1.MsgUndelegate\", tx_4.MsgUndelegate], [\"/ibc.core.channel.v1.MsgChannelOpenInit\", tx_7.MsgChannelOpenInit], [\"/ibc.core.channel.v1.MsgChannelOpenTry\", tx_7.MsgChannelOpenTry], [\"/ibc.core.channel.v1.MsgChannelOpenAck\", tx_7.MsgChannelOpenAck], [\"/ibc.core.channel.v1.MsgChannelOpenConfirm\", tx_7.MsgChannelOpenConfirm], [\"/ibc.core.channel.v1.MsgChannelCloseInit\", tx_7.MsgChannelCloseInit], [\"/ibc.core.channel.v1.MsgChannelCloseConfirm\", tx_7.MsgChannelCloseConfirm], [\"/ibc.core.channel.v1.MsgRecvPacket\", tx_7.MsgRecvPacket], [\"/ibc.core.channel.v1.MsgTimeout\", tx_7.MsgTimeout], [\"/ibc.core.channel.v1.MsgTimeoutOnClose\", tx_7.MsgTimeoutOnClose], [\"/ibc.core.channel.v1.MsgAcknowledgement\", tx_7.MsgAcknowledgement], [\"/ibc.core.client.v1.MsgCreateClient\", tx_8.MsgCreateClient], [\"/ibc.core.client.v1.MsgUpdateClient\", tx_8.MsgUpdateClient], [\"/ibc.core.client.v1.MsgUpgradeClient\", tx_8.MsgUpgradeClient], [\"/ibc.core.client.v1.MsgSubmitMisbehaviour\", tx_8.MsgSubmitMisbehaviour], [\"/ibc.core.connection.v1.MsgConnectionOpenInit\", tx_9.MsgConnectionOpenInit], [\"/ibc.core.connection.v1.MsgConnectionOpenTry\", tx_9.MsgConnectionOpenTry], [\"/ibc.core.connection.v1.MsgConnectionOpenAck\", tx_9.MsgConnectionOpenAck], [\"/ibc.core.connection.v1.MsgConnectionOpenConfirm\", tx_9.MsgConnectionOpenConfirm], [\"/ibc.applications.transfer.v1.MsgTransfer\", tx_6.MsgTransfer]];\nfunction createDefaultRegistry() {\n  return new proto_signing_1.Registry(exports.defaultRegistryTypes);\n}\nclass SigningStargateClient extends stargateclient_1.StargateClient {\n  constructor(tmClient, signer, options) {\n    super(tmClient);\n    const {\n      registry = createDefaultRegistry(),\n      aminoTypes = new aminotypes_1.AminoTypes({\n        prefix: options.prefix\n      })\n    } = options;\n    this.registry = registry;\n    this.aminoTypes = aminoTypes;\n    this.signer = signer;\n    this.broadcastTimeoutMs = options.broadcastTimeoutMs;\n    this.broadcastPollIntervalMs = options.broadcastPollIntervalMs;\n    this.gasPrice = options.gasPrice;\n  }\n  static async connectWithSigner(endpoint, signer, options = {}) {\n    const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint);\n    return new SigningStargateClient(tmClient, signer, options);\n  }\n  /**\n   * Creates a client in offline mode.\n   *\n   * This should only be used in niche cases where you know exactly what you're doing,\n   * e.g. when building an offline signing application.\n   *\n   * When you try to use online functionality with such a signer, an\n   * exception will be raised.\n   */\n  static async offline(signer, options = {}) {\n    return new SigningStargateClient(undefined, signer, options);\n  }\n  async simulate(signerAddress, messages, memo) {\n    const anyMsgs = messages.map(m => this.registry.encodeAsAny(m));\n    const accountFromSigner = (await this.signer.getAccounts()).find(account => account.address === signerAddress);\n    if (!accountFromSigner) {\n      throw new Error(\"Failed to retrieve account from signer\");\n    }\n    const pubkey = (0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey);\n    const {\n      sequence\n    } = await this.getSequence(signerAddress);\n    const {\n      gasInfo\n    } = await this.forceGetQueryClient().tx.simulate(anyMsgs, memo, pubkey, sequence);\n    (0, utils_1.assertDefined)(gasInfo);\n    return math_1.Uint53.fromString(gasInfo.gasUsed.toString()).toNumber();\n  }\n  async sendTokens(senderAddress, recipientAddress, amount, fee, memo = \"\") {\n    const sendMsg = {\n      typeUrl: \"/cosmos.bank.v1beta1.MsgSend\",\n      value: {\n        fromAddress: senderAddress,\n        toAddress: recipientAddress,\n        amount: [...amount]\n      }\n    };\n    return this.signAndBroadcast(senderAddress, [sendMsg], fee, memo);\n  }\n  async delegateTokens(delegatorAddress, validatorAddress, amount, fee, memo = \"\") {\n    const delegateMsg = {\n      typeUrl: \"/cosmos.staking.v1beta1.MsgDelegate\",\n      value: tx_4.MsgDelegate.fromPartial({\n        delegatorAddress: delegatorAddress,\n        validatorAddress: validatorAddress,\n        amount: amount\n      })\n    };\n    return this.signAndBroadcast(delegatorAddress, [delegateMsg], fee, memo);\n  }\n  async undelegateTokens(delegatorAddress, validatorAddress, amount, fee, memo = \"\") {\n    const undelegateMsg = {\n      typeUrl: \"/cosmos.staking.v1beta1.MsgUndelegate\",\n      value: tx_4.MsgUndelegate.fromPartial({\n        delegatorAddress: delegatorAddress,\n        validatorAddress: validatorAddress,\n        amount: amount\n      })\n    };\n    return this.signAndBroadcast(delegatorAddress, [undelegateMsg], fee, memo);\n  }\n  async withdrawRewards(delegatorAddress, validatorAddress, fee, memo = \"\") {\n    const withdrawMsg = {\n      typeUrl: \"/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\",\n      value: tx_2.MsgWithdrawDelegatorReward.fromPartial({\n        delegatorAddress: delegatorAddress,\n        validatorAddress: validatorAddress\n      })\n    };\n    return this.signAndBroadcast(delegatorAddress, [withdrawMsg], fee, memo);\n  }\n  async sendIbcTokens(senderAddress, recipientAddress, transferAmount, sourcePort, sourceChannel, timeoutHeight, /** timeout in seconds */\n  timeoutTimestamp, fee, memo = \"\") {\n    const timeoutTimestampNanoseconds = timeoutTimestamp ? long_1.default.fromNumber(timeoutTimestamp).multiply(1000000000) : undefined;\n    const transferMsg = {\n      typeUrl: \"/ibc.applications.transfer.v1.MsgTransfer\",\n      value: tx_6.MsgTransfer.fromPartial({\n        sourcePort: sourcePort,\n        sourceChannel: sourceChannel,\n        sender: senderAddress,\n        receiver: recipientAddress,\n        token: transferAmount,\n        timeoutHeight: timeoutHeight,\n        timeoutTimestamp: timeoutTimestampNanoseconds\n      })\n    };\n    return this.signAndBroadcast(senderAddress, [transferMsg], fee, memo);\n  }\n  async signAndBroadcast(signerAddress, messages, fee, memo = \"\") {\n    let usedFee;\n    if (fee == \"auto\" || typeof fee === \"number\") {\n      (0, utils_1.assertDefined)(this.gasPrice, \"Gas price must be set in the client options when auto gas is used.\");\n      const gasEstimation = await this.simulate(signerAddress, messages, memo);\n      const muliplier = typeof fee === \"number\" ? fee : 1.3;\n      usedFee = (0, fee_1.calculateFee)(Math.round(gasEstimation * muliplier), this.gasPrice);\n    } else {\n      usedFee = fee;\n    }\n    const txRaw = await this.sign(signerAddress, messages, usedFee, memo);\n    const txBytes = tx_5.TxRaw.encode(txRaw).finish();\n    return this.broadcastTx(txBytes, this.broadcastTimeoutMs, this.broadcastPollIntervalMs);\n  }\n  /**\n   * Gets account number and sequence from the API, creates a sign doc,\n   * creates a single signature and assembles the signed transaction.\n   *\n   * The sign mode (SIGN_MODE_DIRECT or SIGN_MODE_LEGACY_AMINO_JSON) is determined by this client's signer.\n   *\n   * You can pass signer data (account number, sequence and chain ID) explicitly instead of querying them\n   * from the chain. This is needed when signing for a multisig account, but it also allows for offline signing\n   * (See the SigningStargateClient.offline constructor).\n   */\n  async sign(signerAddress, messages, fee, memo, explicitSignerData) {\n    let signerData;\n    if (explicitSignerData) {\n      signerData = explicitSignerData;\n    } else {\n      const {\n        accountNumber,\n        sequence\n      } = await this.getSequence(signerAddress);\n      const chainId = await this.getChainId();\n      signerData = {\n        accountNumber: accountNumber,\n        sequence: sequence,\n        chainId: chainId\n      };\n    }\n    return (0, proto_signing_1.isOfflineDirectSigner)(this.signer) ? this.signDirect(signerAddress, messages, fee, memo, signerData) : this.signAmino(signerAddress, messages, fee, memo, signerData);\n  }\n  async signAmino(signerAddress, messages, fee, memo, {\n    accountNumber,\n    sequence,\n    chainId\n  }) {\n    (0, utils_1.assert)(!(0, proto_signing_1.isOfflineDirectSigner)(this.signer));\n    const accountFromSigner = (await this.signer.getAccounts()).find(account => account.address === signerAddress);\n    if (!accountFromSigner) {\n      throw new Error(\"Failed to retrieve account from signer\");\n    }\n    const pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));\n    const signMode = signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON;\n    const msgs = messages.map(msg => this.aminoTypes.toAmino(msg));\n    const signDoc = (0, amino_1.makeSignDoc)(msgs, fee, chainId, memo, accountNumber, sequence);\n    const {\n      signature,\n      signed\n    } = await this.signer.signAmino(signerAddress, signDoc);\n    const signedTxBody = {\n      messages: signed.msgs.map(msg => this.aminoTypes.fromAmino(msg)),\n      memo: signed.memo\n    };\n    const signedTxBodyEncodeObject = {\n      typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n      value: signedTxBody\n    };\n    const signedTxBodyBytes = this.registry.encode(signedTxBodyEncodeObject);\n    const signedGasLimit = math_1.Int53.fromString(signed.fee.gas).toNumber();\n    const signedSequence = math_1.Int53.fromString(signed.sequence).toNumber();\n    const signedAuthInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{\n      pubkey,\n      sequence: signedSequence\n    }], signed.fee.amount, signedGasLimit, signMode);\n    return tx_5.TxRaw.fromPartial({\n      bodyBytes: signedTxBodyBytes,\n      authInfoBytes: signedAuthInfoBytes,\n      signatures: [(0, encoding_1.fromBase64)(signature.signature)]\n    });\n  }\n  async signDirect(signerAddress, messages, fee, memo, {\n    accountNumber,\n    sequence,\n    chainId\n  }) {\n    (0, utils_1.assert)((0, proto_signing_1.isOfflineDirectSigner)(this.signer));\n    const accountFromSigner = (await this.signer.getAccounts()).find(account => account.address === signerAddress);\n    if (!accountFromSigner) {\n      throw new Error(\"Failed to retrieve account from signer\");\n    }\n    const pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));\n    const txBodyEncodeObject = {\n      typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n      value: {\n        messages: messages,\n        memo: memo\n      }\n    };\n    const txBodyBytes = this.registry.encode(txBodyEncodeObject);\n    const gasLimit = math_1.Int53.fromString(fee.gas).toNumber();\n    const authInfoBytes = (0, proto_signing_1.makeAuthInfoBytes)([{\n      pubkey,\n      sequence\n    }], fee.amount, gasLimit);\n    const signDoc = (0, proto_signing_1.makeSignDoc)(txBodyBytes, authInfoBytes, chainId, accountNumber);\n    const {\n      signature,\n      signed\n    } = await this.signer.signDirect(signerAddress, signDoc);\n    return tx_5.TxRaw.fromPartial({\n      bodyBytes: signed.bodyBytes,\n      authInfoBytes: signed.authInfoBytes,\n      signatures: [(0, encoding_1.fromBase64)(signature.signature)]\n    });\n  }\n}\nexports.SigningStargateClient = SigningStargateClient;","map":{"version":3,"names":["amino_1","require","encoding_1","math_1","proto_signing_1","tendermint_rpc_1","utils_1","tx_1","tx_2","tx_3","tx_4","signing_1","tx_5","tx_6","tx_7","tx_8","tx_9","long_1","__importDefault","aminotypes_1","fee_1","stargateclient_1","exports","defaultRegistryTypes","MsgMultiSend","MsgFundCommunityPool","MsgSetWithdrawAddress","MsgWithdrawDelegatorReward","MsgWithdrawValidatorCommission","MsgDeposit","MsgSubmitProposal","MsgVote","MsgBeginRedelegate","MsgCreateValidator","MsgDelegate","MsgEditValidator","MsgUndelegate","MsgChannelOpenInit","MsgChannelOpenTry","MsgChannelOpenAck","MsgChannelOpenConfirm","MsgChannelCloseInit","MsgChannelCloseConfirm","MsgRecvPacket","MsgTimeout","MsgTimeoutOnClose","MsgAcknowledgement","MsgCreateClient","MsgUpdateClient","MsgUpgradeClient","MsgSubmitMisbehaviour","MsgConnectionOpenInit","MsgConnectionOpenTry","MsgConnectionOpenAck","MsgConnectionOpenConfirm","MsgTransfer","createDefaultRegistry","Registry","SigningStargateClient","StargateClient","constructor","tmClient","signer","options","registry","aminoTypes","AminoTypes","prefix","broadcastTimeoutMs","broadcastPollIntervalMs","gasPrice","connectWithSigner","endpoint","Tendermint34Client","connect","offline","undefined","simulate","signerAddress","messages","memo","anyMsgs","map","m","encodeAsAny","accountFromSigner","getAccounts","find","account","address","Error","pubkey","encodeSecp256k1Pubkey","sequence","getSequence","gasInfo","forceGetQueryClient","tx","assertDefined","Uint53","fromString","gasUsed","toString","toNumber","sendTokens","senderAddress","recipientAddress","amount","fee","sendMsg","typeUrl","value","fromAddress","toAddress","signAndBroadcast","delegateTokens","delegatorAddress","validatorAddress","delegateMsg","fromPartial","undelegateTokens","undelegateMsg","withdrawRewards","withdrawMsg","sendIbcTokens","transferAmount","sourcePort","sourceChannel","timeoutHeight","timeoutTimestamp","timeoutTimestampNanoseconds","default","fromNumber","multiply","transferMsg","sender","receiver","token","usedFee","gasEstimation","muliplier","calculateFee","Math","round","txRaw","sign","txBytes","TxRaw","encode","finish","broadcastTx","explicitSignerData","signerData","accountNumber","chainId","getChainId","isOfflineDirectSigner","signDirect","signAmino","assert","encodePubkey","signMode","SignMode","SIGN_MODE_LEGACY_AMINO_JSON","msgs","msg","toAmino","signDoc","makeSignDoc","signature","signed","signedTxBody","fromAmino","signedTxBodyEncodeObject","signedTxBodyBytes","signedGasLimit","Int53","gas","signedSequence","signedAuthInfoBytes","makeAuthInfoBytes","bodyBytes","authInfoBytes","signatures","fromBase64","txBodyEncodeObject","txBodyBytes","gasLimit"],"sources":["../src/signingstargateclient.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}