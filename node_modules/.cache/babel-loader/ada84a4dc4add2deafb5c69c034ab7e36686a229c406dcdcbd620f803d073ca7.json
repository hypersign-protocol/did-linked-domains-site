{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.push.js\");\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.recoverTypedSignature_v4 = exports.recoverTypedSignature = exports.signTypedData_v4 = exports.signTypedData = exports.recoverTypedMessage = exports.signTypedMessage = exports.getEncryptionPublicKey = exports.decryptSafely = exports.decrypt = exports.encryptSafely = exports.encrypt = exports.recoverTypedSignatureLegacy = exports.signTypedDataLegacy = exports.typedSignatureHash = exports.extractPublicKey = exports.recoverPersonalSignature = exports.personalSign = exports.normalize = exports.concatSig = exports.TypedDataUtils = exports.TYPED_MESSAGE_SCHEMA = void 0;\nconst ethUtil = __importStar(require(\"ethereumjs-util\"));\nconst ethAbi = __importStar(require(\"ethereumjs-abi\"));\nconst nacl = __importStar(require(\"tweetnacl\"));\nconst naclUtil = __importStar(require(\"tweetnacl-util\"));\nconst TYPED_MESSAGE_SCHEMA = {\n  type: 'object',\n  properties: {\n    types: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: {\n              type: 'string'\n            },\n            type: {\n              type: 'string'\n            }\n          },\n          required: ['name', 'type']\n        }\n      }\n    },\n    primaryType: {\n      type: 'string'\n    },\n    domain: {\n      type: 'object'\n    },\n    message: {\n      type: 'object'\n    }\n  },\n  required: ['types', 'primaryType', 'domain', 'message']\n};\nexports.TYPED_MESSAGE_SCHEMA = TYPED_MESSAGE_SCHEMA;\n/**\n * A collection of utility functions used for signing typed data\n */\nconst TypedDataUtils = {\n  /**\n   * Encodes an object by encoding and concatenating each of its members\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} data - Object to encode\n   * @param {Object} types - Type definitions\n   * @returns {Buffer} - Encoded representation of an object\n   */\n  encodeData(primaryType, data, types, useV4 = true) {\n    const encodedTypes = ['bytes32'];\n    const encodedValues = [this.hashType(primaryType, types)];\n    if (useV4) {\n      const encodeField = (name, type, value) => {\n        if (types[type] !== undefined) {\n          return ['bytes32', value == null // eslint-disable-line no-eq-null\n          ? '0x0000000000000000000000000000000000000000000000000000000000000000' : ethUtil.keccak(this.encodeData(type, value, types, useV4))];\n        }\n        if (value === undefined) {\n          throw new Error(`missing value for field ${name} of type ${type}`);\n        }\n        if (type === 'bytes') {\n          return ['bytes32', ethUtil.keccak(value)];\n        }\n        if (type === 'string') {\n          // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n          if (typeof value === 'string') {\n            value = Buffer.from(value, 'utf8');\n          }\n          return ['bytes32', ethUtil.keccak(value)];\n        }\n        if (type.lastIndexOf(']') === type.length - 1) {\n          const parsedType = type.slice(0, type.lastIndexOf('['));\n          const typeValuePairs = value.map(item => encodeField(name, parsedType, item));\n          return ['bytes32', ethUtil.keccak(ethAbi.rawEncode(typeValuePairs.map(([t]) => t), typeValuePairs.map(([, v]) => v)))];\n        }\n        return [type, value];\n      };\n      for (const field of types[primaryType]) {\n        const [type, value] = encodeField(field.name, field.type, data[field.name]);\n        encodedTypes.push(type);\n        encodedValues.push(value);\n      }\n    } else {\n      for (const field of types[primaryType]) {\n        let value = data[field.name];\n        if (value !== undefined) {\n          if (field.type === 'bytes') {\n            encodedTypes.push('bytes32');\n            value = ethUtil.keccak(value);\n            encodedValues.push(value);\n          } else if (field.type === 'string') {\n            encodedTypes.push('bytes32');\n            // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n            if (typeof value === 'string') {\n              value = Buffer.from(value, 'utf8');\n            }\n            value = ethUtil.keccak(value);\n            encodedValues.push(value);\n          } else if (types[field.type] !== undefined) {\n            encodedTypes.push('bytes32');\n            value = ethUtil.keccak(this.encodeData(field.type, value, types, useV4));\n            encodedValues.push(value);\n          } else if (field.type.lastIndexOf(']') === field.type.length - 1) {\n            throw new Error('Arrays are unimplemented in encodeData; use V4 extension');\n          } else {\n            encodedTypes.push(field.type);\n            encodedValues.push(value);\n          }\n        }\n      }\n    }\n    return ethAbi.rawEncode(encodedTypes, encodedValues);\n  },\n  /**\n   * Encodes the type of an object by encoding a comma delimited list of its members\n   *\n   * @param {string} primaryType - Root type to encode\n   * @param {Object} types - Type definitions\n   * @returns {string} - Encoded representation of the type of an object\n   */\n  encodeType(primaryType, types) {\n    let result = '';\n    let deps = this.findTypeDependencies(primaryType, types).filter(dep => dep !== primaryType);\n    deps = [primaryType].concat(deps.sort());\n    for (const type of deps) {\n      const children = types[type];\n      if (!children) {\n        throw new Error(`No type definition specified: ${type}`);\n      }\n      result += `${type}(${types[type].map(({\n        name,\n        type: t\n      }) => `${t} ${name}`).join(',')})`;\n    }\n    return result;\n  },\n  /**\n   * Finds all types within a type definition object\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} types - Type definitions\n   * @param {Array} results - current set of accumulated types\n   * @returns {Array} - Set of all types found in the type definition\n   */\n  findTypeDependencies(primaryType, types, results = []) {\n    [primaryType] = primaryType.match(/^\\w*/u);\n    if (results.includes(primaryType) || types[primaryType] === undefined) {\n      return results;\n    }\n    results.push(primaryType);\n    for (const field of types[primaryType]) {\n      for (const dep of this.findTypeDependencies(field.type, types, results)) {\n        !results.includes(dep) && results.push(dep);\n      }\n    }\n    return results;\n  },\n  /**\n   * Hashes an object\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} data - Object to hash\n   * @param {Object} types - Type definitions\n   * @returns {Buffer} - Hash of an object\n   */\n  hashStruct(primaryType, data, types, useV4 = true) {\n    return ethUtil.keccak(this.encodeData(primaryType, data, types, useV4));\n  },\n  /**\n   * Hashes the type of an object\n   *\n   * @param {string} primaryType - Root type to hash\n   * @param {Object} types - Type definitions\n   * @returns {Buffer} - Hash of an object\n   */\n  hashType(primaryType, types) {\n    return ethUtil.keccak(this.encodeType(primaryType, types));\n  },\n  /**\n   * Removes properties from a message object that are not defined per EIP-712\n   *\n   * @param {Object} data - typed message object\n   * @returns {Object} - typed message object with only allowed fields\n   */\n  sanitizeData(data) {\n    const sanitizedData = {};\n    for (const key in TYPED_MESSAGE_SCHEMA.properties) {\n      if (data[key]) {\n        sanitizedData[key] = data[key];\n      }\n    }\n    if ('types' in sanitizedData) {\n      sanitizedData.types = Object.assign({\n        EIP712Domain: []\n      }, sanitizedData.types);\n    }\n    return sanitizedData;\n  },\n  /**\n   * Signs a typed message as per EIP-712 and returns its keccak hash\n   *\n   * @param {Object} typedData - Types message data to sign\n   * @returns {Buffer} - keccak hash of the resulting signed message\n   */\n  sign(typedData, useV4 = true) {\n    const sanitizedData = this.sanitizeData(typedData);\n    const parts = [Buffer.from('1901', 'hex')];\n    parts.push(this.hashStruct('EIP712Domain', sanitizedData.domain, sanitizedData.types, useV4));\n    if (sanitizedData.primaryType !== 'EIP712Domain') {\n      parts.push(this.hashStruct(sanitizedData.primaryType, sanitizedData.message, sanitizedData.types, useV4));\n    }\n    return ethUtil.keccak(Buffer.concat(parts));\n  }\n};\nexports.TypedDataUtils = TypedDataUtils;\nfunction concatSig(v, r, s) {\n  const rSig = ethUtil.fromSigned(r);\n  const sSig = ethUtil.fromSigned(s);\n  const vSig = ethUtil.bufferToInt(v);\n  const rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString('hex'), 64);\n  const sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString('hex'), 64);\n  const vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig));\n  return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex');\n}\nexports.concatSig = concatSig;\nfunction normalize(input) {\n  if (!input) {\n    return undefined;\n  }\n  if (typeof input === 'number') {\n    const buffer = ethUtil.toBuffer(input);\n    input = ethUtil.bufferToHex(buffer);\n  }\n  if (typeof input !== 'string') {\n    let msg = 'eth-sig-util.normalize() requires hex string or integer input.';\n    msg += ` received ${typeof input}: ${input}`;\n    throw new Error(msg);\n  }\n  return ethUtil.addHexPrefix(input.toLowerCase());\n}\nexports.normalize = normalize;\nfunction personalSign(privateKey, msgParams) {\n  const message = ethUtil.toBuffer(msgParams.data);\n  const msgHash = ethUtil.hashPersonalMessage(message);\n  const sig = ethUtil.ecsign(msgHash, privateKey);\n  const serialized = ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n  return serialized;\n}\nexports.personalSign = personalSign;\nfunction recoverPersonalSignature(msgParams) {\n  const publicKey = getPublicKeyFor(msgParams);\n  const sender = ethUtil.publicToAddress(publicKey);\n  const senderHex = ethUtil.bufferToHex(sender);\n  return senderHex;\n}\nexports.recoverPersonalSignature = recoverPersonalSignature;\nfunction extractPublicKey(msgParams) {\n  const publicKey = getPublicKeyFor(msgParams);\n  return `0x${publicKey.toString('hex')}`;\n}\nexports.extractPublicKey = extractPublicKey;\nfunction externalTypedSignatureHash(typedData) {\n  const hashBuffer = typedSignatureHash(typedData);\n  return ethUtil.bufferToHex(hashBuffer);\n}\nexports.typedSignatureHash = externalTypedSignatureHash;\nfunction signTypedDataLegacy(privateKey, msgParams) {\n  const msgHash = typedSignatureHash(msgParams.data);\n  const sig = ethUtil.ecsign(msgHash, privateKey);\n  return ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n}\nexports.signTypedDataLegacy = signTypedDataLegacy;\nfunction recoverTypedSignatureLegacy(msgParams) {\n  const msgHash = typedSignatureHash(msgParams.data);\n  const publicKey = recoverPublicKey(msgHash, msgParams.sig);\n  const sender = ethUtil.publicToAddress(publicKey);\n  return ethUtil.bufferToHex(sender);\n}\nexports.recoverTypedSignatureLegacy = recoverTypedSignatureLegacy;\nfunction encrypt(receiverPublicKey, msgParams, version) {\n  switch (version) {\n    case 'x25519-xsalsa20-poly1305':\n      {\n        if (typeof msgParams.data !== 'string') {\n          throw new Error('Cannot detect secret message, message params should be of the form {data: \"secret message\"} ');\n        }\n        // generate ephemeral keypair\n        const ephemeralKeyPair = nacl.box.keyPair();\n        // assemble encryption parameters - from string to UInt8\n        let pubKeyUInt8Array;\n        try {\n          pubKeyUInt8Array = naclUtil.decodeBase64(receiverPublicKey);\n        } catch (err) {\n          throw new Error('Bad public key');\n        }\n        const msgParamsUInt8Array = naclUtil.decodeUTF8(msgParams.data);\n        const nonce = nacl.randomBytes(nacl.box.nonceLength);\n        // encrypt\n        const encryptedMessage = nacl.box(msgParamsUInt8Array, nonce, pubKeyUInt8Array, ephemeralKeyPair.secretKey);\n        // handle encrypted data\n        const output = {\n          version: 'x25519-xsalsa20-poly1305',\n          nonce: naclUtil.encodeBase64(nonce),\n          ephemPublicKey: naclUtil.encodeBase64(ephemeralKeyPair.publicKey),\n          ciphertext: naclUtil.encodeBase64(encryptedMessage)\n        };\n        // return encrypted msg data\n        return output;\n      }\n    default:\n      throw new Error('Encryption type/version not supported');\n  }\n}\nexports.encrypt = encrypt;\nfunction encryptSafely(receiverPublicKey, msgParams, version) {\n  const DEFAULT_PADDING_LENGTH = 2 ** 11;\n  const NACL_EXTRA_BYTES = 16;\n  const {\n    data\n  } = msgParams;\n  if (!data) {\n    throw new Error('Cannot encrypt empty msg.data');\n  }\n  if (typeof data === 'object' && 'toJSON' in data) {\n    // remove toJSON attack vector\n    // TODO, check all possible children\n    throw new Error('Cannot encrypt with toJSON property.  Please remove toJSON property');\n  }\n  // add padding\n  const dataWithPadding = {\n    data,\n    padding: ''\n  };\n  // calculate padding\n  const dataLength = Buffer.byteLength(JSON.stringify(dataWithPadding), 'utf-8');\n  const modVal = dataLength % DEFAULT_PADDING_LENGTH;\n  let padLength = 0;\n  // Only pad if necessary\n  if (modVal > 0) {\n    padLength = DEFAULT_PADDING_LENGTH - modVal - NACL_EXTRA_BYTES; // nacl extra bytes\n  }\n\n  dataWithPadding.padding = '0'.repeat(padLength);\n  const paddedMsgParams = {\n    data: JSON.stringify(dataWithPadding)\n  };\n  return encrypt(receiverPublicKey, paddedMsgParams, version);\n}\nexports.encryptSafely = encryptSafely;\nfunction decrypt(encryptedData, receiverPrivateKey) {\n  switch (encryptedData.version) {\n    case 'x25519-xsalsa20-poly1305':\n      {\n        // string to buffer to UInt8Array\n        const recieverPrivateKeyUint8Array = nacl_decodeHex(receiverPrivateKey);\n        const recieverEncryptionPrivateKey = nacl.box.keyPair.fromSecretKey(recieverPrivateKeyUint8Array).secretKey;\n        // assemble decryption parameters\n        const nonce = naclUtil.decodeBase64(encryptedData.nonce);\n        const ciphertext = naclUtil.decodeBase64(encryptedData.ciphertext);\n        const ephemPublicKey = naclUtil.decodeBase64(encryptedData.ephemPublicKey);\n        // decrypt\n        const decryptedMessage = nacl.box.open(ciphertext, nonce, ephemPublicKey, recieverEncryptionPrivateKey);\n        // return decrypted msg data\n        let output;\n        try {\n          output = naclUtil.encodeUTF8(decryptedMessage);\n        } catch (err) {\n          throw new Error('Decryption failed.');\n        }\n        if (output) {\n          return output;\n        }\n        throw new Error('Decryption failed.');\n      }\n    default:\n      throw new Error('Encryption type/version not supported.');\n  }\n}\nexports.decrypt = decrypt;\nfunction decryptSafely(encryptedData, receiverPrivateKey) {\n  const dataWithPadding = JSON.parse(decrypt(encryptedData, receiverPrivateKey));\n  return dataWithPadding.data;\n}\nexports.decryptSafely = decryptSafely;\nfunction getEncryptionPublicKey(privateKey) {\n  const privateKeyUint8Array = nacl_decodeHex(privateKey);\n  const encryptionPublicKey = nacl.box.keyPair.fromSecretKey(privateKeyUint8Array).publicKey;\n  return naclUtil.encodeBase64(encryptionPublicKey);\n}\nexports.getEncryptionPublicKey = getEncryptionPublicKey;\n/**\n * A generic entry point for all typed data methods to be passed, includes a version parameter.\n */\nfunction signTypedMessage(privateKey, msgParams, version = 'V4') {\n  switch (version) {\n    case 'V1':\n      return signTypedDataLegacy(privateKey, msgParams);\n    case 'V3':\n      return signTypedData(privateKey, msgParams);\n    case 'V4':\n    default:\n      return signTypedData_v4(privateKey, msgParams);\n  }\n}\nexports.signTypedMessage = signTypedMessage;\nfunction recoverTypedMessage(msgParams, version = 'V4') {\n  switch (version) {\n    case 'V1':\n      return recoverTypedSignatureLegacy(msgParams);\n    case 'V3':\n      return recoverTypedSignature(msgParams);\n    case 'V4':\n    default:\n      return recoverTypedSignature_v4(msgParams);\n  }\n}\nexports.recoverTypedMessage = recoverTypedMessage;\nfunction signTypedData(privateKey, msgParams) {\n  const message = TypedDataUtils.sign(msgParams.data, false);\n  const sig = ethUtil.ecsign(message, privateKey);\n  return ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n}\nexports.signTypedData = signTypedData;\nfunction signTypedData_v4(privateKey, msgParams) {\n  const message = TypedDataUtils.sign(msgParams.data);\n  const sig = ethUtil.ecsign(message, privateKey);\n  return ethUtil.bufferToHex(concatSig(sig.v, sig.r, sig.s));\n}\nexports.signTypedData_v4 = signTypedData_v4;\nfunction recoverTypedSignature(msgParams) {\n  const message = TypedDataUtils.sign(msgParams.data, false);\n  const publicKey = recoverPublicKey(message, msgParams.sig);\n  const sender = ethUtil.publicToAddress(publicKey);\n  return ethUtil.bufferToHex(sender);\n}\nexports.recoverTypedSignature = recoverTypedSignature;\nfunction recoverTypedSignature_v4(msgParams) {\n  const message = TypedDataUtils.sign(msgParams.data);\n  const publicKey = recoverPublicKey(message, msgParams.sig);\n  const sender = ethUtil.publicToAddress(publicKey);\n  return ethUtil.bufferToHex(sender);\n}\nexports.recoverTypedSignature_v4 = recoverTypedSignature_v4;\n/**\n * @param typedData - Array of data along with types, as per EIP712.\n * @returns Buffer\n */\nfunction typedSignatureHash(typedData) {\n  const error = new Error('Expect argument to be non-empty array');\n  if (typeof typedData !== 'object' || !('length' in typedData) || !typedData.length) {\n    throw error;\n  }\n  const data = typedData.map(function (e) {\n    return e.type === 'bytes' ? ethUtil.toBuffer(e.value) : e.value;\n  });\n  const types = typedData.map(function (e) {\n    return e.type;\n  });\n  const schema = typedData.map(function (e) {\n    if (!e.name) {\n      throw error;\n    }\n    return `${e.type} ${e.name}`;\n  });\n  return ethAbi.soliditySHA3(['bytes32', 'bytes32'], [ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema), ethAbi.soliditySHA3(types, data)]);\n}\nfunction recoverPublicKey(hash, sig) {\n  const signature = ethUtil.toBuffer(sig);\n  const sigParams = ethUtil.fromRpcSig(signature);\n  return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s);\n}\nfunction getPublicKeyFor(msgParams) {\n  const message = ethUtil.toBuffer(msgParams.data);\n  const msgHash = ethUtil.hashPersonalMessage(message);\n  return recoverPublicKey(msgHash, msgParams.sig);\n}\nfunction padWithZeroes(number, length) {\n  let myString = `${number}`;\n  while (myString.length < length) {\n    myString = `0${myString}`;\n  }\n  return myString;\n}\n// converts hex strings to the Uint8Array format used by nacl\nfunction nacl_decodeHex(msgHex) {\n  const msgBase64 = Buffer.from(msgHex, 'hex').toString('base64');\n  return naclUtil.decodeBase64(msgBase64);\n}","map":{"version":3,"names":["ethUtil","__importStar","require","ethAbi","nacl","naclUtil","TYPED_MESSAGE_SCHEMA","type","properties","types","additionalProperties","items","name","required","primaryType","domain","message","exports","TypedDataUtils","encodeData","data","useV4","encodedTypes","encodedValues","hashType","encodeField","value","undefined","keccak","Error","Buffer","from","lastIndexOf","length","parsedType","slice","typeValuePairs","map","item","rawEncode","t","v","field","push","encodeType","result","deps","findTypeDependencies","filter","dep","concat","sort","children","join","results","match","includes","hashStruct","sanitizeData","sanitizedData","key","Object","assign","EIP712Domain","sign","typedData","parts","concatSig","r","s","rSig","fromSigned","sSig","vSig","bufferToInt","rStr","padWithZeroes","toUnsigned","toString","sStr","vStr","stripHexPrefix","intToHex","addHexPrefix","normalize","input","buffer","toBuffer","bufferToHex","msg","toLowerCase","personalSign","privateKey","msgParams","msgHash","hashPersonalMessage","sig","ecsign","serialized","recoverPersonalSignature","publicKey","getPublicKeyFor","sender","publicToAddress","senderHex","extractPublicKey","externalTypedSignatureHash","hashBuffer","typedSignatureHash","signTypedDataLegacy","recoverTypedSignatureLegacy","recoverPublicKey","encrypt","receiverPublicKey","version","ephemeralKeyPair","box","keyPair","pubKeyUInt8Array","decodeBase64","err","msgParamsUInt8Array","decodeUTF8","nonce","randomBytes","nonceLength","encryptedMessage","secretKey","output","encodeBase64","ephemPublicKey","ciphertext","encryptSafely","DEFAULT_PADDING_LENGTH","NACL_EXTRA_BYTES","dataWithPadding","padding","dataLength","byteLength","JSON","stringify","modVal","padLength","repeat","paddedMsgParams","decrypt","encryptedData","receiverPrivateKey","recieverPrivateKeyUint8Array","nacl_decodeHex","recieverEncryptionPrivateKey","fromSecretKey","decryptedMessage","open","encodeUTF8","decryptSafely","parse","getEncryptionPublicKey","privateKeyUint8Array","encryptionPublicKey","signTypedMessage","signTypedData","signTypedData_v4","recoverTypedMessage","recoverTypedSignature","recoverTypedSignature_v4","error","e","schema","soliditySHA3","Array","fill","hash","signature","sigParams","fromRpcSig","ecrecover","number","myString","msgHex","msgBase64"],"sources":["../src/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}