{"ast":null,"code":"/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n/* global Node, XMLSerializer */\n'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nconst {\n  RDF_LANGSTRING,\n  RDF_PLAIN_LITERAL,\n  RDF_OBJECT,\n  RDF_XML_LITERAL,\n  XSD_STRING\n} = require('./constants');\nlet _Node;\nif (typeof Node !== 'undefined') {\n  _Node = Node;\n} else {\n  _Node = {\n    ELEMENT_NODE: 1,\n    ATTRIBUTE_NODE: 2,\n    TEXT_NODE: 3,\n    CDATA_SECTION_NODE: 4,\n    ENTITY_REFERENCE_NODE: 5,\n    ENTITY_NODE: 6,\n    PROCESSING_INSTRUCTION_NODE: 7,\n    COMMENT_NODE: 8,\n    DOCUMENT_NODE: 9,\n    DOCUMENT_TYPE_NODE: 10,\n    DOCUMENT_FRAGMENT_NODE: 11,\n    NOTATION_NODE: 12\n  };\n}\nmodule.exports = class Rdfa {\n  /**\n   * Parses the RDF dataset found via the data object from the RDFa API.\n   *\n   * @param data the RDFa API data object.\n   *\n   * @return the RDF dataset.\n   */\n  parse(data) {\n    const dataset = {};\n    dataset['@default'] = [];\n    const subjects = data.getSubjects();\n    for (let si = 0; si < subjects.length; ++si) {\n      const subject = subjects[si];\n      if (subject === null) {\n        continue;\n      }\n\n      // get all related triples\n      const triples = data.getSubjectTriples(subject);\n      if (triples === null) {\n        continue;\n      }\n      const predicates = triples.predicates;\n      for (const predicate in predicates) {\n        // iterate over objects\n        const objects = predicates[predicate].objects;\n        for (let oi = 0; oi < objects.length; ++oi) {\n          const object = objects[oi];\n\n          // create RDF triple\n          const triple = {};\n\n          // add subject\n          if (subject.indexOf('_:') === 0) {\n            triple.subject = {\n              type: 'blank node',\n              value: subject\n            };\n          } else {\n            triple.subject = {\n              type: 'IRI',\n              value: subject\n            };\n          }\n\n          // add predicate\n          if (predicate.indexOf('_:') === 0) {\n            triple.predicate = {\n              type: 'blank node',\n              value: predicate\n            };\n          } else {\n            triple.predicate = {\n              type: 'IRI',\n              value: predicate\n            };\n          }\n\n          // serialize XML literal\n          let value = object.value;\n          if (object.type === RDF_XML_LITERAL) {\n            // initialize XMLSerializer\n            const XMLSerializer = getXMLSerializerClass();\n            const serializer = new XMLSerializer();\n            value = '';\n            for (let x = 0; x < object.value.length; x++) {\n              if (object.value[x].nodeType === _Node.ELEMENT_NODE) {\n                value += serializer.serializeToString(object.value[x]);\n              } else if (object.value[x].nodeType === _Node.TEXT_NODE) {\n                value += object.value[x].nodeValue;\n              }\n            }\n          }\n\n          // add object\n          triple.object = {};\n\n          // object is an IRI\n          if (object.type === RDF_OBJECT) {\n            if (object.value.indexOf('_:') === 0) {\n              triple.object.type = 'blank node';\n            } else {\n              triple.object.type = 'IRI';\n            }\n          } else {\n            // object is a literal\n            triple.object.type = 'literal';\n            if (object.type === RDF_PLAIN_LITERAL) {\n              if (object.language) {\n                triple.object.datatype = RDF_LANGSTRING;\n                triple.object.language = object.language;\n              } else {\n                triple.object.datatype = XSD_STRING;\n              }\n            } else {\n              triple.object.datatype = object.type;\n            }\n          }\n          triple.object.value = value;\n\n          // add triple to dataset in default graph\n          dataset['@default'].push(triple);\n        }\n      }\n    }\n    return dataset;\n  }\n};\nfunction getXMLSerializerClass() {\n  if (typeof XMLSerializer === 'undefined') {\n    return require('xmldom').XMLSerializer;\n  }\n  return XMLSerializer;\n}","map":{"version":3,"names":["require","RDF_LANGSTRING","RDF_PLAIN_LITERAL","RDF_OBJECT","RDF_XML_LITERAL","XSD_STRING","_Node","Node","ELEMENT_NODE","ATTRIBUTE_NODE","TEXT_NODE","CDATA_SECTION_NODE","ENTITY_REFERENCE_NODE","ENTITY_NODE","PROCESSING_INSTRUCTION_NODE","COMMENT_NODE","DOCUMENT_NODE","DOCUMENT_TYPE_NODE","DOCUMENT_FRAGMENT_NODE","NOTATION_NODE","module","exports","Rdfa","parse","data","dataset","subjects","getSubjects","si","length","subject","triples","getSubjectTriples","predicates","predicate","objects","oi","object","triple","indexOf","type","value","XMLSerializer","getXMLSerializerClass","serializer","x","nodeType","serializeToString","nodeValue","language","datatype","push"],"sources":["/home/pratap/hid-ssi-js-sdk/node_modules/ethereumeip712signature2021suite/node_modules/jsonld/lib/Rdfa.js"],"sourcesContent":["/*\n * Copyright (c) 2017 Digital Bazaar, Inc. All rights reserved.\n */\n/* global Node, XMLSerializer */\n'use strict';\n\nconst {\n  RDF_LANGSTRING,\n  RDF_PLAIN_LITERAL,\n  RDF_OBJECT,\n  RDF_XML_LITERAL,\n  XSD_STRING,\n} = require('./constants');\n\nlet _Node;\nif(typeof Node !== 'undefined') {\n  _Node = Node;\n} else {\n  _Node = {\n    ELEMENT_NODE: 1,\n    ATTRIBUTE_NODE: 2,\n    TEXT_NODE: 3,\n    CDATA_SECTION_NODE: 4,\n    ENTITY_REFERENCE_NODE: 5,\n    ENTITY_NODE: 6,\n    PROCESSING_INSTRUCTION_NODE: 7,\n    COMMENT_NODE: 8,\n    DOCUMENT_NODE: 9,\n    DOCUMENT_TYPE_NODE: 10,\n    DOCUMENT_FRAGMENT_NODE: 11,\n    NOTATION_NODE: 12\n  };\n}\n\nmodule.exports = class Rdfa {\n  /**\n   * Parses the RDF dataset found via the data object from the RDFa API.\n   *\n   * @param data the RDFa API data object.\n   *\n   * @return the RDF dataset.\n   */\n  parse(data) {\n    const dataset = {};\n    dataset['@default'] = [];\n\n    const subjects = data.getSubjects();\n    for(let si = 0; si < subjects.length; ++si) {\n      const subject = subjects[si];\n      if(subject === null) {\n        continue;\n      }\n\n      // get all related triples\n      const triples = data.getSubjectTriples(subject);\n      if(triples === null) {\n        continue;\n      }\n      const predicates = triples.predicates;\n      for(const predicate in predicates) {\n        // iterate over objects\n        const objects = predicates[predicate].objects;\n        for(let oi = 0; oi < objects.length; ++oi) {\n          const object = objects[oi];\n\n          // create RDF triple\n          const triple = {};\n\n          // add subject\n          if(subject.indexOf('_:') === 0) {\n            triple.subject = {type: 'blank node', value: subject};\n          } else {\n            triple.subject = {type: 'IRI', value: subject};\n          }\n\n          // add predicate\n          if(predicate.indexOf('_:') === 0) {\n            triple.predicate = {type: 'blank node', value: predicate};\n          } else {\n            triple.predicate = {type: 'IRI', value: predicate};\n          }\n\n          // serialize XML literal\n          let value = object.value;\n          if(object.type === RDF_XML_LITERAL) {\n            // initialize XMLSerializer\n            const XMLSerializer = getXMLSerializerClass();\n            const serializer = new XMLSerializer();\n            value = '';\n            for(let x = 0; x < object.value.length; x++) {\n              if(object.value[x].nodeType === _Node.ELEMENT_NODE) {\n                value += serializer.serializeToString(object.value[x]);\n              } else if(object.value[x].nodeType === _Node.TEXT_NODE) {\n                value += object.value[x].nodeValue;\n              }\n            }\n          }\n\n          // add object\n          triple.object = {};\n\n          // object is an IRI\n          if(object.type === RDF_OBJECT) {\n            if(object.value.indexOf('_:') === 0) {\n              triple.object.type = 'blank node';\n            } else {\n              triple.object.type = 'IRI';\n            }\n          } else {\n            // object is a literal\n            triple.object.type = 'literal';\n            if(object.type === RDF_PLAIN_LITERAL) {\n              if(object.language) {\n                triple.object.datatype = RDF_LANGSTRING;\n                triple.object.language = object.language;\n              } else {\n                triple.object.datatype = XSD_STRING;\n              }\n            } else {\n              triple.object.datatype = object.type;\n            }\n          }\n          triple.object.value = value;\n\n          // add triple to dataset in default graph\n          dataset['@default'].push(triple);\n        }\n      }\n    }\n\n    return dataset;\n  }\n};\n\nfunction getXMLSerializerClass() {\n  if(typeof XMLSerializer === 'undefined') {\n    return require('xmldom').XMLSerializer;\n  }\n  return XMLSerializer;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}