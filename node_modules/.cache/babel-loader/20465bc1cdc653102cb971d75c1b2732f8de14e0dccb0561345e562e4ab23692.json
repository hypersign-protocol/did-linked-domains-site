{"ast":null,"code":"\"use strict\";\n\nvar _classPrivateMethodInitSpec = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateMethodInitSpec.js\").default;\nvar _classPrivateFieldInitSpec = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _defineProperty = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _classPrivateMethodGet = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateMethodGet.js\").default;\nvar _classPrivateFieldGet = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateFieldGet.js\").default;\nvar _classPrivateFieldSet = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateFieldSet.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FixedNumber = void 0;\n/**\n *  The **FixedNumber** class permits using values with decimal places,\n *  using fixed-pont math.\n *\n *  Fixed-point math is still based on integers under-the-hood, but uses an\n *  internal offset to store fractional components below, and each operation\n *  corrects for this after each operation.\n *\n *  @_section: api/utils/fixed-point-math:Fixed-Point Maths  [about-fixed-point-math]\n */\nconst data_js_1 = require(\"./data.js\");\nconst errors_js_1 = require(\"./errors.js\");\nconst maths_js_1 = require(\"./maths.js\");\nconst properties_js_1 = require(\"./properties.js\");\nconst BN_N1 = BigInt(-1);\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_5 = BigInt(5);\nconst _guard = {};\n// Constant to pull zeros from for multipliers\nlet Zeros = \"0000\";\nwhile (Zeros.length < 80) {\n  Zeros += Zeros;\n}\n// Returns a string \"1\" followed by decimal \"0\"s\nfunction getTens(decimals) {\n  let result = Zeros;\n  while (result.length < decimals) {\n    result += result;\n  }\n  return BigInt(\"1\" + result.substring(0, decimals));\n}\nfunction checkValue(val, format, safeOp) {\n  const width = BigInt(format.width);\n  if (format.signed) {\n    const limit = BN_1 << width - BN_1;\n    (0, errors_js_1.assert)(safeOp == null || val >= -limit && val < limit, \"overflow\", \"NUMERIC_FAULT\", {\n      operation: safeOp,\n      fault: \"overflow\",\n      value: val\n    });\n    if (val > BN_0) {\n      val = (0, maths_js_1.fromTwos)((0, maths_js_1.mask)(val, width), width);\n    } else {\n      val = -(0, maths_js_1.fromTwos)((0, maths_js_1.mask)(-val, width), width);\n    }\n  } else {\n    const limit = BN_1 << width;\n    (0, errors_js_1.assert)(safeOp == null || val >= 0 && val < limit, \"overflow\", \"NUMERIC_FAULT\", {\n      operation: safeOp,\n      fault: \"overflow\",\n      value: val\n    });\n    val = (val % limit + limit) % limit & limit - BN_1;\n  }\n  return val;\n}\nfunction getFormat(value) {\n  if (typeof value === \"number\") {\n    value = `fixed128x${value}`;\n  }\n  let signed = true;\n  let width = 128;\n  let decimals = 18;\n  if (typeof value === \"string\") {\n    // Parse the format string\n    if (value === \"fixed\") {\n      // defaults...\n    } else if (value === \"ufixed\") {\n      signed = false;\n    } else {\n      const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n      (0, errors_js_1.assertArgument)(match, \"invalid fixed format\", \"format\", value);\n      signed = match[1] !== \"u\";\n      width = parseInt(match[2]);\n      decimals = parseInt(match[3]);\n    }\n  } else if (value) {\n    // Extract the values from the object\n    const v = value;\n    const check = (key, type, defaultValue) => {\n      if (v[key] == null) {\n        return defaultValue;\n      }\n      (0, errors_js_1.assertArgument)(typeof v[key] === type, \"invalid fixed format (\" + key + \" not \" + type + \")\", \"format.\" + key, v[key]);\n      return v[key];\n    };\n    signed = check(\"signed\", \"boolean\", signed);\n    width = check(\"width\", \"number\", width);\n    decimals = check(\"decimals\", \"number\", decimals);\n  }\n  (0, errors_js_1.assertArgument)(width % 8 === 0, \"invalid FixedNumber width (not byte aligned)\", \"format.width\", width);\n  (0, errors_js_1.assertArgument)(decimals <= 80, \"invalid FixedNumber decimals (too large)\", \"format.decimals\", decimals);\n  const name = (signed ? \"\" : \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n  return {\n    signed,\n    width,\n    decimals,\n    name\n  };\n}\nfunction toString(val, decimals) {\n  let negative = \"\";\n  if (val < BN_0) {\n    negative = \"-\";\n    val *= BN_N1;\n  }\n  let str = val.toString();\n  // No decimal point for whole values\n  if (decimals === 0) {\n    return negative + str;\n  }\n  // Pad out to the whole component (including a whole digit)\n  while (str.length <= decimals) {\n    str = Zeros + str;\n  }\n  // Insert the decimal point\n  const index = str.length - decimals;\n  str = str.substring(0, index) + \".\" + str.substring(index);\n  // Trim the whole component (leaving at least one 0)\n  while (str[0] === \"0\" && str[1] !== \".\") {\n    str = str.substring(1);\n  }\n  // Trim the decimal component (leaving at least one 0)\n  while (str[str.length - 1] === \"0\" && str[str.length - 2] !== \".\") {\n    str = str.substring(0, str.length - 1);\n  }\n  return negative + str;\n}\n/**\n *  A FixedNumber represents a value over its [[FixedFormat]]\n *  arithmetic field.\n *\n *  A FixedNumber can be used to perform math, losslessly, on\n *  values which have decmial places.\n *\n *  A FixedNumber has a fixed bit-width to store values in, and stores all\n *  values internally by multiplying the value by 10 raised to the power of\n *  %%decimals%%.\n *\n *  If operations are performed that cause a value to grow too high (close to\n *  positive infinity) or too low (close to negative infinity), the value\n *  is said to //overflow//.\n *\n *  For example, an 8-bit signed value, with 0 decimals may only be within\n *  the range ``-128`` to ``127``; so ``-128 - 1`` will overflow and become\n *  ``127``. Likewise, ``127 + 1`` will overflow and become ``-127``.\n *\n *  Many operation have a normal and //unsafe// variant. The normal variant\n *  will throw a [[NumericFaultError]] on any overflow, while the //unsafe//\n *  variant will silently allow overflow, corrupting its value value.\n *\n *  If operations are performed that cause a value to become too small\n *  (close to zero), the value loses precison and is said to //underflow//.\n *\n *  For example, an value with 1 decimal place may store a number as small\n *  as ``0.1``, but the value of ``0.1 / 2`` is ``0.05``, which cannot fit\n *  into 1 decimal place, so underflow occurs which means precision is lost\n *  and the value becomes ``0``.\n *\n *  Some operations have a normal and //signalling// variant. The normal\n *  variant will silently ignore underflow, while the //signalling// variant\n *  will thow a [[NumericFaultError]] on underflow.\n */\nvar _format2 = /*#__PURE__*/new WeakMap();\nvar _val = /*#__PURE__*/new WeakMap();\nvar _tens = /*#__PURE__*/new WeakMap();\nvar _checkFormat = /*#__PURE__*/new WeakSet();\nvar _checkValue = /*#__PURE__*/new WeakSet();\nvar _add = /*#__PURE__*/new WeakSet();\nvar _sub = /*#__PURE__*/new WeakSet();\nvar _mul = /*#__PURE__*/new WeakSet();\nvar _div = /*#__PURE__*/new WeakSet();\nclass FixedNumber {\n  // Use this when changing this file to get some typing info,\n  // but then switch to any to mask the internal type\n  //constructor(guard: any, value: bigint, format: _FixedFormat) {\n  /**\n   *  @private\n   */\n  constructor(guard, value, format) {\n    _classPrivateMethodInitSpec(this, _div);\n    _classPrivateMethodInitSpec(this, _mul);\n    _classPrivateMethodInitSpec(this, _sub);\n    _classPrivateMethodInitSpec(this, _add);\n    _classPrivateMethodInitSpec(this, _checkValue);\n    _classPrivateMethodInitSpec(this, _checkFormat);\n    /**\n     *  The specific fixed-point arithmetic field for this value.\n     */\n    _defineProperty(this, \"format\", void 0);\n    _classPrivateFieldInitSpec(this, _format2, {\n      writable: true,\n      value: void 0\n    });\n    // The actual value (accounting for decimals)\n    _classPrivateFieldInitSpec(this, _val, {\n      writable: true,\n      value: void 0\n    });\n    // A base-10 value to multiple values by to maintain the magnitude\n    _classPrivateFieldInitSpec(this, _tens, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     *  This is a property so console.log shows a human-meaningful value.\n     *\n     *  @private\n     */\n    _defineProperty(this, \"_value\", void 0);\n    (0, errors_js_1.assertPrivate)(guard, _guard, \"FixedNumber\");\n    _classPrivateFieldSet(this, _val, value);\n    _classPrivateFieldSet(this, _format2, format);\n    const _value = toString(value, format.decimals);\n    (0, properties_js_1.defineProperties)(this, {\n      format: format.name,\n      _value\n    });\n    _classPrivateFieldSet(this, _tens, getTens(format.decimals));\n  }\n  /**\n   *  If true, negative values are permitted, otherwise only\n   *  positive values and zero are allowed.\n   */\n  get signed() {\n    return _classPrivateFieldGet(this, _format2).signed;\n  }\n  /**\n   *  The number of bits available to store the value.\n   */\n  get width() {\n    return _classPrivateFieldGet(this, _format2).width;\n  }\n  /**\n   *  The number of decimal places in the fixed-point arithment field.\n   */\n  get decimals() {\n    return _classPrivateFieldGet(this, _format2).decimals;\n  }\n  /**\n   *  The value as an integer, based on the smallest unit the\n   *  [[decimals]] allow.\n   */\n  get value() {\n    return _classPrivateFieldGet(this, _val);\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%this%% added\n   *  to %%other%%, ignoring overflow.\n   */\n  addUnsafe(other) {\n    return _classPrivateMethodGet(this, _add, _add2).call(this, other);\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%this%% added\n   *  to %%other%%. A [[NumericFaultError]] is thrown if overflow\n   *  occurs.\n   */\n  add(other) {\n    return _classPrivateMethodGet(this, _add, _add2).call(this, other, \"add\");\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted\n   *  from %%this%%, ignoring overflow.\n   */\n  subUnsafe(other) {\n    return _classPrivateMethodGet(this, _sub, _sub2).call(this, other);\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted\n   *  from %%this%%. A [[NumericFaultError]] is thrown if overflow\n   *  occurs.\n   */\n  sub(other) {\n    return _classPrivateMethodGet(this, _sub, _sub2).call(this, other, \"sub\");\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\n   *  by %%other%%, ignoring overflow and underflow (precision loss).\n   */\n  mulUnsafe(other) {\n    return _classPrivateMethodGet(this, _mul, _mul2).call(this, other);\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\n   *  by %%other%%. A [[NumericFaultError]] is thrown if overflow\n   *  occurs.\n   */\n  mul(other) {\n    return _classPrivateMethodGet(this, _mul, _mul2).call(this, other, \"mul\");\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied\n   *  by %%other%%. A [[NumericFaultError]] is thrown if overflow\n   *  occurs or if underflow (precision loss) occurs.\n   */\n  mulSignal(other) {\n    _classPrivateMethodGet(this, _checkFormat, _checkFormat2).call(this, other);\n    const value = _classPrivateFieldGet(this, _val) * _classPrivateFieldGet(other, _val);\n    (0, errors_js_1.assert)(value % _classPrivateFieldGet(this, _tens) === BN_0, \"precision lost during signalling mul\", \"NUMERIC_FAULT\", {\n      operation: \"mulSignal\",\n      fault: \"underflow\",\n      value: this\n    });\n    return _classPrivateMethodGet(this, _checkValue, _checkValue2).call(this, value / _classPrivateFieldGet(this, _tens), \"mulSignal\");\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%this%% divided\n   *  by %%other%%, ignoring underflow (precision loss). A\n   *  [[NumericFaultError]] is thrown if overflow occurs.\n   */\n  divUnsafe(other) {\n    return _classPrivateMethodGet(this, _div, _div2).call(this, other);\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%this%% divided\n   *  by %%other%%, ignoring underflow (precision loss). A\n   *  [[NumericFaultError]] is thrown if overflow occurs.\n   */\n  div(other) {\n    return _classPrivateMethodGet(this, _div, _div2).call(this, other, \"div\");\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the result of %%this%% divided\n   *  by %%other%%. A [[NumericFaultError]] is thrown if underflow\n   *  (precision loss) occurs.\n   */\n  divSignal(other) {\n    (0, errors_js_1.assert)(_classPrivateFieldGet(other, _val) !== BN_0, \"division by zero\", \"NUMERIC_FAULT\", {\n      operation: \"div\",\n      fault: \"divide-by-zero\",\n      value: this\n    });\n    _classPrivateMethodGet(this, _checkFormat, _checkFormat2).call(this, other);\n    const value = _classPrivateFieldGet(this, _val) * _classPrivateFieldGet(this, _tens);\n    (0, errors_js_1.assert)(value % _classPrivateFieldGet(other, _val) === BN_0, \"precision lost during signalling div\", \"NUMERIC_FAULT\", {\n      operation: \"divSignal\",\n      fault: \"underflow\",\n      value: this\n    });\n    return _classPrivateMethodGet(this, _checkValue, _checkValue2).call(this, value / _classPrivateFieldGet(other, _val), \"divSignal\");\n  }\n  /**\n   *  Returns a comparison result between %%this%% and %%other%%.\n   *\n   *  This is suitable for use in sorting, where ``-1`` implies %%this%%\n   *  is smaller, ``1`` implies %%this%% is larger and ``0`` implies\n   *  both are equal.\n   */\n  cmp(other) {\n    let a = this.value,\n      b = other.value;\n    // Coerce a and b to the same magnitude\n    const delta = this.decimals - other.decimals;\n    if (delta > 0) {\n      b *= getTens(delta);\n    } else if (delta < 0) {\n      a *= getTens(-delta);\n    }\n    // Comnpare\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  }\n  /**\n   *  Returns true if %%other%% is equal to %%this%%.\n   */\n  eq(other) {\n    return this.cmp(other) === 0;\n  }\n  /**\n   *  Returns true if %%other%% is less than to %%this%%.\n   */\n  lt(other) {\n    return this.cmp(other) < 0;\n  }\n  /**\n   *  Returns true if %%other%% is less than or equal to %%this%%.\n   */\n  lte(other) {\n    return this.cmp(other) <= 0;\n  }\n  /**\n   *  Returns true if %%other%% is greater than to %%this%%.\n   */\n  gt(other) {\n    return this.cmp(other) > 0;\n  }\n  /**\n   *  Returns true if %%other%% is greater than or equal to %%this%%.\n   */\n  gte(other) {\n    return this.cmp(other) >= 0;\n  }\n  /**\n   *  Returns a new [[FixedNumber]] which is the largest **integer**\n   *  that is less than or equal to %%this%%.\n   *\n   *  The decimal component of the result will always be ``0``.\n   */\n  floor() {\n    let val = _classPrivateFieldGet(this, _val);\n    if (_classPrivateFieldGet(this, _val) < BN_0) {\n      val -= _classPrivateFieldGet(this, _tens) - BN_1;\n    }\n    val = _classPrivateFieldGet(this, _val) / _classPrivateFieldGet(this, _tens) * _classPrivateFieldGet(this, _tens);\n    return _classPrivateMethodGet(this, _checkValue, _checkValue2).call(this, val, \"floor\");\n  }\n  /**\n   *  Returns a new [[FixedNumber]] which is the smallest **integer**\n   *  that is greater than or equal to %%this%%.\n   *\n   *  The decimal component of the result will always be ``0``.\n   */\n  ceiling() {\n    let val = _classPrivateFieldGet(this, _val);\n    if (_classPrivateFieldGet(this, _val) > BN_0) {\n      val += _classPrivateFieldGet(this, _tens) - BN_1;\n    }\n    val = _classPrivateFieldGet(this, _val) / _classPrivateFieldGet(this, _tens) * _classPrivateFieldGet(this, _tens);\n    return _classPrivateMethodGet(this, _checkValue, _checkValue2).call(this, val, \"ceiling\");\n  }\n  /**\n   *  Returns a new [[FixedNumber]] with the decimal component\n   *  rounded up on ties at %%decimals%% places.\n   */\n  round(decimals) {\n    if (decimals == null) {\n      decimals = 0;\n    }\n    // Not enough precision to not already be rounded\n    if (decimals >= this.decimals) {\n      return this;\n    }\n    const delta = this.decimals - decimals;\n    const bump = BN_5 * getTens(delta - 1);\n    let value = this.value + bump;\n    const tens = getTens(delta);\n    value = value / tens * tens;\n    checkValue(value, _classPrivateFieldGet(this, _format2), \"round\");\n    return new FixedNumber(_guard, value, _classPrivateFieldGet(this, _format2));\n  }\n  /**\n   *  Returns true if %%this%% is equal to ``0``.\n   */\n  isZero() {\n    return _classPrivateFieldGet(this, _val) === BN_0;\n  }\n  /**\n   *  Returns true if %%this%% is less than ``0``.\n   */\n  isNegative() {\n    return _classPrivateFieldGet(this, _val) < BN_0;\n  }\n  /**\n   *  Returns the string representation of %%this%%.\n   */\n  toString() {\n    return this._value;\n  }\n  /**\n   *  Returns a float approximation.\n   *\n   *  Due to IEEE 754 precission (or lack thereof), this function\n   *  can only return an approximation and most values will contain\n   *  rounding errors.\n   */\n  toUnsafeFloat() {\n    return parseFloat(this.toString());\n  }\n  /**\n   *  Return a new [[FixedNumber]] with the same value but has had\n   *  its field set to %%format%%.\n   *\n   *  This will throw if the value cannot fit into %%format%%.\n   */\n  toFormat(format) {\n    return FixedNumber.fromString(this.toString(), format);\n  }\n  /**\n   *  Creates a new [[FixedNumber]] for %%value%% divided by\n   *  %%decimal%% places with %%format%%.\n   *\n   *  This will throw a [[NumericFaultError]] if %%value%% (once adjusted\n   *  for %%decimals%%) cannot fit in %%format%%, either due to overflow\n   *  or underflow (precision loss).\n   */\n  static fromValue(_value, _decimals, _format) {\n    const decimals = _decimals == null ? 0 : (0, maths_js_1.getNumber)(_decimals);\n    const format = getFormat(_format);\n    let value = (0, maths_js_1.getBigInt)(_value, \"value\");\n    const delta = decimals - format.decimals;\n    if (delta > 0) {\n      const tens = getTens(delta);\n      (0, errors_js_1.assert)(value % tens === BN_0, \"value loses precision for format\", \"NUMERIC_FAULT\", {\n        operation: \"fromValue\",\n        fault: \"underflow\",\n        value: _value\n      });\n      value /= tens;\n    } else if (delta < 0) {\n      value *= getTens(-delta);\n    }\n    checkValue(value, format, \"fromValue\");\n    return new FixedNumber(_guard, value, format);\n  }\n  /**\n   *  Creates a new [[FixedNumber]] for %%value%% with %%format%%.\n   *\n   *  This will throw a [[NumericFaultError]] if %%value%% cannot fit\n   *  in %%format%%, either due to overflow or underflow (precision loss).\n   */\n  static fromString(_value, _format) {\n    const match = _value.match(/^(-?)([0-9]*)\\.?([0-9]*)$/);\n    (0, errors_js_1.assertArgument)(match && match[2].length + match[3].length > 0, \"invalid FixedNumber string value\", \"value\", _value);\n    const format = getFormat(_format);\n    let whole = match[2] || \"0\",\n      decimal = match[3] || \"\";\n    // Pad out the decimals\n    while (decimal.length < format.decimals) {\n      decimal += Zeros;\n    }\n    // Check precision is safe\n    (0, errors_js_1.assert)(decimal.substring(format.decimals).match(/^0*$/), \"too many decimals for format\", \"NUMERIC_FAULT\", {\n      operation: \"fromString\",\n      fault: \"underflow\",\n      value: _value\n    });\n    // Remove extra padding\n    decimal = decimal.substring(0, format.decimals);\n    const value = BigInt(match[1] + whole + decimal);\n    checkValue(value, format, \"fromString\");\n    return new FixedNumber(_guard, value, format);\n  }\n  /**\n   *  Creates a new [[FixedNumber]] with the big-endian representation\n   *  %%value%% with %%format%%.\n   *\n   *  This will throw a [[NumericFaultError]] if %%value%% cannot fit\n   *  in %%format%% due to overflow.\n   */\n  static fromBytes(_value, _format) {\n    let value = (0, maths_js_1.toBigInt)((0, data_js_1.getBytes)(_value, \"value\"));\n    const format = getFormat(_format);\n    if (format.signed) {\n      value = (0, maths_js_1.fromTwos)(value, format.width);\n    }\n    checkValue(value, format, \"fromBytes\");\n    return new FixedNumber(_guard, value, format);\n  }\n}\nfunction _checkFormat2(other) {\n  (0, errors_js_1.assertArgument)(this.format === other.format, \"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n}\nfunction _checkValue2(val, safeOp) {\n  /*\n          const width = BigInt(this.width);\n          if (this.signed) {\n              const limit = (BN_1 << (width - BN_1));\n              assert(safeOp == null || (val >= -limit  && val < limit), \"overflow\", \"NUMERIC_FAULT\", {\n                  operation: <string>safeOp, fault: \"overflow\", value: val\n              });\n  \n              if (val > BN_0) {\n                  val = fromTwos(mask(val, width), width);\n              } else {\n                  val = -fromTwos(mask(-val, width), width);\n              }\n  \n          } else {\n              const masked = mask(val, width);\n              assert(safeOp == null || (val >= 0 && val === masked), \"overflow\", \"NUMERIC_FAULT\", {\n                  operation: <string>safeOp, fault: \"overflow\", value: val\n              });\n              val = masked;\n          }\n  */\n  val = checkValue(val, _classPrivateFieldGet(this, _format2), safeOp);\n  return new FixedNumber(_guard, val, _classPrivateFieldGet(this, _format2));\n}\nfunction _add2(o, safeOp) {\n  _classPrivateMethodGet(this, _checkFormat, _checkFormat2).call(this, o);\n  return _classPrivateMethodGet(this, _checkValue, _checkValue2).call(this, _classPrivateFieldGet(this, _val) + _classPrivateFieldGet(o, _val), safeOp);\n}\nfunction _sub2(o, safeOp) {\n  _classPrivateMethodGet(this, _checkFormat, _checkFormat2).call(this, o);\n  return _classPrivateMethodGet(this, _checkValue, _checkValue2).call(this, _classPrivateFieldGet(this, _val) - _classPrivateFieldGet(o, _val), safeOp);\n}\nfunction _mul2(o, safeOp) {\n  _classPrivateMethodGet(this, _checkFormat, _checkFormat2).call(this, o);\n  return _classPrivateMethodGet(this, _checkValue, _checkValue2).call(this, _classPrivateFieldGet(this, _val) * _classPrivateFieldGet(o, _val) / _classPrivateFieldGet(this, _tens), safeOp);\n}\nfunction _div2(o, safeOp) {\n  (0, errors_js_1.assert)(_classPrivateFieldGet(o, _val) !== BN_0, \"division by zero\", \"NUMERIC_FAULT\", {\n    operation: \"div\",\n    fault: \"divide-by-zero\",\n    value: this\n  });\n  _classPrivateMethodGet(this, _checkFormat, _checkFormat2).call(this, o);\n  return _classPrivateMethodGet(this, _checkValue, _checkValue2).call(this, _classPrivateFieldGet(this, _val) * _classPrivateFieldGet(this, _tens) / _classPrivateFieldGet(o, _val), safeOp);\n}\nexports.FixedNumber = FixedNumber;\n//const f1 = FixedNumber.fromString(\"12.56\", \"fixed16x2\");\n//const f2 = FixedNumber.fromString(\"0.3\", \"fixed16x2\");\n//console.log(f1.divSignal(f2));\n//const BUMP = FixedNumber.from(\"0.5\");","map":{"version":3,"names":["data_js_1","require","errors_js_1","maths_js_1","properties_js_1","BN_N1","BigInt","BN_0","BN_1","BN_5","_guard","Zeros","length","getTens","decimals","result","substring","checkValue","val","format","safeOp","width","signed","limit","assert","operation","fault","value","fromTwos","mask","getFormat","match","assertArgument","parseInt","v","check","key","type","defaultValue","name","String","toString","negative","str","index","_format2","WeakMap","_val","_tens","_checkFormat","WeakSet","_checkValue","_add","_sub","_mul","_div","FixedNumber","constructor","guard","_classPrivateMethodInitSpec","_defineProperty","_classPrivateFieldInitSpec","writable","assertPrivate","_classPrivateFieldSet","_value","defineProperties","_classPrivateFieldGet","addUnsafe","other","_classPrivateMethodGet","_add2","call","add","subUnsafe","_sub2","sub","mulUnsafe","_mul2","mul","mulSignal","_checkFormat2","_checkValue2","divUnsafe","_div2","div","divSignal","cmp","a","b","delta","eq","lt","lte","gt","gte","floor","ceiling","round","bump","tens","isZero","isNegative","toUnsafeFloat","parseFloat","toFormat","fromString","fromValue","_decimals","_format","getNumber","getBigInt","whole","decimal","fromBytes","toBigInt","getBytes","o","exports"],"sources":["../../src.ts/utils/fixednumber.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}