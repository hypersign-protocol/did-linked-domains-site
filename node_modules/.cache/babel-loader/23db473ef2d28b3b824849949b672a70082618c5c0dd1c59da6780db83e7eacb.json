{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EnglishMnemonic = void 0;\nconst bip39 = __importStar(require(\"bip39\"));\nclass EnglishMnemonic {\n  constructor(mnemonic) {\n    if (!EnglishMnemonic.mnemonicMatcher.test(mnemonic)) {\n      throw new Error(\"Invalid mnemonic format\");\n    }\n    const words = mnemonic.split(\" \");\n    const allowedWordsLengths = [12, 15, 18, 21, 24];\n    if (allowedWordsLengths.indexOf(words.length) === -1) {\n      throw new Error(`Invalid word count in mnemonic (allowed: ${allowedWordsLengths} got: ${words.length})`);\n    }\n    for (const word of words) {\n      if (EnglishMnemonic.wordlist.indexOf(word) === -1) {\n        throw new Error(\"Mnemonic contains invalid word\");\n      }\n    }\n    // Throws with informative error message if mnemonic is not valid\n    bip39.mnemonicToEntropy(mnemonic);\n    this.data = mnemonic;\n  }\n  toString() {\n    return this.data;\n  }\n}\nexports.EnglishMnemonic = EnglishMnemonic;\nEnglishMnemonic.wordlist = bip39.wordlists.english;\n// list of space separated lower case words (1 or more)\nEnglishMnemonic.mnemonicMatcher = /^[a-z]+( [a-z]+)*$/;","map":{"version":3,"names":["bip39","__importStar","require","EnglishMnemonic","constructor","mnemonic","mnemonicMatcher","test","Error","words","split","allowedWordsLengths","indexOf","length","word","wordlist","mnemonicToEntropy","data","toString","exports","wordlists","english"],"sources":["../src/englishmnemonic.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAAA,KAAA,GAAAC,YAAA,CAAAC,OAAA;AAEA,MAAaC,eAAe;EAQ1BC,YAAmBC,QAAgB;IACjC,IAAI,CAACF,eAAe,CAACG,eAAe,CAACC,IAAI,CAACF,QAAQ,CAAC,EAAE;MACnD,MAAM,IAAIG,KAAK,CAAC,yBAAyB,CAAC;;IAG5C,MAAMC,KAAK,GAAGJ,QAAQ,CAACK,KAAK,CAAC,GAAG,CAAC;IACjC,MAAMC,mBAAmB,GAAsB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;IACnE,IAAIA,mBAAmB,CAACC,OAAO,CAACH,KAAK,CAACI,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;MACpD,MAAM,IAAIL,KAAK,CACb,4CAA4CG,mBAAmB,SAASF,KAAK,CAACI,MAAM,GAAG,CACxF;;IAGH,KAAK,MAAMC,IAAI,IAAIL,KAAK,EAAE;MACxB,IAAIN,eAAe,CAACY,QAAQ,CAACH,OAAO,CAACE,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;QACjD,MAAM,IAAIN,KAAK,CAAC,gCAAgC,CAAC;;;IAIrD;IACAR,KAAK,CAACgB,iBAAiB,CAACX,QAAQ,CAAC;IAEjC,IAAI,CAACY,IAAI,GAAGZ,QAAQ;EACtB;EAEOa,QAAQA,CAAA;IACb,OAAO,IAAI,CAACD,IAAI;EAClB;;AAnCFE,OAAA,CAAAhB,eAAA,GAAAA,eAAA;AACyBA,eAAA,CAAAY,QAAQ,GAAsBf,KAAK,CAACoB,SAAS,CAACC,OAAO;AAE5E;AACwBlB,eAAA,CAAAG,eAAe,GAAG,oBAAoB"},"metadata":{},"sourceType":"script","externalDependencies":[]}