{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeSignBytes = exports.makeSignDoc = exports.makeAuthInfoBytes = void 0;\nconst signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\nconst tx_1 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\nconst long_1 = __importDefault(require(\"long\"));\n/**\n * Create signer infos from the provided signers.\n *\n * This implementation does not support different signing modes for the different signers.\n */\nfunction makeSignerInfos(signers, signMode) {\n  return signers.map(({\n    pubkey,\n    sequence\n  }) => ({\n    publicKey: pubkey,\n    modeInfo: {\n      single: {\n        mode: signMode\n      }\n    },\n    sequence: long_1.default.fromNumber(sequence)\n  }));\n}\n/**\n * Creates and serializes an AuthInfo document.\n *\n * This implementation does not support different signing modes for the different signers.\n */\nfunction makeAuthInfoBytes(signers, feeAmount, gasLimit, signMode = signing_1.SignMode.SIGN_MODE_DIRECT) {\n  const authInfo = {\n    signerInfos: makeSignerInfos(signers, signMode),\n    fee: {\n      amount: [...feeAmount],\n      gasLimit: long_1.default.fromNumber(gasLimit)\n    }\n  };\n  return tx_1.AuthInfo.encode(tx_1.AuthInfo.fromPartial(authInfo)).finish();\n}\nexports.makeAuthInfoBytes = makeAuthInfoBytes;\nfunction makeSignDoc(bodyBytes, authInfoBytes, chainId, accountNumber) {\n  return {\n    bodyBytes: bodyBytes,\n    authInfoBytes: authInfoBytes,\n    chainId: chainId,\n    accountNumber: long_1.default.fromNumber(accountNumber)\n  };\n}\nexports.makeSignDoc = makeSignDoc;\nfunction makeSignBytes({\n  accountNumber,\n  authInfoBytes,\n  bodyBytes,\n  chainId\n}) {\n  const signDoc = tx_1.SignDoc.fromPartial({\n    accountNumber: accountNumber,\n    authInfoBytes: authInfoBytes,\n    bodyBytes: bodyBytes,\n    chainId: chainId\n  });\n  return tx_1.SignDoc.encode(signDoc).finish();\n}\nexports.makeSignBytes = makeSignBytes;","map":{"version":3,"names":["signing_1","require","tx_1","long_1","__importDefault","makeSignerInfos","signers","signMode","map","pubkey","sequence","publicKey","modeInfo","single","mode","default","fromNumber","makeAuthInfoBytes","feeAmount","gasLimit","SignMode","SIGN_MODE_DIRECT","authInfo","signerInfos","fee","amount","AuthInfo","encode","fromPartial","finish","exports","makeSignDoc","bodyBytes","authInfoBytes","chainId","accountNumber","makeSignBytes","signDoc","SignDoc"],"sources":["../src/signing.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;AAEA,MAAAA,SAAA,GAAAC,OAAA;AACA,MAAAC,IAAA,GAAAD,OAAA;AAEA,MAAAE,MAAA,GAAAC,eAAA,CAAAH,OAAA;AAEA;;;;;AAKA,SAASI,eAAeA,CACtBC,OAA2E,EAC3EC,QAAkB;EAElB,OAAOD,OAAO,CAACE,GAAG,CAChB,CAAC;IAAEC,MAAM;IAAEC;EAAQ,CAAE,MAAkB;IACrCC,SAAS,EAAEF,MAAM;IACjBG,QAAQ,EAAE;MACRC,MAAM,EAAE;QAAEC,IAAI,EAAEP;MAAQ;KACzB;IACDG,QAAQ,EAAEP,MAAA,CAAAY,OAAI,CAACC,UAAU,CAACN,QAAQ;GACnC,CAAC,CACH;AACH;AAEA;;;;;AAKA,SAAgBO,iBAAiBA,CAC/BX,OAA2E,EAC3EY,SAA0B,EAC1BC,QAAgB,EAChBZ,QAAQ,GAAGP,SAAA,CAAAoB,QAAQ,CAACC,gBAAgB;EAEpC,MAAMC,QAAQ,GAAG;IACfC,WAAW,EAAElB,eAAe,CAACC,OAAO,EAAEC,QAAQ,CAAC;IAC/CiB,GAAG,EAAE;MACHC,MAAM,EAAE,CAAC,GAAGP,SAAS,CAAC;MACtBC,QAAQ,EAAEhB,MAAA,CAAAY,OAAI,CAACC,UAAU,CAACG,QAAQ;;GAErC;EACD,OAAOjB,IAAA,CAAAwB,QAAQ,CAACC,MAAM,CAACzB,IAAA,CAAAwB,QAAQ,CAACE,WAAW,CAACN,QAAQ,CAAC,CAAC,CAACO,MAAM,EAAE;AACjE;AAdAC,OAAA,CAAAb,iBAAA,GAAAA,iBAAA;AAgBA,SAAgBc,WAAWA,CACzBC,SAAqB,EACrBC,aAAyB,EACzBC,OAAe,EACfC,aAAqB;EAErB,OAAO;IACLH,SAAS,EAAEA,SAAS;IACpBC,aAAa,EAAEA,aAAa;IAC5BC,OAAO,EAAEA,OAAO;IAChBC,aAAa,EAAEhC,MAAA,CAAAY,OAAI,CAACC,UAAU,CAACmB,aAAa;GAC7C;AACH;AAZAL,OAAA,CAAAC,WAAA,GAAAA,WAAA;AAcA,SAAgBK,aAAaA,CAAC;EAAED,aAAa;EAAEF,aAAa;EAAED,SAAS;EAAEE;AAAO,CAAW;EACzF,MAAMG,OAAO,GAAGnC,IAAA,CAAAoC,OAAO,CAACV,WAAW,CAAC;IAClCO,aAAa,EAAEA,aAAa;IAC5BF,aAAa,EAAEA,aAAa;IAC5BD,SAAS,EAAEA,SAAS;IACpBE,OAAO,EAAEA;GACV,CAAC;EACF,OAAOhC,IAAA,CAAAoC,OAAO,CAACX,MAAM,CAACU,OAAO,CAAC,CAACR,MAAM,EAAE;AACzC;AARAC,OAAA,CAAAM,aAAA,GAAAA,aAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}