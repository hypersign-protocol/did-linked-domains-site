{"ast":null,"code":"/*!\n * Copyright (c) 2018-2022 Digital Bazaar, Inc. All rights reserved.\n */\n\n/**\n * When adding support for a new suite type for `crypto-ld`, developers should\n * do the following:\n *\n * 1. Create their own npm package / github repo, such as `example-key-pair`.\n * 2. Subclass LDKeyPair.\n * 3. Override relevant methods (such as `export()` and `fingerprint()`).\n * 4. Add to the key type table in the `crypto-ld` README.md (that's this repo).\n */\nexport class LDKeyPair {\n  /* eslint-disable jsdoc/require-description-complete-sentence */\n  /**\n   * Creates a public/private key pair instance. This is an abstract base class,\n   * actual key material and suite-specific methods are handled in the subclass.\n   *\n   * To generate or import a key pair, use the `cryptoLd` instance.\n   *\n   * @see CryptoLD.js\n   *\n   * @param {object} options - The options to use.\n   * @param {string} options.id - The key id, typically composed of controller\n   *   URL and key fingerprint as hash fragment.\n   * @param {string} options.controller - DID/URL of the person/entity\n   *   controlling this key.\n   * @param {string} [options.revoked] - Timestamp of when the key has been\n   *   revoked, in RFC3339 format. If not present, the key itself is\n   *   considered not revoked. (Note that this mechanism is slightly different\n   *   than DID Document key revocation, where a DID controller can revoke a\n   *   key from that DID by removing it from the DID Document.)\n   */\n  /* eslint-enable */\n  constructor({\n    id,\n    controller,\n    revoked\n  } = {}) {\n    this.id = id;\n    this.controller = controller;\n    this.revoked = revoked;\n    // this.type is set in subclass constructor\n  }\n\n  /* eslint-disable jsdoc/check-param-names */\n  /**\n   * Generates a new public/private key pair instance.\n   * Note that this method is not typically called directly by client code,\n   * but instead is used through a `cryptoLd` instance.\n   *\n   * @param {object} options - Suite-specific options for the KeyPair. For\n   *   common options, see the `LDKeyPair.constructor()` docstring.\n   *\n   * @returns {Promise<LDKeyPair>} An LDKeyPair instance.\n   */\n  /* eslint-enable */\n  static /* options */\n  async generate() {\n    throw new Error('Abstract method, must be implemented in subclass.');\n  }\n\n  /**\n   * Imports a key pair instance from a provided externally fetched key\n   * document (fetched via a secure JSON-LD `documentLoader` or via\n   * `cryptoLd.fromKeyId()`), optionally checking it for revocation and required\n   * context.\n   *\n   * @param {object} options - Options hashmap.\n   * @param {string} options.document - Externally fetched key document.\n   * @param {boolean} [options.checkContext=true] - Whether to check that the\n   *   fetched key document contains the context required by the key's crypto\n   *   suite.\n   * @param {boolean} [options.checkRevoked=true] - Whether to check the key\n   *   object for the presence of the `revoked` timestamp.\n   *\n   * @returns {Promise<LDKeyPair>} Resolves with the resulting key pair\n   *   instance.\n   */\n  static async fromKeyDocument({\n    document,\n    checkContext = true,\n    checkRevoked = true\n  } = {}) {\n    if (!document) {\n      throw new TypeError('The \"document\" parameter is required.');\n    }\n    if (checkContext) {\n      const fetchedDocContexts = [].concat(document['@context']);\n      if (!fetchedDocContexts.includes(this.SUITE_CONTEXT)) {\n        throw new Error('Key document does not contain required context \"' + this.SUITE_CONTEXT + '\".');\n      }\n    }\n    if (checkRevoked && document.revoked) {\n      throw new Error(`Key has been revoked since: \"${document.revoked}\".`);\n    }\n    return this.from(document);\n  }\n\n  /* eslint-disable jsdoc/check-param-names */\n  /**\n   * Generates a KeyPair from some options.\n   *\n   * @param {object} options  - Will generate a key pair in multiple different\n   *   formats.\n   * @example\n   * > const options = {\n   *    type: 'Ed25519VerificationKey2020'\n   *   };\n   * > const edKeyPair = await LDKeyPair.from(options);\n   *\n   * @returns {Promise<LDKeyPair>} A LDKeyPair.\n   * @throws Unsupported Key Type.\n   */\n  /* eslint-enable */\n  static /* options */\n  async from() {\n    throw new Error('Abstract method from() must be implemented in subclass.');\n  }\n\n  /**\n   * Exports the serialized representation of the KeyPair\n   * and other information that json-ld Signatures can use to form a proof.\n   *\n   * NOTE: Subclasses MUST override this method (and add the exporting of\n   * their public and private key material).\n   *\n   * @param {object} [options={}] - Options hashmap.\n   * @param {boolean} [options.publicKey] - Export public key material?\n   * @param {boolean} [options.privateKey] - Export private key material?\n   *\n   * @returns {object} A public key object\n   *   information used in verification methods by signatures.\n   */\n  export({\n    publicKey = false,\n    privateKey = false\n  } = {}) {\n    if (!publicKey && !privateKey) {\n      throw new Error('Export requires specifying either \"publicKey\" or \"privateKey\".');\n    }\n    const key = {\n      id: this.id,\n      type: this.type,\n      controller: this.controller\n    };\n    if (this.revoked) {\n      key.revoked = this.revoked;\n    }\n    return key;\n  }\n\n  /**\n   * Returns the public key fingerprint, multibase+multicodec encoded. The\n   * specific fingerprint method is determined by the key suite, and is often\n   * either a hash of the public key material (such as with RSA), or the\n   * full encoded public key (for key types with sufficiently short\n   * representations, such as ed25519).\n   * This is frequently used in initializing the key id, or generating some\n   * types of cryptonym DIDs.\n   *\n   * @returns {string} The fingerprint.\n   */\n  fingerprint() {\n    throw new Error('Abstract method, must be implemented in subclass.');\n  }\n\n  /* eslint-disable jsdoc/check-param-names */\n  /**\n   * Verifies that a given key fingerprint matches the public key material\n   * belonging to this key pair.\n   *\n   * @param {string} fingerprint - Public key fingerprint.\n   *\n   * @returns {{verified: boolean}} An object with verified flag.\n   */\n  /* eslint-enable */\n  verifyFingerprint( /* {fingerprint} */\n  ) {\n    throw new Error('Abstract method, must be implemented in subclass.');\n  }\n\n  /* eslint-disable max-len */\n  /**\n   * Returns a signer object for use with\n   * [jsonld-signatures]{@link https://github.com/digitalbazaar/jsonld-signatures}.\n   * NOTE: Applies only to verifier type keys (like ed25519).\n   *\n   * @example\n   * > const signer = keyPair.signer();\n   * > signer\n   * { sign: [AsyncFunction: sign] }\n   * > signer.sign({data});\n   *\n   * @returns {{sign: Function}} A signer for json-ld usage.\n   */\n  /* eslint-enable */\n  signer() {\n    return {\n      async sign({/* data */}) {\n        throw new Error('Abstract method, must be implemented in subclass.');\n      }\n    };\n  }\n\n  /* eslint-disable max-len */\n  /**\n   * Returns a verifier object for use with\n   * [jsonld-signatures]{@link https://github.com/digitalbazaar/jsonld-signatures}.\n   * NOTE: Applies only to verifier type keys (like ed25519).\n   *\n   * @example\n   * > const verifier = keyPair.verifier();\n   * > verifier\n   * { verify: [AsyncFunction: verify] }\n   * > verifier.verify(key);\n   *\n   * @returns {{verify: Function}} Used to verify jsonld-signatures.\n   */\n  /* eslint-enable */\n  verifier() {\n    return {\n      async verify({/* data, signature */}) {\n        throw new Error('Abstract method, must be implemented in subclass.');\n      }\n    };\n  }\n}\n\n// Implementers must override this in subclasses\nLDKeyPair.SUITE_CONTEXT = 'INVALID LDKeyPair CONTEXT';","map":{"version":3,"names":["LDKeyPair","constructor","id","controller","revoked","generate","Error","fromKeyDocument","document","checkContext","checkRevoked","TypeError","fetchedDocContexts","concat","includes","SUITE_CONTEXT","from","export","publicKey","privateKey","key","type","fingerprint","verifyFingerprint","signer","sign","verifier","verify"],"sources":["/home/pratap/domain-linkege/node_modules/crypto-ld/lib/LDKeyPair.js"],"sourcesContent":["/*!\n * Copyright (c) 2018-2022 Digital Bazaar, Inc. All rights reserved.\n */\n\n/**\n * When adding support for a new suite type for `crypto-ld`, developers should\n * do the following:\n *\n * 1. Create their own npm package / github repo, such as `example-key-pair`.\n * 2. Subclass LDKeyPair.\n * 3. Override relevant methods (such as `export()` and `fingerprint()`).\n * 4. Add to the key type table in the `crypto-ld` README.md (that's this repo).\n */\nexport class LDKeyPair {\n  /* eslint-disable jsdoc/require-description-complete-sentence */\n  /**\n   * Creates a public/private key pair instance. This is an abstract base class,\n   * actual key material and suite-specific methods are handled in the subclass.\n   *\n   * To generate or import a key pair, use the `cryptoLd` instance.\n   *\n   * @see CryptoLD.js\n   *\n   * @param {object} options - The options to use.\n   * @param {string} options.id - The key id, typically composed of controller\n   *   URL and key fingerprint as hash fragment.\n   * @param {string} options.controller - DID/URL of the person/entity\n   *   controlling this key.\n   * @param {string} [options.revoked] - Timestamp of when the key has been\n   *   revoked, in RFC3339 format. If not present, the key itself is\n   *   considered not revoked. (Note that this mechanism is slightly different\n   *   than DID Document key revocation, where a DID controller can revoke a\n   *   key from that DID by removing it from the DID Document.)\n   */\n  /* eslint-enable */\n  constructor({id, controller, revoked} = {}) {\n    this.id = id;\n    this.controller = controller;\n    this.revoked = revoked;\n    // this.type is set in subclass constructor\n  }\n\n  /* eslint-disable jsdoc/check-param-names */\n  /**\n   * Generates a new public/private key pair instance.\n   * Note that this method is not typically called directly by client code,\n   * but instead is used through a `cryptoLd` instance.\n   *\n   * @param {object} options - Suite-specific options for the KeyPair. For\n   *   common options, see the `LDKeyPair.constructor()` docstring.\n   *\n   * @returns {Promise<LDKeyPair>} An LDKeyPair instance.\n   */\n  /* eslint-enable */\n  static async generate(/* options */) {\n    throw new Error('Abstract method, must be implemented in subclass.');\n  }\n\n  /**\n   * Imports a key pair instance from a provided externally fetched key\n   * document (fetched via a secure JSON-LD `documentLoader` or via\n   * `cryptoLd.fromKeyId()`), optionally checking it for revocation and required\n   * context.\n   *\n   * @param {object} options - Options hashmap.\n   * @param {string} options.document - Externally fetched key document.\n   * @param {boolean} [options.checkContext=true] - Whether to check that the\n   *   fetched key document contains the context required by the key's crypto\n   *   suite.\n   * @param {boolean} [options.checkRevoked=true] - Whether to check the key\n   *   object for the presence of the `revoked` timestamp.\n   *\n   * @returns {Promise<LDKeyPair>} Resolves with the resulting key pair\n   *   instance.\n   */\n  static async fromKeyDocument({\n    document, checkContext = true, checkRevoked = true\n  } = {}) {\n    if(!document) {\n      throw new TypeError('The \"document\" parameter is required.');\n    }\n\n    if(checkContext) {\n      const fetchedDocContexts = [].concat(document['@context']);\n      if(!fetchedDocContexts.includes(this.SUITE_CONTEXT)) {\n        throw new Error('Key document does not contain required context \"' +\n          this.SUITE_CONTEXT + '\".');\n      }\n    }\n    if(checkRevoked && document.revoked) {\n      throw new Error(`Key has been revoked since: \"${document.revoked}\".`);\n    }\n    return this.from(document);\n  }\n\n  /* eslint-disable jsdoc/check-param-names */\n  /**\n   * Generates a KeyPair from some options.\n   *\n   * @param {object} options  - Will generate a key pair in multiple different\n   *   formats.\n   * @example\n   * > const options = {\n   *    type: 'Ed25519VerificationKey2020'\n   *   };\n   * > const edKeyPair = await LDKeyPair.from(options);\n   *\n   * @returns {Promise<LDKeyPair>} A LDKeyPair.\n   * @throws Unsupported Key Type.\n   */\n  /* eslint-enable */\n  static async from(/* options */) {\n    throw new Error('Abstract method from() must be implemented in subclass.');\n  }\n\n  /**\n   * Exports the serialized representation of the KeyPair\n   * and other information that json-ld Signatures can use to form a proof.\n   *\n   * NOTE: Subclasses MUST override this method (and add the exporting of\n   * their public and private key material).\n   *\n   * @param {object} [options={}] - Options hashmap.\n   * @param {boolean} [options.publicKey] - Export public key material?\n   * @param {boolean} [options.privateKey] - Export private key material?\n   *\n   * @returns {object} A public key object\n   *   information used in verification methods by signatures.\n   */\n  export({publicKey = false, privateKey = false} = {}) {\n    if(!publicKey && !privateKey) {\n      throw new Error(\n        'Export requires specifying either \"publicKey\" or \"privateKey\".');\n    }\n    const key = {\n      id: this.id,\n      type: this.type,\n      controller: this.controller\n    };\n    if(this.revoked) {\n      key.revoked = this.revoked;\n    }\n\n    return key;\n  }\n\n  /**\n   * Returns the public key fingerprint, multibase+multicodec encoded. The\n   * specific fingerprint method is determined by the key suite, and is often\n   * either a hash of the public key material (such as with RSA), or the\n   * full encoded public key (for key types with sufficiently short\n   * representations, such as ed25519).\n   * This is frequently used in initializing the key id, or generating some\n   * types of cryptonym DIDs.\n   *\n   * @returns {string} The fingerprint.\n   */\n  fingerprint() {\n    throw new Error('Abstract method, must be implemented in subclass.');\n  }\n\n  /* eslint-disable jsdoc/check-param-names */\n  /**\n   * Verifies that a given key fingerprint matches the public key material\n   * belonging to this key pair.\n   *\n   * @param {string} fingerprint - Public key fingerprint.\n   *\n   * @returns {{verified: boolean}} An object with verified flag.\n   */\n  /* eslint-enable */\n  verifyFingerprint(/* {fingerprint} */) {\n    throw new Error('Abstract method, must be implemented in subclass.');\n  }\n\n  /* eslint-disable max-len */\n  /**\n   * Returns a signer object for use with\n   * [jsonld-signatures]{@link https://github.com/digitalbazaar/jsonld-signatures}.\n   * NOTE: Applies only to verifier type keys (like ed25519).\n   *\n   * @example\n   * > const signer = keyPair.signer();\n   * > signer\n   * { sign: [AsyncFunction: sign] }\n   * > signer.sign({data});\n   *\n   * @returns {{sign: Function}} A signer for json-ld usage.\n   */\n  /* eslint-enable */\n  signer() {\n    return {\n      async sign({/* data */}) {\n        throw new Error('Abstract method, must be implemented in subclass.');\n      }\n    };\n  }\n\n  /* eslint-disable max-len */\n  /**\n   * Returns a verifier object for use with\n   * [jsonld-signatures]{@link https://github.com/digitalbazaar/jsonld-signatures}.\n   * NOTE: Applies only to verifier type keys (like ed25519).\n   *\n   * @example\n   * > const verifier = keyPair.verifier();\n   * > verifier\n   * { verify: [AsyncFunction: verify] }\n   * > verifier.verify(key);\n   *\n   * @returns {{verify: Function}} Used to verify jsonld-signatures.\n   */\n  /* eslint-enable */\n  verifier() {\n    return {\n      async verify({/* data, signature */}) {\n        throw new Error('Abstract method, must be implemented in subclass.');\n      }\n    };\n  }\n}\n\n// Implementers must override this in subclasses\nLDKeyPair.SUITE_CONTEXT = 'INVALID LDKeyPair CONTEXT';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}