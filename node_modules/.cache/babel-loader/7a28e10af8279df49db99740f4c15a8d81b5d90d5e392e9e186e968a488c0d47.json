{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/es.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/es.typed-array.with.js\");\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupTxExtension = void 0;\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\nconst signing_1 = require(\"cosmjs-types/cosmos/tx/signing/v1beta1/signing\");\nconst service_1 = require(\"cosmjs-types/cosmos/tx/v1beta1/service\");\nconst tx_1 = require(\"cosmjs-types/cosmos/tx/v1beta1/tx\");\nconst long_1 = __importDefault(require(\"long\"));\nconst utils_1 = require(\"./utils\");\nfunction setupTxExtension(base) {\n  // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n  const rpc = (0, utils_1.createProtobufRpcClient)(base);\n  const queryService = new service_1.ServiceClientImpl(rpc);\n  return {\n    tx: {\n      getTx: async txId => {\n        const request = {\n          hash: txId\n        };\n        const response = await queryService.GetTx(request);\n        return response;\n      },\n      simulate: async (messages, memo, signer, sequence) => {\n        const request = service_1.SimulateRequest.fromPartial({\n          tx: tx_1.Tx.fromPartial({\n            authInfo: tx_1.AuthInfo.fromPartial({\n              fee: tx_1.Fee.fromPartial({}),\n              signerInfos: [{\n                publicKey: (0, proto_signing_1.encodePubkey)(signer),\n                sequence: long_1.default.fromNumber(sequence, true),\n                modeInfo: {\n                  single: {\n                    mode: signing_1.SignMode.SIGN_MODE_UNSPECIFIED\n                  }\n                }\n              }]\n            }),\n            body: tx_1.TxBody.fromPartial({\n              messages: Array.from(messages),\n              memo: memo\n            }),\n            signatures: [new Uint8Array()]\n          }),\n          // Sending serialized `txBytes` is the future. But\n          // this is not available in Comsos SDK 0.42.\n          txBytes: undefined\n        });\n        const response = await queryService.Simulate(request);\n        return response;\n      }\n    }\n  };\n}\nexports.setupTxExtension = setupTxExtension;","map":{"version":3,"names":["proto_signing_1","require","signing_1","service_1","tx_1","long_1","__importDefault","utils_1","setupTxExtension","base","rpc","createProtobufRpcClient","queryService","ServiceClientImpl","tx","getTx","txId","request","hash","response","GetTx","simulate","messages","memo","signer","sequence","SimulateRequest","fromPartial","Tx","authInfo","AuthInfo","fee","Fee","signerInfos","publicKey","encodePubkey","default","fromNumber","modeInfo","single","mode","SignMode","SIGN_MODE_UNSPECIFIED","body","TxBody","Array","from","signatures","Uint8Array","txBytes","undefined","Simulate","exports"],"sources":["../../src/queries/tx.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;;;;AACA,MAAAA,eAAA,GAAAC,OAAA;AACA,MAAAC,SAAA,GAAAD,OAAA;AACA,MAAAE,SAAA,GAAAF,OAAA;AAOA,MAAAG,IAAA,GAAAH,OAAA;AAEA,MAAAI,MAAA,GAAAC,eAAA,CAAAL,OAAA;AAGA,MAAAM,OAAA,GAAAN,OAAA;AAiBA,SAAgBO,gBAAgBA,CAACC,IAAiB;EAChD;EACA;EACA,MAAMC,GAAG,GAAG,IAAAH,OAAA,CAAAI,uBAAuB,EAACF,IAAI,CAAC;EACzC,MAAMG,YAAY,GAAG,IAAIT,SAAA,CAAAU,iBAAiB,CAACH,GAAG,CAAC;EAE/C,OAAO;IACLI,EAAE,EAAE;MACFC,KAAK,EAAE,MAAOC,IAAY,IAAI;QAC5B,MAAMC,OAAO,GAAiB;UAC5BC,IAAI,EAAEF;SACP;QACD,MAAMG,QAAQ,GAAG,MAAMP,YAAY,CAACQ,KAAK,CAACH,OAAO,CAAC;QAClD,OAAOE,QAAQ;MACjB,CAAC;MACDE,QAAQ,EAAE,MAAAA,CACRC,QAAwB,EACxBC,IAAwB,EACxBC,MAAc,EACdC,QAAgB,KACd;QACF,MAAMR,OAAO,GAAGd,SAAA,CAAAuB,eAAe,CAACC,WAAW,CAAC;UAC1Cb,EAAE,EAAEV,IAAA,CAAAwB,EAAE,CAACD,WAAW,CAAC;YACjBE,QAAQ,EAAEzB,IAAA,CAAA0B,QAAQ,CAACH,WAAW,CAAC;cAC7BI,GAAG,EAAE3B,IAAA,CAAA4B,GAAG,CAACL,WAAW,CAAC,EAAE,CAAC;cACxBM,WAAW,EAAE,CACX;gBACEC,SAAS,EAAE,IAAAlC,eAAA,CAAAmC,YAAY,EAACX,MAAM,CAAC;gBAC/BC,QAAQ,EAAEpB,MAAA,CAAA+B,OAAI,CAACC,UAAU,CAACZ,QAAQ,EAAE,IAAI,CAAC;gBACzCa,QAAQ,EAAE;kBAAEC,MAAM,EAAE;oBAAEC,IAAI,EAAEtC,SAAA,CAAAuC,QAAQ,CAACC;kBAAqB;gBAAE;eAC7D;aAEJ,CAAC;YACFC,IAAI,EAAEvC,IAAA,CAAAwC,MAAM,CAACjB,WAAW,CAAC;cACvBL,QAAQ,EAAEuB,KAAK,CAACC,IAAI,CAACxB,QAAQ,CAAC;cAC9BC,IAAI,EAAEA;aACP,CAAC;YACFwB,UAAU,EAAE,CAAC,IAAIC,UAAU,EAAE;WAC9B,CAAC;UACF;UACA;UACAC,OAAO,EAAEC;SACV,CAAC;QACF,MAAM/B,QAAQ,GAAG,MAAMP,YAAY,CAACuC,QAAQ,CAAClC,OAAO,CAAC;QACrD,OAAOE,QAAQ;MACjB;;GAEH;AACH;AAhDAiC,OAAA,CAAA5C,gBAAA,GAAAA,gBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}