{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeCosmosSdkDecFromProto = exports.longify = exports.createProtobufRpcClient = exports.createPagination = exports.toAccAddress = void 0;\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst pagination_1 = require(\"cosmjs-types/cosmos/base/query/v1beta1/pagination\");\nconst long_1 = __importDefault(require(\"long\"));\n/**\n * Takes a bech32 encoded address and returns the data part. The prefix is ignored and discarded.\n * This is called AccAddress in Cosmos SDK, which is basically an alias for raw binary data.\n * The result is typically 20 bytes long but not restricted to that.\n */\nfunction toAccAddress(address) {\n  return encoding_1.Bech32.decode(address).data;\n}\nexports.toAccAddress = toAccAddress;\n/**\n * If paginationKey is set, return a `PageRequest` with the given key.\n * If paginationKey is unset, return `undefined`.\n *\n * Use this with a query response's pagination next key to\n * request the next page.\n */\nfunction createPagination(paginationKey) {\n  return paginationKey ? pagination_1.PageRequest.fromPartial({\n    key: paginationKey,\n    offset: long_1.default.fromNumber(0, true),\n    limit: long_1.default.fromNumber(0, true),\n    countTotal: false\n  }) : undefined;\n}\nexports.createPagination = createPagination;\nfunction createProtobufRpcClient(base) {\n  return {\n    request: (service, method, data) => {\n      const path = `/${service}/${method}`;\n      return base.queryUnverified(path, data);\n    }\n  };\n}\nexports.createProtobufRpcClient = createProtobufRpcClient;\n/**\n * Takes a uint64 value as string, number, Long or Uint64 and returns an unsigned Long instance\n * of it.\n */\nfunction longify(value) {\n  const checkedValue = math_1.Uint64.fromString(value.toString());\n  return long_1.default.fromBytesBE([...checkedValue.toBytesBigEndian()], true);\n}\nexports.longify = longify;\n/**\n * Takes a string or binary encoded `github.com/cosmos/cosmos-sdk/types.Dec` from the\n * protobuf API and converts it into a `Decimal` with 18 fractional digits.\n *\n * See https://github.com/cosmos/cosmos-sdk/issues/10863 for more context why this is needed.\n */\nfunction decodeCosmosSdkDecFromProto(input) {\n  const asString = typeof input === \"string\" ? input : (0, encoding_1.fromAscii)(input);\n  return math_1.Decimal.fromAtomics(asString, 18);\n}\nexports.decodeCosmosSdkDecFromProto = decodeCosmosSdkDecFromProto;","map":{"version":3,"names":["encoding_1","require","math_1","pagination_1","long_1","__importDefault","toAccAddress","address","Bech32","decode","data","exports","createPagination","paginationKey","PageRequest","fromPartial","key","offset","default","fromNumber","limit","countTotal","undefined","createProtobufRpcClient","base","request","service","method","path","queryUnverified","longify","value","checkedValue","Uint64","fromString","toString","fromBytesBE","toBytesBigEndian","decodeCosmosSdkDecFromProto","input","asString","fromAscii","Decimal","fromAtomics"],"sources":["../../src/queries/utils.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;AAAA,MAAAA,UAAA,GAAAC,OAAA;AACA,MAAAC,MAAA,GAAAD,OAAA;AACA,MAAAE,YAAA,GAAAF,OAAA;AACA,MAAAG,MAAA,GAAAC,eAAA,CAAAJ,OAAA;AAIA;;;;;AAKA,SAAgBK,YAAYA,CAACC,OAAe;EAC1C,OAAOP,UAAA,CAAAQ,MAAM,CAACC,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI;AACpC;AAFAC,OAAA,CAAAL,YAAA,GAAAA,YAAA;AAIA;;;;;;;AAOA,SAAgBM,gBAAgBA,CAACC,aAA0B;EACzD,OAAOA,aAAa,GAChBV,YAAA,CAAAW,WAAW,CAACC,WAAW,CAAC;IACtBC,GAAG,EAAEH,aAAa;IAClBI,MAAM,EAAEb,MAAA,CAAAc,OAAI,CAACC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC;IAChCC,KAAK,EAAEhB,MAAA,CAAAc,OAAI,CAACC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC;IAC/BE,UAAU,EAAE;GACb,CAAC,GACFC,SAAS;AACf;AATAX,OAAA,CAAAC,gBAAA,GAAAA,gBAAA;AAeA,SAAgBW,uBAAuBA,CAACC,IAAiB;EACvD,OAAO;IACLC,OAAO,EAAEA,CAACC,OAAe,EAAEC,MAAc,EAAEjB,IAAgB,KAAyB;MAClF,MAAMkB,IAAI,GAAG,IAAIF,OAAO,IAAIC,MAAM,EAAE;MACpC,OAAOH,IAAI,CAACK,eAAe,CAACD,IAAI,EAAElB,IAAI,CAAC;IACzC;GACD;AACH;AAPAC,OAAA,CAAAY,uBAAA,GAAAA,uBAAA;AASA;;;;AAIA,SAAgBO,OAAOA,CAACC,KAAsC;EAC5D,MAAMC,YAAY,GAAG9B,MAAA,CAAA+B,MAAM,CAACC,UAAU,CAACH,KAAK,CAACI,QAAQ,EAAE,CAAC;EACxD,OAAO/B,MAAA,CAAAc,OAAI,CAACkB,WAAW,CAAC,CAAC,GAAGJ,YAAY,CAACK,gBAAgB,EAAE,CAAC,EAAE,IAAI,CAAC;AACrE;AAHA1B,OAAA,CAAAmB,OAAA,GAAAA,OAAA;AAKA;;;;;;AAMA,SAAgBQ,2BAA2BA,CAACC,KAA0B;EACpE,MAAMC,QAAQ,GAAG,OAAOD,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAG,IAAAvC,UAAA,CAAAyC,SAAS,EAACF,KAAK,CAAC;EACrE,OAAOrC,MAAA,CAAAwC,OAAO,CAACC,WAAW,CAACH,QAAQ,EAAE,EAAE,CAAC;AAC1C;AAHA7B,OAAA,CAAA2B,2BAAA,GAAAA,2BAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}