{"ast":null,"code":"\"use strict\";\n\n/**\n *  A **Password-Based Key-Derivation Function** is designed to create\n *  a sequence of bytes suitible as a **key** from a human-rememberable\n *  password.\n *\n *  @_subsection: api/crypto:Passwords  [about-pbkdf]\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pbkdf2 = void 0;\nconst crypto_js_1 = require(\"./crypto.js\");\nconst index_js_1 = require(\"../utils/index.js\");\nlet locked = false;\nconst _pbkdf2 = function (password, salt, iterations, keylen, algo) {\n  return (0, crypto_js_1.pbkdf2Sync)(password, salt, iterations, keylen, algo);\n};\nlet __pbkdf2 = _pbkdf2;\n/**\n *  Return the [[link-pbkdf2]] for %%keylen%% bytes for %%password%% using\n *  the %%salt%% and using %%iterations%% of %%algo%%.\n *\n *  This PBKDF is outdated and should not be used in new projects, but is\n *  required to decrypt older files.\n *\n *  @example:\n *    // The password must be converted to bytes, and it is generally\n *    // best practices to ensure the string has been normalized. Many\n *    // formats explicitly indicate the normalization form to use.\n *    password = \"hello\"\n *    passwordBytes = toUtf8Bytes(password, \"NFKC\")\n *\n *    salt = id(\"some-salt\")\n *\n *    // Compute the PBKDF2\n *    pbkdf2(passwordBytes, salt, 1024, 16, \"sha256\")\n *    //_result:\n */\nfunction pbkdf2(_password, _salt, iterations, keylen, algo) {\n  const password = (0, index_js_1.getBytes)(_password, \"password\");\n  const salt = (0, index_js_1.getBytes)(_salt, \"salt\");\n  return (0, index_js_1.hexlify)(__pbkdf2(password, salt, iterations, keylen, algo));\n}\nexports.pbkdf2 = pbkdf2;\npbkdf2._ = _pbkdf2;\npbkdf2.lock = function () {\n  locked = true;\n};\npbkdf2.register = function (func) {\n  if (locked) {\n    throw new Error(\"pbkdf2 is locked\");\n  }\n  __pbkdf2 = func;\n};\nObject.freeze(pbkdf2);","map":{"version":3,"names":["crypto_js_1","require","index_js_1","locked","_pbkdf2","password","salt","iterations","keylen","algo","pbkdf2Sync","__pbkdf2","pbkdf2","_password","_salt","getBytes","hexlify","exports","_","lock","register","func","Error","Object","freeze"],"sources":["../../src.ts/crypto/pbkdf2.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;;;AAQA,MAAAA,WAAA,GAAAC,OAAA;AAEA,MAAAC,UAAA,GAAAD,OAAA;AAKA,IAAIE,MAAM,GAAG,KAAK;AAElB,MAAMC,OAAO,GAAG,SAAAA,CAASC,QAAoB,EAAEC,IAAgB,EAAEC,UAAkB,EAAEC,MAAc,EAAEC,IAAyB;EAC1H,OAAO,IAAAT,WAAA,CAAAU,UAAU,EAACL,QAAQ,EAAEC,IAAI,EAAEC,UAAU,EAAEC,MAAM,EAAEC,IAAI,CAAC;AAC/D,CAAC;AAED,IAAIE,QAAQ,GAAGP,OAAO;AAEtB;;;;;;;;;;;;;;;;;;;;AAoBA,SAAgBQ,MAAMA,CAACC,SAAoB,EAAEC,KAAgB,EAAEP,UAAkB,EAAEC,MAAc,EAAEC,IAAyB;EACxH,MAAMJ,QAAQ,GAAG,IAAAH,UAAA,CAAAa,QAAQ,EAACF,SAAS,EAAE,UAAU,CAAC;EAChD,MAAMP,IAAI,GAAG,IAAAJ,UAAA,CAAAa,QAAQ,EAACD,KAAK,EAAE,MAAM,CAAC;EACpC,OAAO,IAAAZ,UAAA,CAAAc,OAAO,EAACL,QAAQ,CAACN,QAAQ,EAAEC,IAAI,EAAEC,UAAU,EAAEC,MAAM,EAAEC,IAAI,CAAC,CAAC;AACtE;AAJAQ,OAAA,CAAAL,MAAA,GAAAA,MAAA;AAKAA,MAAM,CAACM,CAAC,GAAGd,OAAO;AAClBQ,MAAM,CAACO,IAAI,GAAG;EAAmBhB,MAAM,GAAG,IAAI;AAAE,CAAC;AACjDS,MAAM,CAACQ,QAAQ,GAAG,UAASC,IAA0H;EACjJ,IAAIlB,MAAM,EAAE;IAAE,MAAM,IAAImB,KAAK,CAAC,kBAAkB,CAAC;;EACjDX,QAAQ,GAAGU,IAAI;AACnB,CAAC;AACDE,MAAM,CAACC,MAAM,CAACZ,MAAM,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}