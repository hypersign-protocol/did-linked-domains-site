{"ast":null,"code":"/**\n * An implementation of the RDF Dataset Normalization specification.\n * This library works in the browser and node.js.\n *\n * BSD 3-Clause License\n * Copyright (c) 2016-2020 Digital Bazaar, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in the\n * documentation and/or other materials provided with the distribution.\n *\n * Neither the name of the Digital Bazaar, Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n'use strict';\n\nconst URDNA2015 = require('./URDNA2015');\nconst URGNA2012 = require('./URGNA2012');\nconst URDNA2015Sync = require('./URDNA2015Sync');\nconst URGNA2012Sync = require('./URGNA2012Sync');\n\n// optional native support\nlet rdfCanonizeNative;\ntry {\n  rdfCanonizeNative = require('rdf-canonize-native');\n} catch (e) {}\nconst api = {};\nmodule.exports = api;\n\n// expose helpers\napi.NQuads = require('./NQuads');\napi.IdentifierIssuer = require('./IdentifierIssuer');\n\n/**\n * Get or set native API.\n *\n * @param api the native API.\n *\n * @return the currently set native API.\n */\napi._rdfCanonizeNative = function (api) {\n  if (api) {\n    rdfCanonizeNative = api;\n  }\n  return rdfCanonizeNative;\n};\n\n/**\n * Asynchronously canonizes an RDF dataset.\n *\n * @param dataset the dataset to canonize.\n * @param options the options to use:\n *          algorithm the canonicalization algorithm to use, `URDNA2015` or\n *            `URGNA2012`.\n *          [useNative] use native implementation (default: false).\n *\n * @return a Promise that resolves to the canonicalized RDF Dataset.\n */\napi.canonize = async function (dataset, options) {\n  // back-compat with legacy dataset\n  if (!Array.isArray(dataset)) {\n    dataset = api.NQuads.legacyDatasetToQuads(dataset);\n  }\n  if (options.useNative) {\n    if (!rdfCanonizeNative) {\n      throw new Error('rdf-canonize-native not available');\n    }\n    // TODO: convert native algorithm to Promise-based async\n    return new Promise((resolve, reject) => rdfCanonizeNative.canonize(dataset, options, (err, canonical) => err ? reject(err) : resolve(canonical)));\n  }\n  if (options.algorithm === 'URDNA2015') {\n    return new URDNA2015(options).main(dataset);\n  }\n  if (options.algorithm === 'URGNA2012') {\n    return new URGNA2012(options).main(dataset);\n  }\n  if (!('algorithm' in options)) {\n    throw new Error('No RDF Dataset Canonicalization algorithm specified.');\n  }\n  throw new Error('Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);\n};\n\n/**\n * This method is no longer available in the public API, it is for testing\n * only. It synchronously canonizes an RDF dataset and does not work in the\n * browser.\n *\n * @param dataset the dataset to canonize.\n * @param options the options to use:\n *          algorithm the canonicalization algorithm to use, `URDNA2015` or\n *            `URGNA2012`.\n *          [useNative] use native implementation (default: false).\n *\n * @return the RDF dataset in canonical form.\n */\napi._canonizeSync = function (dataset, options) {\n  // back-compat with legacy dataset\n  if (!Array.isArray(dataset)) {\n    dataset = api.NQuads.legacyDatasetToQuads(dataset);\n  }\n  if (options.useNative) {\n    if (rdfCanonizeNative) {\n      return rdfCanonizeNative.canonizeSync(dataset, options);\n    }\n    throw new Error('rdf-canonize-native not available');\n  }\n  if (options.algorithm === 'URDNA2015') {\n    return new URDNA2015Sync(options).main(dataset);\n  }\n  if (options.algorithm === 'URGNA2012') {\n    return new URGNA2012Sync(options).main(dataset);\n  }\n  if (!('algorithm' in options)) {\n    throw new Error('No RDF Dataset Canonicalization algorithm specified.');\n  }\n  throw new Error('Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);\n};","map":{"version":3,"names":["URDNA2015","require","URGNA2012","URDNA2015Sync","URGNA2012Sync","rdfCanonizeNative","e","api","module","exports","NQuads","IdentifierIssuer","_rdfCanonizeNative","canonize","dataset","options","Array","isArray","legacyDatasetToQuads","useNative","Error","Promise","resolve","reject","err","canonical","algorithm","main","_canonizeSync","canonizeSync"],"sources":["/home/pratap/hid-ssi-js-sdk/node_modules/ethereumeip712signature2021suite/node_modules/rdf-canonize/lib/index.js"],"sourcesContent":["/**\n * An implementation of the RDF Dataset Normalization specification.\n * This library works in the browser and node.js.\n *\n * BSD 3-Clause License\n * Copyright (c) 2016-2020 Digital Bazaar, Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * Redistributions in binary form must reproduce the above copyright\n * notice, this list of conditions and the following disclaimer in the\n * documentation and/or other materials provided with the distribution.\n *\n * Neither the name of the Digital Bazaar, Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n * IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED\n * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\n * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\n * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n'use strict';\n\nconst URDNA2015 = require('./URDNA2015');\nconst URGNA2012 = require('./URGNA2012');\nconst URDNA2015Sync = require('./URDNA2015Sync');\nconst URGNA2012Sync = require('./URGNA2012Sync');\n\n// optional native support\nlet rdfCanonizeNative;\ntry {\n  rdfCanonizeNative = require('rdf-canonize-native');\n} catch(e) {}\n\nconst api = {};\nmodule.exports = api;\n\n// expose helpers\napi.NQuads = require('./NQuads');\napi.IdentifierIssuer = require('./IdentifierIssuer');\n\n/**\n * Get or set native API.\n *\n * @param api the native API.\n *\n * @return the currently set native API.\n */\napi._rdfCanonizeNative = function(api) {\n  if(api) {\n    rdfCanonizeNative = api;\n  }\n  return rdfCanonizeNative;\n};\n\n/**\n * Asynchronously canonizes an RDF dataset.\n *\n * @param dataset the dataset to canonize.\n * @param options the options to use:\n *          algorithm the canonicalization algorithm to use, `URDNA2015` or\n *            `URGNA2012`.\n *          [useNative] use native implementation (default: false).\n *\n * @return a Promise that resolves to the canonicalized RDF Dataset.\n */\napi.canonize = async function(dataset, options) {\n  // back-compat with legacy dataset\n  if(!Array.isArray(dataset)) {\n    dataset = api.NQuads.legacyDatasetToQuads(dataset);\n  }\n\n  if(options.useNative) {\n    if(!rdfCanonizeNative) {\n      throw new Error('rdf-canonize-native not available');\n    }\n    // TODO: convert native algorithm to Promise-based async\n    return new Promise((resolve, reject) =>\n      rdfCanonizeNative.canonize(dataset, options, (err, canonical) =>\n        err ? reject(err) : resolve(canonical)));\n  }\n\n  if(options.algorithm === 'URDNA2015') {\n    return new URDNA2015(options).main(dataset);\n  }\n  if(options.algorithm === 'URGNA2012') {\n    return new URGNA2012(options).main(dataset);\n  }\n  if(!('algorithm' in options)) {\n    throw new Error('No RDF Dataset Canonicalization algorithm specified.');\n  }\n  throw new Error(\n    'Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);\n};\n\n/**\n * This method is no longer available in the public API, it is for testing\n * only. It synchronously canonizes an RDF dataset and does not work in the\n * browser.\n *\n * @param dataset the dataset to canonize.\n * @param options the options to use:\n *          algorithm the canonicalization algorithm to use, `URDNA2015` or\n *            `URGNA2012`.\n *          [useNative] use native implementation (default: false).\n *\n * @return the RDF dataset in canonical form.\n */\napi._canonizeSync = function(dataset, options) {\n  // back-compat with legacy dataset\n  if(!Array.isArray(dataset)) {\n    dataset = api.NQuads.legacyDatasetToQuads(dataset);\n  }\n\n  if(options.useNative) {\n    if(rdfCanonizeNative) {\n      return rdfCanonizeNative.canonizeSync(dataset, options);\n    }\n    throw new Error('rdf-canonize-native not available');\n  }\n  if(options.algorithm === 'URDNA2015') {\n    return new URDNA2015Sync(options).main(dataset);\n  }\n  if(options.algorithm === 'URGNA2012') {\n    return new URGNA2012Sync(options).main(dataset);\n  }\n  if(!('algorithm' in options)) {\n    throw new Error('No RDF Dataset Canonicalization algorithm specified.');\n  }\n  throw new Error(\n    'Invalid RDF Dataset Canonicalization algorithm: ' + options.algorithm);\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,aAAa,CAAC;AACxC,MAAMC,SAAS,GAAGD,OAAO,CAAC,aAAa,CAAC;AACxC,MAAME,aAAa,GAAGF,OAAO,CAAC,iBAAiB,CAAC;AAChD,MAAMG,aAAa,GAAGH,OAAO,CAAC,iBAAiB,CAAC;;AAEhD;AACA,IAAII,iBAAiB;AACrB,IAAI;EACFA,iBAAiB,GAAGJ,OAAO,CAAC,qBAAqB,CAAC;AACpD,CAAC,CAAC,OAAMK,CAAC,EAAE,CAAC;AAEZ,MAAMC,GAAG,GAAG,CAAC,CAAC;AACdC,MAAM,CAACC,OAAO,GAAGF,GAAG;;AAEpB;AACAA,GAAG,CAACG,MAAM,GAAGT,OAAO,CAAC,UAAU,CAAC;AAChCM,GAAG,CAACI,gBAAgB,GAAGV,OAAO,CAAC,oBAAoB,CAAC;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACAM,GAAG,CAACK,kBAAkB,GAAG,UAASL,GAAG,EAAE;EACrC,IAAGA,GAAG,EAAE;IACNF,iBAAiB,GAAGE,GAAG;EACzB;EACA,OAAOF,iBAAiB;AAC1B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,GAAG,CAACM,QAAQ,GAAG,gBAAeC,OAAO,EAAEC,OAAO,EAAE;EAC9C;EACA,IAAG,CAACC,KAAK,CAACC,OAAO,CAACH,OAAO,CAAC,EAAE;IAC1BA,OAAO,GAAGP,GAAG,CAACG,MAAM,CAACQ,oBAAoB,CAACJ,OAAO,CAAC;EACpD;EAEA,IAAGC,OAAO,CAACI,SAAS,EAAE;IACpB,IAAG,CAACd,iBAAiB,EAAE;MACrB,MAAM,IAAIe,KAAK,CAAC,mCAAmC,CAAC;IACtD;IACA;IACA,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KACjClB,iBAAiB,CAACQ,QAAQ,CAACC,OAAO,EAAEC,OAAO,EAAE,CAACS,GAAG,EAAEC,SAAS,KAC1DD,GAAG,GAAGD,MAAM,CAACC,GAAG,CAAC,GAAGF,OAAO,CAACG,SAAS,CAAC,CAAC,CAAC;EAC9C;EAEA,IAAGV,OAAO,CAACW,SAAS,KAAK,WAAW,EAAE;IACpC,OAAO,IAAI1B,SAAS,CAACe,OAAO,CAAC,CAACY,IAAI,CAACb,OAAO,CAAC;EAC7C;EACA,IAAGC,OAAO,CAACW,SAAS,KAAK,WAAW,EAAE;IACpC,OAAO,IAAIxB,SAAS,CAACa,OAAO,CAAC,CAACY,IAAI,CAACb,OAAO,CAAC;EAC7C;EACA,IAAG,EAAE,WAAW,IAAIC,OAAO,CAAC,EAAE;IAC5B,MAAM,IAAIK,KAAK,CAAC,sDAAsD,CAAC;EACzE;EACA,MAAM,IAAIA,KAAK,CACb,kDAAkD,GAAGL,OAAO,CAACW,SAAS,CAAC;AAC3E,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAnB,GAAG,CAACqB,aAAa,GAAG,UAASd,OAAO,EAAEC,OAAO,EAAE;EAC7C;EACA,IAAG,CAACC,KAAK,CAACC,OAAO,CAACH,OAAO,CAAC,EAAE;IAC1BA,OAAO,GAAGP,GAAG,CAACG,MAAM,CAACQ,oBAAoB,CAACJ,OAAO,CAAC;EACpD;EAEA,IAAGC,OAAO,CAACI,SAAS,EAAE;IACpB,IAAGd,iBAAiB,EAAE;MACpB,OAAOA,iBAAiB,CAACwB,YAAY,CAACf,OAAO,EAAEC,OAAO,CAAC;IACzD;IACA,MAAM,IAAIK,KAAK,CAAC,mCAAmC,CAAC;EACtD;EACA,IAAGL,OAAO,CAACW,SAAS,KAAK,WAAW,EAAE;IACpC,OAAO,IAAIvB,aAAa,CAACY,OAAO,CAAC,CAACY,IAAI,CAACb,OAAO,CAAC;EACjD;EACA,IAAGC,OAAO,CAACW,SAAS,KAAK,WAAW,EAAE;IACpC,OAAO,IAAItB,aAAa,CAACW,OAAO,CAAC,CAACY,IAAI,CAACb,OAAO,CAAC;EACjD;EACA,IAAG,EAAE,WAAW,IAAIC,OAAO,CAAC,EAAE;IAC5B,MAAM,IAAIK,KAAK,CAAC,sDAAsD,CAAC;EACzE;EACA,MAAM,IAAIA,KAAK,CACb,kDAAkD,GAAGL,OAAO,CAACW,SAAS,CAAC;AAC3E,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}