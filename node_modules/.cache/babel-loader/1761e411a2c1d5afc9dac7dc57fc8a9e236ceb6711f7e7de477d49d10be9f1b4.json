{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InfuraProvider = exports.InfuraWebSocketProvider = void 0;\n/**\n *  [[link-infura]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Sepolia Testnet (``sepolia``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:INFURA  [providers-infura]\n */\nconst index_js_1 = require(\"../utils/index.js\");\nconst community_js_1 = require(\"./community.js\");\nconst network_js_1 = require(\"./network.js\");\nconst provider_jsonrpc_js_1 = require(\"./provider-jsonrpc.js\");\nconst provider_websocket_js_1 = require(\"./provider-websocket.js\");\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"mainnet.infura.io\";\n    case \"goerli\":\n      return \"goerli.infura.io\";\n    case \"sepolia\":\n      return \"sepolia.infura.io\";\n    case \"arbitrum\":\n      return \"arbitrum-mainnet.infura.io\";\n    case \"arbitrum-goerli\":\n      return \"arbitrum-goerli.infura.io\";\n    case \"matic\":\n      return \"polygon-mainnet.infura.io\";\n    case \"matic-mumbai\":\n      return \"polygon-mumbai.infura.io\";\n    case \"optimism\":\n      return \"optimism-mainnet.infura.io\";\n    case \"optimism-goerli\":\n      return \"optimism-goerli.infura.io\";\n  }\n  (0, index_js_1.assertArgument)(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **InfuraWebSocketProvider** connects to the [[link-infura]]\n *  WebSocket end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-infura-signup).\n */\nclass InfuraWebSocketProvider extends provider_websocket_js_1.WebSocketProvider {\n  /**\n   *  Creates a new **InfuraWebSocketProvider**.\n   */\n  constructor(network, projectId) {\n    const provider = new InfuraProvider(network, projectId);\n    const req = provider._getConnection();\n    (0, index_js_1.assert)(!req.credentials, \"INFURA WebSocket project secrets unsupported\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"InfuraProvider.getWebSocketProvider()\"\n    });\n    const url = req.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n    super(url, network);\n    /**\n     *  The Project ID for the INFURA connection.\n     */\n    _defineProperty(this, \"projectId\", void 0);\n    /**\n     *  The Project Secret.\n     *\n     *  If null, no authenticated requests are made. This should not\n     *  be used outside of private contexts.\n     */\n    _defineProperty(this, \"projectSecret\", void 0);\n    (0, index_js_1.defineProperties)(this, {\n      projectId: provider.projectId,\n      projectSecret: provider.projectSecret\n    });\n  }\n  isCommunityResource() {\n    return this.projectId === defaultProjectId;\n  }\n}\nexports.InfuraWebSocketProvider = InfuraWebSocketProvider;\n/**\n *  The **InfuraProvider** connects to the [[link-infura]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-infura-signup).\n */\nclass InfuraProvider extends provider_jsonrpc_js_1.JsonRpcProvider {\n  /**\n   *  Creates a new **InfuraProvider**.\n   */\n  constructor(_network, projectId, projectSecret) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    const network = network_js_1.Network.from(_network);\n    if (projectId == null) {\n      projectId = defaultProjectId;\n    }\n    if (projectSecret == null) {\n      projectSecret = null;\n    }\n    const request = InfuraProvider.getRequest(network, projectId, projectSecret);\n    super(request, network, {\n      staticNetwork: network\n    });\n    /**\n     *  The Project ID for the INFURA connection.\n     */\n    _defineProperty(this, \"projectId\", void 0);\n    /**\n     *  The Project Secret.\n     *\n     *  If null, no authenticated requests are made. This should not\n     *  be used outside of private contexts.\n     */\n    _defineProperty(this, \"projectSecret\", void 0);\n    (0, index_js_1.defineProperties)(this, {\n      projectId,\n      projectSecret\n    });\n  }\n  _getProvider(chainId) {\n    try {\n      return new InfuraProvider(chainId, this.projectId, this.projectSecret);\n    } catch (error) {}\n    return super._getProvider(chainId);\n  }\n  isCommunityResource() {\n    return this.projectId === defaultProjectId;\n  }\n  /**\n   *  Creates a new **InfuraWebSocketProvider**.\n   */\n  static getWebSocketProvider(network, projectId) {\n    return new InfuraWebSocketProvider(network, projectId);\n  }\n  /**\n   *  Returns a prepared request for connecting to %%network%%\n   *  with %%projectId%% and %%projectSecret%%.\n   */\n  static getRequest(network, projectId, projectSecret) {\n    if (projectId == null) {\n      projectId = defaultProjectId;\n    }\n    if (projectSecret == null) {\n      projectSecret = null;\n    }\n    const request = new index_js_1.FetchRequest(`https:/\\/${getHost(network.name)}/v3/${projectId}`);\n    request.allowGzip = true;\n    if (projectSecret) {\n      request.setCredentials(\"\", projectSecret);\n    }\n    if (projectId === defaultProjectId) {\n      request.retryFunc = async (request, response, attempt) => {\n        (0, community_js_1.showThrottleMessage)(\"InfuraProvider\");\n        return true;\n      };\n    }\n    return request;\n  }\n}\nexports.InfuraProvider = InfuraProvider;","map":{"version":3,"names":["index_js_1","require","community_js_1","network_js_1","provider_jsonrpc_js_1","provider_websocket_js_1","defaultProjectId","getHost","name","assertArgument","InfuraWebSocketProvider","WebSocketProvider","constructor","network","projectId","provider","InfuraProvider","req","_getConnection","assert","credentials","operation","url","replace","_defineProperty","defineProperties","projectSecret","isCommunityResource","exports","JsonRpcProvider","_network","Network","from","request","getRequest","staticNetwork","_getProvider","chainId","error","getWebSocketProvider","FetchRequest","allowGzip","setCredentials","retryFunc","response","attempt","showThrottleMessage"],"sources":["../../src.ts/providers/provider-infura.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}