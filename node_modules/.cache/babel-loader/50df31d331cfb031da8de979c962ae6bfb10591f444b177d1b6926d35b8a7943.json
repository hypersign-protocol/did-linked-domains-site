{"ast":null,"code":"/*!\n * Copyright (c) 2018 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst ControllerProofPurpose = require('./ControllerProofPurpose');\nmodule.exports = class AuthenticationProofPurpose extends ControllerProofPurpose {\n  constructor({\n    term = 'authentication',\n    controller,\n    challenge,\n    date,\n    domain,\n    maxTimestampDelta = Infinity\n  } = {}) {\n    super({\n      term,\n      controller,\n      date,\n      maxTimestampDelta\n    });\n    if (typeof challenge !== 'string') {\n      throw new TypeError('\"challenge\" must be a string.');\n    }\n    if (domain !== undefined && typeof domain !== 'string') {\n      throw new TypeError('\"domain\" must be a string.');\n    }\n    this.challenge = challenge;\n    this.domain = domain;\n  }\n  async validate(proof, {\n    verificationMethod,\n    documentLoader,\n    expansionMap\n  }) {\n    try {\n      // check challenge\n      if (proof.challenge !== this.challenge) {\n        throw new Error('The challenge is not as expected; ' + `challenge=\"${proof.challenge}\", expected=\"${this.challenge}\"`);\n      }\n\n      // check domain\n      if (this.domain !== undefined && proof.domain !== this.domain) {\n        throw new Error('The domain is not as expected; ' + `domain=\"${proof.domain}\", expected=\"${this.domain}\"`);\n      }\n      return super.validate(proof, {\n        verificationMethod,\n        documentLoader,\n        expansionMap\n      });\n    } catch (error) {\n      return {\n        valid: false,\n        error\n      };\n    }\n  }\n  async update(proof, {\n    document,\n    suite,\n    documentLoader,\n    expansionMap\n  }) {\n    proof = await super.update(proof, {\n      document,\n      suite,\n      documentLoader,\n      expansionMap\n    });\n    proof.challenge = this.challenge;\n    if (this.domain !== undefined) {\n      proof.domain = this.domain;\n    }\n    return proof;\n  }\n};","map":{"version":3,"names":["ControllerProofPurpose","require","module","exports","AuthenticationProofPurpose","constructor","term","controller","challenge","date","domain","maxTimestampDelta","Infinity","TypeError","undefined","validate","proof","verificationMethod","documentLoader","expansionMap","Error","error","valid","update","document","suite"],"sources":["/home/pratap/did-linked-domain/node_modules/jsonld-signatures/lib/purposes/AuthenticationProofPurpose.js"],"sourcesContent":["/*!\n * Copyright (c) 2018 Digital Bazaar, Inc. All rights reserved.\n */\n'use strict';\n\nconst ControllerProofPurpose = require('./ControllerProofPurpose');\n\nmodule.exports = class AuthenticationProofPurpose extends\n  ControllerProofPurpose {\n  constructor({\n    term = 'authentication', controller,\n    challenge, date, domain, maxTimestampDelta = Infinity} = {}) {\n    super({term, controller, date, maxTimestampDelta});\n    if(typeof challenge !== 'string') {\n      throw new TypeError('\"challenge\" must be a string.');\n    }\n    if(domain !== undefined && typeof domain !== 'string') {\n      throw new TypeError('\"domain\" must be a string.');\n    }\n    this.challenge = challenge;\n    this.domain = domain;\n  }\n\n  async validate(proof, {verificationMethod, documentLoader, expansionMap}) {\n    try {\n      // check challenge\n      if(proof.challenge !== this.challenge) {\n        throw new Error('The challenge is not as expected; ' +\n          `challenge=\"${proof.challenge}\", expected=\"${this.challenge}\"`);\n      }\n\n      // check domain\n      if(this.domain !== undefined && proof.domain !== this.domain) {\n        throw new Error('The domain is not as expected; ' +\n          `domain=\"${proof.domain}\", expected=\"${this.domain}\"`);\n      }\n\n      return super.validate(\n        proof, {verificationMethod, documentLoader, expansionMap});\n    } catch(error) {\n      return {valid: false, error};\n    }\n  }\n\n  async update(proof, {document, suite, documentLoader, expansionMap}) {\n    proof = await super.update(\n      proof, {document, suite, documentLoader, expansionMap});\n    proof.challenge = this.challenge;\n    if(this.domain !== undefined) {\n      proof.domain = this.domain;\n    }\n    return proof;\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,YAAY;;AAEZ,MAAMA,sBAAsB,GAAGC,OAAO,CAAC,0BAA0B,CAAC;AAElEC,MAAM,CAACC,OAAO,GAAG,MAAMC,0BAA0B,SAC/CJ,sBAAsB,CAAC;EACvBK,WAAWA,CAAC;IACVC,IAAI,GAAG,gBAAgB;IAAEC,UAAU;IACnCC,SAAS;IAAEC,IAAI;IAAEC,MAAM;IAAEC,iBAAiB,GAAGC;EAAQ,CAAC,GAAG,CAAC,CAAC,EAAE;IAC7D,KAAK,CAAC;MAACN,IAAI;MAAEC,UAAU;MAAEE,IAAI;MAAEE;IAAiB,CAAC,CAAC;IAClD,IAAG,OAAOH,SAAS,KAAK,QAAQ,EAAE;MAChC,MAAM,IAAIK,SAAS,CAAC,+BAA+B,CAAC;IACtD;IACA,IAAGH,MAAM,KAAKI,SAAS,IAAI,OAAOJ,MAAM,KAAK,QAAQ,EAAE;MACrD,MAAM,IAAIG,SAAS,CAAC,4BAA4B,CAAC;IACnD;IACA,IAAI,CAACL,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACE,MAAM,GAAGA,MAAM;EACtB;EAEA,MAAMK,QAAQA,CAACC,KAAK,EAAE;IAACC,kBAAkB;IAAEC,cAAc;IAAEC;EAAY,CAAC,EAAE;IACxE,IAAI;MACF;MACA,IAAGH,KAAK,CAACR,SAAS,KAAK,IAAI,CAACA,SAAS,EAAE;QACrC,MAAM,IAAIY,KAAK,CAAC,oCAAoC,GACjD,cAAaJ,KAAK,CAACR,SAAU,gBAAe,IAAI,CAACA,SAAU,GAAE,CAAC;MACnE;;MAEA;MACA,IAAG,IAAI,CAACE,MAAM,KAAKI,SAAS,IAAIE,KAAK,CAACN,MAAM,KAAK,IAAI,CAACA,MAAM,EAAE;QAC5D,MAAM,IAAIU,KAAK,CAAC,iCAAiC,GAC9C,WAAUJ,KAAK,CAACN,MAAO,gBAAe,IAAI,CAACA,MAAO,GAAE,CAAC;MAC1D;MAEA,OAAO,KAAK,CAACK,QAAQ,CACnBC,KAAK,EAAE;QAACC,kBAAkB;QAAEC,cAAc;QAAEC;MAAY,CAAC,CAAC;IAC9D,CAAC,CAAC,OAAME,KAAK,EAAE;MACb,OAAO;QAACC,KAAK,EAAE,KAAK;QAAED;MAAK,CAAC;IAC9B;EACF;EAEA,MAAME,MAAMA,CAACP,KAAK,EAAE;IAACQ,QAAQ;IAAEC,KAAK;IAAEP,cAAc;IAAEC;EAAY,CAAC,EAAE;IACnEH,KAAK,GAAG,MAAM,KAAK,CAACO,MAAM,CACxBP,KAAK,EAAE;MAACQ,QAAQ;MAAEC,KAAK;MAAEP,cAAc;MAAEC;IAAY,CAAC,CAAC;IACzDH,KAAK,CAACR,SAAS,GAAG,IAAI,CAACA,SAAS;IAChC,IAAG,IAAI,CAACE,MAAM,KAAKI,SAAS,EAAE;MAC5BE,KAAK,CAACN,MAAM,GAAG,IAAI,CAACA,MAAM;IAC5B;IACA,OAAOM,KAAK;EACd;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}