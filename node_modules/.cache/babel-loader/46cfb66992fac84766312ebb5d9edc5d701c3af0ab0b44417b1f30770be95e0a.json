{"ast":null,"code":"\"use strict\";\n\n/**\n *  [[link-quicknode]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Arbitrum (``arbitrum``)\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\n *  - Optimism (``optimism``)\n *  - Optimism Goerli Testnet (``optimism-goerli``)\n *  - Polygon (``matic``)\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\n *\n *  @_subsection: api/providers/thirdparty:QuickNode  [providers-quicknode]\n */\nvar _defineProperty = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QuickNodeProvider = void 0;\nconst index_js_1 = require(\"../utils/index.js\");\nconst community_js_1 = require(\"./community.js\");\nconst network_js_1 = require(\"./network.js\");\nconst provider_jsonrpc_js_1 = require(\"./provider-jsonrpc.js\");\nconst defaultToken = \"919b412a057b5e9c9b6dce193c5a60242d6efadb\";\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"ethers.quiknode.pro\";\n    case \"goerli\":\n      return \"ethers.ethereum-goerli.quiknode.pro\";\n    //case \"sepolia\":\n    //    return \"sepolia.infura.io\";\n    case \"arbitrum\":\n      return \"ethers.arbitrum-mainnet.quiknode.pro\";\n    case \"arbitrum-goerli\":\n      return \"ethers.arbitrum-goerli.quiknode.pro\";\n    case \"matic\":\n      return \"ethers.matic.quiknode.pro\";\n    case \"matic-mumbai\":\n      return \"ethers.matic-testnet.quiknode.pro\";\n    case \"optimism\":\n      return \"ethers.optimism.quiknode.pro\";\n    case \"optimism-goerli\":\n      return \"ethers.optimism-goerli.quiknode.pro\";\n  }\n  (0, index_js_1.assertArgument)(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **QuickNodeProvider** connects to the [[link-quicknode]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API token is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-quicknode).\n */\nclass QuickNodeProvider extends provider_jsonrpc_js_1.JsonRpcProvider {\n  /**\n   *  Creates a new **QuickNodeProvider**.\n   */\n  constructor(_network, token) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    const network = network_js_1.Network.from(_network);\n    if (token == null) {\n      token = defaultToken;\n    }\n    const request = QuickNodeProvider.getRequest(network, token);\n    super(request, network, {\n      staticNetwork: network\n    });\n    /**\n     *  The API token.\n     */\n    _defineProperty(this, \"token\", void 0);\n    (0, index_js_1.defineProperties)(this, {\n      token\n    });\n  }\n  _getProvider(chainId) {\n    try {\n      return new QuickNodeProvider(chainId, this.token);\n    } catch (error) {}\n    return super._getProvider(chainId);\n  }\n  isCommunityResource() {\n    return this.token === defaultToken;\n  }\n  /**\n   *  Returns a new request prepared for %%network%% and the\n   *  %%token%%.\n   */\n  static getRequest(network, token) {\n    if (token == null) {\n      token = defaultToken;\n    }\n    const request = new index_js_1.FetchRequest(`https:/\\/${getHost(network.name)}/${token}`);\n    request.allowGzip = true;\n    //if (projectSecret) { request.setCredentials(\"\", projectSecret); }\n    if (token === defaultToken) {\n      request.retryFunc = async (request, response, attempt) => {\n        (0, community_js_1.showThrottleMessage)(\"QuickNodeProvider\");\n        return true;\n      };\n    }\n    return request;\n  }\n}\nexports.QuickNodeProvider = QuickNodeProvider;","map":{"version":3,"names":["_defineProperty","require","default","index_js_1","community_js_1","network_js_1","provider_jsonrpc_js_1","defaultToken","getHost","name","assertArgument","QuickNodeProvider","JsonRpcProvider","constructor","_network","token","network","Network","from","request","getRequest","staticNetwork","defineProperties","_getProvider","chainId","error","isCommunityResource","FetchRequest","allowGzip","retryFunc","response","attempt","showThrottleMessage","exports"],"sources":["../../src.ts/providers/provider-quicknode.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;;;;;;;;;AAAA,IAAAA,eAAA,GAAAC,OAAA,sFAAAC,OAAA;;;;;AAkBA,MAAAC,UAAA,GAAAF,OAAA;AAIA,MAAAG,cAAA,GAAAH,OAAA;AACA,MAAAI,YAAA,GAAAJ,OAAA;AACA,MAAAK,qBAAA,GAAAL,OAAA;AAOA,MAAMM,YAAY,GAAG,0CAA0C;AAE/D,SAASC,OAAOA,CAACC,IAAY;EACzB,QAAOA,IAAI;IACP,KAAK,SAAS;MACV,OAAO,qBAAqB;IAChC,KAAK,QAAQ;MACT,OAAO,qCAAqC;IAChD;IACA;IAEA,KAAK,UAAU;MACX,OAAO,sCAAsC;IACjD,KAAK,iBAAiB;MAClB,OAAO,qCAAqC;IAChD,KAAK,OAAO;MACR,OAAO,2BAA2B;IACtC,KAAK,cAAc;MACf,OAAO,mCAAmC;IAC9C,KAAK,UAAU;MACX,OAAO,8BAA8B;IACzC,KAAK,iBAAiB;MAClB,OAAO,qCAAqC;;EAGpD,IAAAN,UAAA,CAAAO,cAAc,EAAC,KAAK,EAAE,qBAAqB,EAAE,SAAS,EAAED,IAAI,CAAC;AACjE;AAGA;;;;;;;;;AASA,MAAaE,iBAAkB,SAAQL,qBAAA,CAAAM,eAAe;EAMlD;;;EAGAC,YAAYC,QAAqB,EAAEC,KAAqB;IACpD,IAAID,QAAQ,IAAI,IAAI,EAAE;MAAEA,QAAQ,GAAG,SAAS;;IAC5C,MAAME,OAAO,GAAGX,YAAA,CAAAY,OAAO,CAACC,IAAI,CAACJ,QAAQ,CAAC;IACtC,IAAIC,KAAK,IAAI,IAAI,EAAE;MAAEA,KAAK,GAAGR,YAAY;;IAEzC,MAAMY,OAAO,GAAGR,iBAAiB,CAACS,UAAU,CAACJ,OAAO,EAAED,KAAK,CAAC;IAC5D,KAAK,CAACI,OAAO,EAAEH,OAAO,EAAE;MAAEK,aAAa,EAAEL;IAAO,CAAE,CAAC;IAdvD;;;IAAAhB,eAAA;IAgBI,IAAAG,UAAA,CAAAmB,gBAAgB,EAAoB,IAAI,EAAE;MAAEP;IAAK,CAAE,CAAC;EACxD;EAEAQ,YAAYA,CAACC,OAAe;IACxB,IAAI;MACA,OAAO,IAAIb,iBAAiB,CAACa,OAAO,EAAE,IAAI,CAACT,KAAK,CAAC;KACpD,CAAC,OAAOU,KAAK,EAAE;IAChB,OAAO,KAAK,CAACF,YAAY,CAACC,OAAO,CAAC;EACtC;EAEAE,mBAAmBA,CAAA;IACf,OAAQ,IAAI,CAACX,KAAK,KAAKR,YAAY;EACvC;EAEA;;;;EAIA,OAAOa,UAAUA,CAACJ,OAAgB,EAAED,KAAqB;IACrD,IAAIA,KAAK,IAAI,IAAI,EAAE;MAAEA,KAAK,GAAGR,YAAY;;IAEzC,MAAMY,OAAO,GAAG,IAAIhB,UAAA,CAAAwB,YAAY,CAAC,YAAanB,OAAO,CAACQ,OAAO,CAACP,IAAI,CAAE,IAAKM,KAAM,EAAE,CAAC;IAClFI,OAAO,CAACS,SAAS,GAAG,IAAI;IACxB;IAEA,IAAIb,KAAK,KAAKR,YAAY,EAAE;MACxBY,OAAO,CAACU,SAAS,GAAG,OAAOV,OAAO,EAAEW,QAAQ,EAAEC,OAAO,KAAI;QACrD,IAAA3B,cAAA,CAAA4B,mBAAmB,EAAC,mBAAmB,CAAC;QACxC,OAAO,IAAI;MACf,CAAC;;IAGL,OAAOb,OAAO;EAClB;;AAlDJc,OAAA,CAAAtB,iBAAA,GAAAA,iBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}