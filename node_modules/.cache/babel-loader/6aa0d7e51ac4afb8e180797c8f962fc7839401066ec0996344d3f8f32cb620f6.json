{"ast":null,"code":"\"use strict\";\n\n/**\n *  Generic long-lived socket provider.\n *\n *  Sub-classing notes\n *  - a sub-class MUST call the `_start()` method once connected\n *  - a sub-class MUST override the `_write(string)` method\n *  - a sub-class MUST call `_processMessage(string)` for each message\n *\n *  @_subsection: api/providers/abstract-provider\n */\nvar _classPrivateFieldInitSpec = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _classPrivateFieldSet = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateFieldSet.js\").default;\nvar _classPrivateFieldGet = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateFieldGet.js\").default;\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SocketProvider = exports.SocketEventSubscriber = exports.SocketPendingSubscriber = exports.SocketBlockSubscriber = exports.SocketSubscriber = void 0;\nconst abstract_provider_js_1 = require(\"./abstract-provider.js\");\nconst index_js_1 = require(\"../utils/index.js\");\nconst provider_jsonrpc_js_1 = require(\"./provider-jsonrpc.js\");\n/**\n *  A **SocketSubscriber** uses a socket transport to handle events and\n *  should use [[_emit]] to manage the events.\n */\nvar _provider = /*#__PURE__*/new WeakMap();\nvar _filter = /*#__PURE__*/new WeakMap();\nvar _filterId = /*#__PURE__*/new WeakMap();\nvar _paused = /*#__PURE__*/new WeakMap();\nvar _emitPromise = /*#__PURE__*/new WeakMap();\nclass SocketSubscriber {\n  /**\n   *  The filter.\n   */\n  get filter() {\n    return JSON.parse(_classPrivateFieldGet(this, _filter));\n  }\n  /**\n   *  Creates a new **SocketSubscriber** attached to %%provider%% listening\n   *  to %%filter%%.\n   */\n  constructor(provider, filter) {\n    _classPrivateFieldInitSpec(this, _provider, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _filter, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _filterId, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _paused, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _emitPromise, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _provider, provider);\n    _classPrivateFieldSet(this, _filter, JSON.stringify(filter));\n    _classPrivateFieldSet(this, _filterId, null);\n    _classPrivateFieldSet(this, _paused, null);\n    _classPrivateFieldSet(this, _emitPromise, null);\n  }\n  start() {\n    _classPrivateFieldSet(this, _filterId, _classPrivateFieldGet(this, _provider).send(\"eth_subscribe\", this.filter).then(filterId => {\n      ;\n      _classPrivateFieldGet(this, _provider)._register(filterId, this);\n      return filterId;\n    }));\n  }\n  stop() {\n    _classPrivateFieldGet(this, _filterId).then(filterId => {\n      _classPrivateFieldGet(this, _provider).send(\"eth_unsubscribe\", [filterId]);\n    });\n    _classPrivateFieldSet(this, _filterId, null);\n  }\n  // @TODO: pause should trap the current blockNumber, unsub, and on resume use getLogs\n  //        and resume\n  pause(dropWhilePaused) {\n    (0, index_js_1.assert)(dropWhilePaused, \"preserve logs while paused not supported by SocketSubscriber yet\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"pause(false)\"\n    });\n    _classPrivateFieldSet(this, _paused, !!dropWhilePaused);\n  }\n  resume() {\n    _classPrivateFieldSet(this, _paused, null);\n  }\n  /**\n   *  @_ignore:\n   */\n  _handleMessage(message) {\n    if (_classPrivateFieldGet(this, _filterId) == null) {\n      return;\n    }\n    if (_classPrivateFieldGet(this, _paused) === null) {\n      let emitPromise = _classPrivateFieldGet(this, _emitPromise);\n      if (emitPromise == null) {\n        emitPromise = this._emit(_classPrivateFieldGet(this, _provider), message);\n      } else {\n        emitPromise = emitPromise.then(async () => {\n          await this._emit(_classPrivateFieldGet(this, _provider), message);\n        });\n      }\n      _classPrivateFieldSet(this, _emitPromise, emitPromise.then(() => {\n        if (_classPrivateFieldGet(this, _emitPromise) === emitPromise) {\n          _classPrivateFieldSet(this, _emitPromise, null);\n        }\n      }));\n    }\n  }\n  /**\n   *  Sub-classes **must** override this to emit the events on the\n   *  provider.\n   */\n  async _emit(provider, message) {\n    throw new Error(\"sub-classes must implemente this; _emit\");\n  }\n}\nexports.SocketSubscriber = SocketSubscriber;\n/**\n *  A **SocketBlockSubscriber** listens for ``newHeads`` events and emits\n *  ``\"block\"`` events.\n */\nclass SocketBlockSubscriber extends SocketSubscriber {\n  /**\n   *  @_ignore:\n   */\n  constructor(provider) {\n    super(provider, [\"newHeads\"]);\n  }\n  async _emit(provider, message) {\n    provider.emit(\"block\", parseInt(message.number));\n  }\n}\nexports.SocketBlockSubscriber = SocketBlockSubscriber;\n/**\n *  A **SocketPendingSubscriber** listens for pending transacitons and emits\n *  ``\"pending\"`` events.\n */\nclass SocketPendingSubscriber extends SocketSubscriber {\n  /**\n   *  @_ignore:\n   */\n  constructor(provider) {\n    super(provider, [\"newPendingTransactions\"]);\n  }\n  async _emit(provider, message) {\n    provider.emit(\"pending\", message);\n  }\n}\nexports.SocketPendingSubscriber = SocketPendingSubscriber;\n/**\n *  A **SocketEventSubscriber** listens for event logs.\n */\nvar _logFilter = /*#__PURE__*/new WeakMap();\nclass SocketEventSubscriber extends SocketSubscriber {\n  /**\n   *  The filter.\n   */\n  get logFilter() {\n    return JSON.parse(_classPrivateFieldGet(this, _logFilter));\n  }\n  /**\n   *  @_ignore:\n   */\n  constructor(provider, filter) {\n    super(provider, [\"logs\", filter]);\n    _classPrivateFieldInitSpec(this, _logFilter, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _logFilter, JSON.stringify(filter));\n  }\n  async _emit(provider, message) {\n    provider.emit(this.logFilter, provider._wrapLog(message, provider._network));\n  }\n}\nexports.SocketEventSubscriber = SocketEventSubscriber;\n/**\n *  A **SocketProvider** is backed by a long-lived connection over a\n *  socket, which can subscribe and receive real-time messages over\n *  its communication channel.\n */\nvar _callbacks = /*#__PURE__*/new WeakMap();\nvar _subs = /*#__PURE__*/new WeakMap();\nvar _pending = /*#__PURE__*/new WeakMap();\nclass SocketProvider extends provider_jsonrpc_js_1.JsonRpcApiProvider {\n  /**\n   *  Creates a new **SocketProvider** connected to %%network%%.\n   *\n   *  If unspecified, the network will be discovered.\n   */\n  constructor(network) {\n    super(network, {\n      batchMaxCount: 1\n    });\n    _classPrivateFieldInitSpec(this, _callbacks, {\n      writable: true,\n      value: void 0\n    });\n    // Maps each filterId to its subscriber\n    _classPrivateFieldInitSpec(this, _subs, {\n      writable: true,\n      value: void 0\n    });\n    // If any events come in before a subscriber has finished\n    // registering, queue them\n    _classPrivateFieldInitSpec(this, _pending, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _callbacks, new Map());\n    _classPrivateFieldSet(this, _subs, new Map());\n    _classPrivateFieldSet(this, _pending, new Map());\n  }\n  // This value is only valid after _start has been called\n  /*\n  get _network(): Network {\n      if (this.#network == null) {\n          throw new Error(\"this shouldn't happen\");\n      }\n      return this.#network.clone();\n  }\n  */\n  _getSubscriber(sub) {\n    switch (sub.type) {\n      case \"close\":\n        return new abstract_provider_js_1.UnmanagedSubscriber(\"close\");\n      case \"block\":\n        return new SocketBlockSubscriber(this);\n      case \"pending\":\n        return new SocketPendingSubscriber(this);\n      case \"event\":\n        return new SocketEventSubscriber(this, sub.filter);\n      case \"orphan\":\n        // Handled auto-matically within AbstractProvider\n        // when the log.removed = true\n        if (sub.filter.orphan === \"drop-log\") {\n          return new abstract_provider_js_1.UnmanagedSubscriber(\"drop-log\");\n        }\n    }\n    return super._getSubscriber(sub);\n  }\n  /**\n   *  Register a new subscriber. This is used internalled by Subscribers\n   *  and generally is unecessary unless extending capabilities.\n   */\n  _register(filterId, subscriber) {\n    _classPrivateFieldGet(this, _subs).set(filterId, subscriber);\n    const pending = _classPrivateFieldGet(this, _pending).get(filterId);\n    if (pending) {\n      for (const message of pending) {\n        subscriber._handleMessage(message);\n      }\n      _classPrivateFieldGet(this, _pending).delete(filterId);\n    }\n  }\n  async _send(payload) {\n    // WebSocket provider doesn't accept batches\n    (0, index_js_1.assertArgument)(!Array.isArray(payload), \"WebSocket does not support batch send\", \"payload\", payload);\n    // @TODO: stringify payloads here and store to prevent mutations\n    // Prepare a promise to respond to\n    const promise = new Promise((resolve, reject) => {\n      _classPrivateFieldGet(this, _callbacks).set(payload.id, {\n        payload,\n        resolve,\n        reject\n      });\n    });\n    // Wait until the socket is connected before writing to it\n    await this._waitUntilReady();\n    // Write the request to the socket\n    await this._write(JSON.stringify(payload));\n    return [await promise];\n  }\n  // Sub-classes must call this once they are connected\n  /*\n  async _start(): Promise<void> {\n      if (this.#ready) { return; }\n       for (const { payload } of this.#callbacks.values()) {\n          await this._write(JSON.stringify(payload));\n      }\n       this.#ready = (async function() {\n          await super._start();\n      })();\n  }\n  */\n  /**\n   *  Sub-classes **must** call this with messages received over their\n   *  transport to be processed and dispatched.\n   */\n  async _processMessage(message) {\n    const result = JSON.parse(message);\n    if (result && typeof result === \"object\" && \"id\" in result) {\n      const callback = _classPrivateFieldGet(this, _callbacks).get(result.id);\n      if (callback == null) {\n        this.emit(\"error\", (0, index_js_1.makeError)(\"received result for unknown id\", \"UNKNOWN_ERROR\", {\n          reasonCode: \"UNKNOWN_ID\",\n          result\n        }));\n        return;\n      }\n      _classPrivateFieldGet(this, _callbacks).delete(result.id);\n      callback.resolve(result);\n    } else if (result && result.method === \"eth_subscription\") {\n      const filterId = result.params.subscription;\n      const subscriber = _classPrivateFieldGet(this, _subs).get(filterId);\n      if (subscriber) {\n        subscriber._handleMessage(result.params.result);\n      } else {\n        let pending = _classPrivateFieldGet(this, _pending).get(filterId);\n        if (pending == null) {\n          pending = [];\n          _classPrivateFieldGet(this, _pending).set(filterId, pending);\n        }\n        pending.push(result.params.result);\n      }\n    } else {\n      this.emit(\"error\", (0, index_js_1.makeError)(\"received unexpected message\", \"UNKNOWN_ERROR\", {\n        reasonCode: \"UNEXPECTED_MESSAGE\",\n        result\n      }));\n      return;\n    }\n  }\n  /**\n   *  Sub-classes **must** override this to send %%message%% over their\n   *  transport.\n   */\n  async _write(message) {\n    throw new Error(\"sub-classes must override this\");\n  }\n}\nexports.SocketProvider = SocketProvider;","map":{"version":3,"names":["_classPrivateFieldInitSpec","require","default","_classPrivateFieldSet","_classPrivateFieldGet","abstract_provider_js_1","index_js_1","provider_jsonrpc_js_1","_provider","WeakMap","_filter","_filterId","_paused","_emitPromise","SocketSubscriber","filter","JSON","parse","constructor","provider","writable","value","stringify","start","send","then","filterId","_register","stop","pause","dropWhilePaused","assert","operation","resume","_handleMessage","message","emitPromise","_emit","Error","exports","SocketBlockSubscriber","emit","parseInt","number","SocketPendingSubscriber","_logFilter","SocketEventSubscriber","logFilter","_wrapLog","_network","_callbacks","_subs","_pending","SocketProvider","JsonRpcApiProvider","network","batchMaxCount","Map","_getSubscriber","sub","type","UnmanagedSubscriber","orphan","subscriber","set","pending","get","delete","_send","payload","assertArgument","Array","isArray","promise","Promise","resolve","reject","id","_waitUntilReady","_write","_processMessage","result","callback","makeError","reasonCode","method","params","subscription","push"],"sources":["../../src.ts/providers/provider-socket.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}