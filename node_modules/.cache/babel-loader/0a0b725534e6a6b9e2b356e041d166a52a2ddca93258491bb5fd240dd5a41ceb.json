{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright (c) 2023, Hypermine Pvt. Ltd.\n * All rights reserved.\n * Author: Hypermine Core Team\n */\nrequire(\"core-js/modules/es.array.push.js\");\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst jcs_1 = require(\"jcs\");\nconst vc_js_1 = __importDefault(require(\"vc-js\"));\nconst jsonld_signatures_1 = __importDefault(require(\"jsonld-signatures\"));\nconst did_1 = __importDefault(require(\"../did/did\"));\nconst ed25519_signature_2020_1 = require(\"@digitalbazaar/ed25519-signature-2020\");\nconst ed25519_verification_key_2020_1 = require(\"@digitalbazaar/ed25519-verification-key-2020\");\nconst utils_1 = __importDefault(require(\"../utils\"));\nconst vc_1 = __importDefault(require(\"../credential/vc\"));\nconst {\n  AuthenticationProofPurpose,\n  AssertionProofPurpose\n} = jsonld_signatures_1.default.purposes;\nconst constants_1 = require(\"../constants\");\nconst v1_1 = __importDefault(require(\"../../libs/w3cache/v1\"));\nconst jsonld_signatures_2 = require(\"jsonld-signatures\");\nconst ethereumeip712signature2021suite_1 = require(\"ethereumeip712signature2021suite\");\nconst documentLoader = v1_1.default;\nclass HypersignVerifiablePresentation {\n  constructor(params = {}) {\n    const {\n      namespace,\n      nodeRpcEndpoint,\n      nodeRestEndpoint\n    } = params;\n    this.namespace = namespace && namespace != '' ? namespace : '';\n    const nodeRPCEp = nodeRpcEndpoint ? nodeRpcEndpoint : 'MAIN';\n    const nodeRestEp = nodeRestEndpoint ? nodeRestEndpoint : '';\n    const offlineConstuctorParams = {\n      nodeRpcEndpoint: nodeRPCEp,\n      nodeRestEndpoint: nodeRestEp\n    };\n    this.vc = new vc_1.default(offlineConstuctorParams);\n    this.hsDid = new did_1.default(offlineConstuctorParams);\n    this.id = '';\n    this.type = [];\n    this.verifiableCredential = [];\n    this.holder = '';\n    this.proof = {};\n  }\n  _getId() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const uuid = yield utils_1.default.getUUID();\n      let id;\n      if (this.namespace && this.namespace != '') {\n        id = `${constants_1.VP.SCHEME}:${constants_1.VP.METHOD}:${this.namespace}:${uuid}`;\n      } else {\n        id = `${constants_1.VP.SCHEME}:${constants_1.VP.METHOD}:${uuid}`;\n      }\n      return id;\n    });\n  }\n  /**\n   * Generates a new presentation document\n   * @params\n   *  - params.verifiableCredentials: Array of Verifiable Credentials\n   *  - params.holderDid            : DID of the subject\n   * @returns {Promise<object>}\n   */\n  generate(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const id = yield this._getId();\n      const presentation = vc_js_1.default.createPresentation({\n        verifiableCredential: params.verifiableCredentials,\n        id: id,\n        holder: params.holderDid\n      });\n      return presentation;\n    });\n  }\n  /**\n   * Signs a new presentation document\n   * @params\n   *  - params.presentation         : Array of Verifiable Credentials\n   *  - params.holderDid            : *Optional* DID of the subject\n   *  - params.holderDidDocSigned   : *Optional* DID Doc of the subject\n   *  - params.verificationMethodId : verificationMethodId of holder\n   *  - params.privateKeyMultibase  : Private key associated with the verification method\n   *  - params.challenge            : Any random challenge\n   * @returns {Promise<object>}\n   */\n  sign(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (params.holderDid && params.holderDidDocSigned) {\n        throw new Error('HID-SSI-SDK:: Either holderDid or holderDidDocSigned should be provided');\n      }\n      if (!params.privateKeyMultibase) {\n        throw new Error('HID-SSI-SDK:: params.privateKeyMultibase is required for signing a presentation');\n      }\n      if (!params.presentation) {\n        throw new Error('HID-SSI-SDK:: params.presentation is required for signinng a presentation');\n      }\n      if (!params.challenge) {\n        throw new Error('HID-SSI-SDK:: params.challenge is required for signinng a presentation');\n      }\n      if (!params.verificationMethodId) {\n        throw new Error('HID-SSI-SDK:: params.verificationMethodId is required for signinng a presentation');\n      }\n      if (!this.hsDid) {\n        throw new Error('HID-SSI-SDK:: Error: HypersignVerifiableCredential class is not instantiated with Offlinesigner or have not been initilized');\n      }\n      let resolvedDidDoc;\n      if (params.holderDid) {\n        resolvedDidDoc = yield this.hsDid.resolve({\n          did: params.holderDid\n        });\n      } else if (params.holderDidDocSigned) {\n        resolvedDidDoc = {};\n        resolvedDidDoc.didDocument = params.holderDidDocSigned;\n      } else {\n        throw new Error('HID-SSI-SDK:: params.holderDid or params.holderDidDocSigned is required for signinng a presentation');\n      }\n      const {\n        didDocument: signerDidDoc\n      } = resolvedDidDoc;\n      // TODO: take verification method from params\n      const publicKeyId = params.verificationMethodId; // TODO: bad idea -  should not hardcode it.\n      const publicKeyVerMethod = signerDidDoc['verificationMethod'].find(x => x.id == publicKeyId);\n      const convertedKeyPair = utils_1.default.convertedStableLibKeysIntoEd25519verificationkey2020({\n        publicKey: publicKeyVerMethod.publicKeyMultibase\n      });\n      publicKeyVerMethod['publicKeyMultibase'] = convertedKeyPair.publicKeyMultibase;\n      const keyPair = yield ed25519_verification_key_2020_1.Ed25519VerificationKey2020.from(Object.assign({\n        privateKeyMultibase: params.privateKeyMultibase\n      }, publicKeyVerMethod));\n      const suite = new ed25519_signature_2020_1.Ed25519Signature2020({\n        verificationMethod: publicKeyId,\n        key: keyPair\n      });\n      const signedVP = yield vc_js_1.default.signPresentation({\n        presentation: params.presentation,\n        suite,\n        challenge: params.challenge,\n        documentLoader\n      });\n      return signedVP;\n    });\n  }\n  // https://github.com/digitalbazaar/vc-js/blob/44ca660f62ad3569f338eaaaecb11a7b09949bd2/lib/vc.js#L392\n  /**\n   * Verifies signed presentation document\n   * @params\n   *  - params.signedPresentation         : Signed presentation document\n   *  - params.holderDid                  : DID of the subject\n   *  - params.holderDidDocSigned         : DIDdocument of the subject\n   *  - params.holderVerificationMethodId : verificationMethodId of holder\n   *  - params.issuerDid                  : DID of the issuer\n   *  - params.issuerVerificationMethodId : Optional DIDDoc of the issuer\n   *  - params.domain                     : Optional domain\n   *  - params.challenge                  : Random challenge\n   * @returns {Promise<object>}\n   */\n  verify(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (params.holderDid && params.holderDidDocSigned) {\n        throw new Error('HID-SSI-SDK:: Either holderDid or holderDidDocSigned should be provided');\n      }\n      if (!params.issuerDid) {\n        throw new Error('HID-SSI-SDK:: params.issuerDid is required for verifying a presentation');\n      }\n      if (!params.challenge) {\n        throw new Error('HID-SSI-SDK:: params.challenge is required for verifying a presentation');\n      }\n      if (!params.holderVerificationMethodId) {\n        throw new Error('HID-SSI-SDK:: params.holderVerificationMethodId is required for verifying a presentation');\n      }\n      if (!params.issuerVerificationMethodId) {\n        throw new Error('HID-SSI-SDK:: params.issuerVerificationMethodId is required for verifying a presentation');\n      }\n      if (!this.vc || !this.hsDid) {\n        throw new Error('HID-SSI-SDK:: Error: HypersignVerifiableCredential class is not instantiated with Offlinesigner or have not been initilized');\n      }\n      if (!params.signedPresentation.proof) {\n        throw new Error('HID-SSI-SDK:: params.signedPresentation must be signed');\n      }\n      ///---------------------------------------\n      /// Holder\n      let resolvedDidDoc;\n      if (params.holderDid) {\n        resolvedDidDoc = yield this.hsDid.resolve({\n          did: params.holderDid\n        });\n      } else if (params.holderDidDocSigned) {\n        resolvedDidDoc = {};\n        resolvedDidDoc.didDocument = params.holderDidDocSigned;\n      } else {\n        throw new Error('Either holderDid or holderDidDocSigned should be provided');\n      }\n      const {\n        didDocument: holderDID\n      } = resolvedDidDoc;\n      const holderDidDoc = holderDID;\n      const holderPublicKeyId = params.holderVerificationMethodId;\n      const holderPublicKeyVerMethod = holderDidDoc.verificationMethod.find(x => x.id == holderPublicKeyId);\n      // Connvert the 45 byte pub key of holder into 48 byte\n      const {\n        publicKeyMultibase: holderPublicKeyMultibase\n      } = utils_1.default.convertedStableLibKeysIntoEd25519verificationkey2020({\n        publicKey: holderPublicKeyVerMethod.publicKeyMultibase\n      });\n      holderPublicKeyVerMethod.publicKeyMultibase = holderPublicKeyMultibase;\n      const holderController = {\n        '@context': constants_1.DID.CONTROLLER_CONTEXT,\n        id: holderDidDoc.id,\n        authentication: holderDidDoc.authentication\n      };\n      // TODO:  need to use domainname.\n      const presentationPurpose = new AuthenticationProofPurpose({\n        controller: holderController,\n        challenge: params.challenge\n      });\n      const keyPair = yield ed25519_verification_key_2020_1.Ed25519VerificationKey2020.from(Object.assign({\n        privateKeyMultibase: ''\n      }, holderPublicKeyVerMethod));\n      const vpSuite_holder = new ed25519_signature_2020_1.Ed25519Signature2020({\n        verificationMethod: holderPublicKeyId,\n        key: keyPair\n      });\n      ///---------------------------------------\n      /// Issuer\n      const {\n        didDocument: issuerDID\n      } = yield this.hsDid.resolve({\n        did: params.issuerDid\n      });\n      if (issuerDID === null || issuerDID === undefined) {\n        throw new Error('Issuer DID is not registered');\n      }\n      const issuerDidDoc = issuerDID;\n      const issuerDidDocController = issuerDidDoc.controller;\n      const issuerDidDocControllerVerificationMethod = params.issuerVerificationMethodId.split('#')[0];\n      if (!issuerDidDocController.includes(issuerDidDocControllerVerificationMethod)) {\n        throw new Error(issuerDidDocControllerVerificationMethod + ' is not a controller of ' + params.issuerDid);\n      }\n      const issuerPublicKeyId = params.issuerVerificationMethodId;\n      let issuerPublicKeyVerMethod = issuerDidDoc.verificationMethod.find(x => x.id == issuerPublicKeyId);\n      if (issuerPublicKeyVerMethod === null || issuerPublicKeyVerMethod === undefined) {\n        const {\n          didDocument: controllerDidDocT\n        } = yield this.hsDid.resolve({\n          did: issuerDidDocControllerVerificationMethod\n        });\n        const controllerDidDoc = controllerDidDocT;\n        issuerPublicKeyVerMethod = controllerDidDoc.verificationMethod.find(x => x.id == issuerPublicKeyId);\n      }\n      // Connvert the 45 byte pub key of issuer into 48 byte\n      const {\n        publicKeyMultibase: issuerPublicKeyMultibase\n      } = utils_1.default.convertedStableLibKeysIntoEd25519verificationkey2020({\n        publicKey: issuerPublicKeyVerMethod.publicKeyMultibase\n      });\n      issuerPublicKeyVerMethod.publicKeyMultibase = issuerPublicKeyMultibase;\n      const issuerController = {\n        '@context': constants_1.DID.CONTROLLER_CONTEXT,\n        id: issuerDidDoc.id,\n        assertionMethod: issuerDidDoc.assertionMethod\n      };\n      const purpose = new AssertionProofPurpose({\n        controller: issuerController\n      });\n      const issuerKeyPair = yield ed25519_verification_key_2020_1.Ed25519VerificationKey2020.from(Object.assign({\n        privateKeyMultibase: ''\n      }, issuerPublicKeyVerMethod));\n      const vcSuite_issuer = new ed25519_signature_2020_1.Ed25519Signature2020({\n        verificationMethod: issuerPublicKeyId,\n        key: issuerKeyPair\n      });\n      /* eslint-disable */\n      const that = this;\n      /* eslint-enable */\n      const result = yield vc_js_1.default.verify({\n        presentation: params.signedPresentation,\n        presentationPurpose,\n        purpose,\n        suite: [vpSuite_holder, vcSuite_issuer],\n        documentLoader,\n        unsignedPresentation: true,\n        checkStatus: function (options) {\n          return __awaiter(this, void 0, void 0, function* () {\n            return yield that.vc.checkCredentialStatus({\n              credentialId: options.credential.id\n            });\n          });\n        }\n      });\n      return result;\n    });\n  }\n  signByClientSpec(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!params.holderDid) {\n        throw new Error('HID-SSI-SDK:: Either holderDid or holderDidDocSigned should be provided');\n      }\n      if (!params.presentation) {\n        throw new Error('HID-SSI-SDK:: params.presentation is required for signinng a presentation');\n      }\n      if (!params.challenge) {\n        throw new Error('HID-SSI-SDK:: params.challenge is required for signinng a presentation');\n      }\n      if (!params.verificationMethodId) {\n        throw new Error('HID-SSI-SDK:: params.verificationMethodId is required for signinng a presentation');\n      }\n      if (!this.hsDid) {\n        throw new Error('HID-SSI-SDK:: Error: HypersignVerifiableCredential class is not instantiated with Offlinesigner or have not been initilized');\n      }\n      let resolvedDidDoc;\n      if (params.holderDid) {\n        resolvedDidDoc = yield this.hsDid.resolve({\n          did: params.holderDid\n        });\n      } else {\n        throw new Error('holderDid should be provided');\n      }\n      const vcs = [];\n      params.presentation.verifiableCredential.forEach(vc => {\n        return vcs.push(jcs_1.JCS.cannonicalize(vc));\n      });\n      params.presentation.verifiableCredential = Array();\n      params.presentation.verifiableCredential = vcs;\n      const EthereumEip712Signature2021obj = new ethereumeip712signature2021suite_1.EthereumEip712Signature2021({}, params.web3Obj);\n      const proof = yield EthereumEip712Signature2021obj.createProof({\n        document: params.presentation,\n        purpose: new jsonld_signatures_2.purposes.AuthenticationProofPurpose({\n          challenge: params.challenge,\n          domain: params.domain,\n          controller: {\n            '@context': constants_1.DID.CONTROLLER_CONTEXT,\n            id: resolvedDidDoc.didDocument.id,\n            authentication: resolvedDidDoc.didDocument.authentication\n          }\n        }),\n        verificationMethod: params.verificationMethodId,\n        date: new Date().toISOString(),\n        documentLoader,\n        domain: params.domain ? {\n          name: params.domain\n        } : undefined\n      });\n      params.presentation.proof = proof;\n      const signedVP = params.presentation;\n      return signedVP;\n    });\n  }\n  verifyByClientSpec(params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (params.holderDid && params.holderDidDocSigned) {\n          throw new Error('HID-SSI-SDK:: Either holderDid or holderDidDocSigned should be provided');\n        }\n        if (!params.issuerDid) {\n          throw new Error('HID-SSI-SDK:: params.issuerDid is required for verifying a presentation');\n        }\n        if (!params.challenge) {\n          throw new Error('HID-SSI-SDK:: params.challenge is required for verifying a presentation');\n        }\n        if (!params.holderVerificationMethodId) {\n          throw new Error('HID-SSI-SDK:: params.holderVerificationMethodId is required for verifying a presentation');\n        }\n        if (!params.issuerVerificationMethodId) {\n          throw new Error('HID-SSI-SDK:: params.issuerVerificationMethodId is required for verifying a presentation');\n        }\n        if (!this.vc || !this.hsDid) {\n          throw new Error('HID-SSI-SDK:: Error: HypersignVerifiableCredential class is not instantiated with Offlinesigner or have not been initilized');\n        }\n        if (!params.signedPresentation.proof) {\n          throw new Error('HID-SSI-SDK:: params.signedPresentation must be signed');\n        }\n        // Holder DID\n        let resolvedDidDoc;\n        if (params.holderDid) {\n          resolvedDidDoc = yield this.hsDid.resolve({\n            did: params.holderDid\n          });\n        } else if (params.holderDidDocSigned) {\n          resolvedDidDoc = {};\n          resolvedDidDoc.didDocument = params.holderDidDocSigned;\n        } else {\n          throw new Error('Either holderDid or holderDidDocSigned should be provided');\n        }\n        // Issuer DID\n        const {\n          didDocument: issuerDID\n        } = yield this.hsDid.resolve({\n          did: params.issuerDid\n        });\n        if (issuerDID === null || issuerDID === undefined) {\n          throw new Error('Issuer DID is not registered');\n        }\n        const publicKeyId = params.issuerVerificationMethodId;\n        const issuerDidDoc = issuerDID;\n        const publicKeyVerMethod = issuerDidDoc.verificationMethod.find(x => x.id == publicKeyId);\n        // TODO: Get rid of this hack later.\n        // Convert 45 byte publick key into 48\n        const {\n          publicKeyMultibase\n        } = utils_1.default.convertedStableLibKeysIntoEd25519verificationkey2020({\n          publicKey: publicKeyVerMethod.publicKeyMultibase\n        });\n        publicKeyVerMethod.publicKeyMultibase = publicKeyMultibase;\n        const assertionController = {\n          '@context': ['DID.CONTROLLER_CONTEXT'],\n          id: issuerDidDoc.id,\n          assertionMethod: issuerDidDoc.assertionMethod\n        };\n        const keyPair = yield ed25519_verification_key_2020_1.Ed25519VerificationKey2020.from(Object.assign({\n          privateKeyMultibase: ''\n        }, publicKeyVerMethod));\n        const suite = new ed25519_signature_2020_1.Ed25519Signature2020({\n          verificationMethod: publicKeyId,\n          key: keyPair\n        });\n        const EthereumEip712Signature2021obj = new ethereumeip712signature2021suite_1.EthereumEip712Signature2021({}, params.web3Obj);\n        /* eslint-disable */\n        const that = this;\n        const checkStatus = function (options) {\n          return __awaiter(this, void 0, void 0, function* () {\n            return yield that.vc.checkCredentialStatus({\n              credentialId: options.credential.id\n            });\n          });\n        };\n        let finalResult = {\n          verified: false,\n          credentialResults: Array(),\n          presentationResult: {},\n          error: null\n        };\n        switch (params.signedPresentation.proof['type']) {\n          case 'EthereumEip712Signature2021':\n            {\n              const res = Array();\n              const VCs = params.signedPresentation.verifiableCredential;\n              for (let i = 0; i < VCs.length; i++) {\n                const result = yield vc_js_1.default.verifyCredential({\n                  credential: JSON.parse(VCs[i]),\n                  controller: assertionController,\n                  suite,\n                  documentLoader,\n                  checkStatus\n                });\n                res.push(result);\n              }\n              const proof = params.signedPresentation.proof;\n              const document = Object.assign({}, params.signedPresentation);\n              delete document.proof;\n              const verificaitonResult = yield EthereumEip712Signature2021obj.verifyProof({\n                document,\n                domain: params.domain ? {\n                  name: params.domain\n                } : undefined,\n                proof,\n                types: params.signedPresentation.proof['eip712'].types,\n                purpose: new AuthenticationProofPurpose({\n                  challenge: params.challenge,\n                  domain: params.domain,\n                  controller: {\n                    '@context': 'DID.CONTROLLER_CONTEXT',\n                    id: resolvedDidDoc.didDocument.id,\n                    authentication: resolvedDidDoc.didDocument.authentication\n                  }\n                }),\n                documentLoader\n              });\n              if (!verificaitonResult.verified) {\n                throw verificaitonResult.error;\n              }\n              finalResult = {\n                verified: true,\n                credentialResults: res,\n                presentationResult: verificaitonResult,\n                error: null\n              };\n              break;\n            }\n          case 'Ed25519Signature2020':\n            {\n              throw new Error('HID-SSI-SDK:: Error: Ed25519Signature2020 is not supported yet');\n              break;\n            }\n          default:\n            {\n              throw new Error('HID-SSI-SDK:: Error: Invalid proof type');\n            }\n        }\n        return finalResult;\n      } catch (error) {\n        return {\n          verified: false,\n          credentialResults: Array(),\n          presentationResult: {},\n          error: error\n        };\n      }\n    });\n  }\n}\nexports.default = HypersignVerifiablePresentation;","map":{"version":3,"names":["require","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__importDefault","mod","__esModule","Object","defineProperty","exports","jcs_1","vc_js_1","jsonld_signatures_1","did_1","ed25519_signature_2020_1","ed25519_verification_key_2020_1","utils_1","vc_1","AuthenticationProofPurpose","AssertionProofPurpose","default","purposes","constants_1","v1_1","jsonld_signatures_2","ethereumeip712signature2021suite_1","documentLoader","HypersignVerifiablePresentation","constructor","params","namespace","nodeRpcEndpoint","nodeRestEndpoint","nodeRPCEp","nodeRestEp","offlineConstuctorParams","vc","hsDid","id","type","verifiableCredential","holder","proof","_getId","uuid","getUUID","VP","SCHEME","METHOD","generate","presentation","createPresentation","verifiableCredentials","holderDid","sign","holderDidDocSigned","Error","privateKeyMultibase","challenge","verificationMethodId","resolvedDidDoc","did","didDocument","signerDidDoc","publicKeyId","publicKeyVerMethod","find","x","convertedKeyPair","convertedStableLibKeysIntoEd25519verificationkey2020","publicKey","publicKeyMultibase","keyPair","Ed25519VerificationKey2020","from","assign","suite","Ed25519Signature2020","verificationMethod","key","signedVP","signPresentation","verify","issuerDid","holderVerificationMethodId","issuerVerificationMethodId","signedPresentation","holderDID","holderDidDoc","holderPublicKeyId","holderPublicKeyVerMethod","holderPublicKeyMultibase","holderController","DID","CONTROLLER_CONTEXT","authentication","presentationPurpose","controller","vpSuite_holder","issuerDID","undefined","issuerDidDoc","issuerDidDocController","issuerDidDocControllerVerificationMethod","split","includes","issuerPublicKeyId","issuerPublicKeyVerMethod","controllerDidDocT","controllerDidDoc","issuerPublicKeyMultibase","issuerController","assertionMethod","purpose","issuerKeyPair","vcSuite_issuer","that","unsignedPresentation","checkStatus","options","checkCredentialStatus","credentialId","credential","signByClientSpec","vcs","forEach","push","JCS","cannonicalize","Array","EthereumEip712Signature2021obj","EthereumEip712Signature2021","web3Obj","createProof","document","domain","date","Date","toISOString","name","verifyByClientSpec","assertionController","finalResult","verified","credentialResults","presentationResult","error","res","VCs","i","length","verifyCredential","JSON","parse","verificaitonResult","verifyProof","types"],"sources":["/home/pratap/hid-ssi-js-sdk/build/src/presentation/vp.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) 2023, Hypermine Pvt. Ltd.\n * All rights reserved.\n * Author: Hypermine Core Team\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst jcs_1 = require(\"jcs\");\nconst vc_js_1 = __importDefault(require(\"vc-js\"));\nconst jsonld_signatures_1 = __importDefault(require(\"jsonld-signatures\"));\nconst did_1 = __importDefault(require(\"../did/did\"));\nconst ed25519_signature_2020_1 = require(\"@digitalbazaar/ed25519-signature-2020\");\nconst ed25519_verification_key_2020_1 = require(\"@digitalbazaar/ed25519-verification-key-2020\");\nconst utils_1 = __importDefault(require(\"../utils\"));\nconst vc_1 = __importDefault(require(\"../credential/vc\"));\nconst { AuthenticationProofPurpose, AssertionProofPurpose } = jsonld_signatures_1.default.purposes;\nconst constants_1 = require(\"../constants\");\nconst v1_1 = __importDefault(require(\"../../libs/w3cache/v1\"));\nconst jsonld_signatures_2 = require(\"jsonld-signatures\");\nconst ethereumeip712signature2021suite_1 = require(\"ethereumeip712signature2021suite\");\nconst documentLoader = v1_1.default;\nclass HypersignVerifiablePresentation {\n    constructor(params = {}) {\n        const { namespace, nodeRpcEndpoint, nodeRestEndpoint } = params;\n        this.namespace = namespace && namespace != '' ? namespace : '';\n        const nodeRPCEp = nodeRpcEndpoint ? nodeRpcEndpoint : 'MAIN';\n        const nodeRestEp = nodeRestEndpoint ? nodeRestEndpoint : '';\n        const offlineConstuctorParams = { nodeRpcEndpoint: nodeRPCEp, nodeRestEndpoint: nodeRestEp };\n        this.vc = new vc_1.default(offlineConstuctorParams);\n        this.hsDid = new did_1.default(offlineConstuctorParams);\n        this.id = '';\n        this.type = [];\n        this.verifiableCredential = [];\n        this.holder = '';\n        this.proof = {};\n    }\n    _getId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const uuid = yield utils_1.default.getUUID();\n            let id;\n            if (this.namespace && this.namespace != '') {\n                id = `${constants_1.VP.SCHEME}:${constants_1.VP.METHOD}:${this.namespace}:${uuid}`;\n            }\n            else {\n                id = `${constants_1.VP.SCHEME}:${constants_1.VP.METHOD}:${uuid}`;\n            }\n            return id;\n        });\n    }\n    /**\n     * Generates a new presentation document\n     * @params\n     *  - params.verifiableCredentials: Array of Verifiable Credentials\n     *  - params.holderDid            : DID of the subject\n     * @returns {Promise<object>}\n     */\n    generate(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const id = yield this._getId();\n            const presentation = vc_js_1.default.createPresentation({\n                verifiableCredential: params.verifiableCredentials,\n                id: id,\n                holder: params.holderDid,\n            });\n            return presentation;\n        });\n    }\n    /**\n     * Signs a new presentation document\n     * @params\n     *  - params.presentation         : Array of Verifiable Credentials\n     *  - params.holderDid            : *Optional* DID of the subject\n     *  - params.holderDidDocSigned   : *Optional* DID Doc of the subject\n     *  - params.verificationMethodId : verificationMethodId of holder\n     *  - params.privateKeyMultibase  : Private key associated with the verification method\n     *  - params.challenge            : Any random challenge\n     * @returns {Promise<object>}\n     */\n    sign(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (params.holderDid && params.holderDidDocSigned) {\n                throw new Error('HID-SSI-SDK:: Either holderDid or holderDidDocSigned should be provided');\n            }\n            if (!params.privateKeyMultibase) {\n                throw new Error('HID-SSI-SDK:: params.privateKeyMultibase is required for signing a presentation');\n            }\n            if (!params.presentation) {\n                throw new Error('HID-SSI-SDK:: params.presentation is required for signinng a presentation');\n            }\n            if (!params.challenge) {\n                throw new Error('HID-SSI-SDK:: params.challenge is required for signinng a presentation');\n            }\n            if (!params.verificationMethodId) {\n                throw new Error('HID-SSI-SDK:: params.verificationMethodId is required for signinng a presentation');\n            }\n            if (!this.hsDid) {\n                throw new Error('HID-SSI-SDK:: Error: HypersignVerifiableCredential class is not instantiated with Offlinesigner or have not been initilized');\n            }\n            let resolvedDidDoc;\n            if (params.holderDid) {\n                resolvedDidDoc = yield this.hsDid.resolve({ did: params.holderDid });\n            }\n            else if (params.holderDidDocSigned) {\n                resolvedDidDoc = {};\n                resolvedDidDoc.didDocument = params.holderDidDocSigned;\n            }\n            else {\n                throw new Error('HID-SSI-SDK:: params.holderDid or params.holderDidDocSigned is required for signinng a presentation');\n            }\n            const { didDocument: signerDidDoc } = resolvedDidDoc;\n            // TODO: take verification method from params\n            const publicKeyId = params.verificationMethodId; // TODO: bad idea -  should not hardcode it.\n            const publicKeyVerMethod = signerDidDoc['verificationMethod'].find((x) => x.id == publicKeyId);\n            const convertedKeyPair = utils_1.default.convertedStableLibKeysIntoEd25519verificationkey2020({\n                publicKey: publicKeyVerMethod.publicKeyMultibase,\n            });\n            publicKeyVerMethod['publicKeyMultibase'] = convertedKeyPair.publicKeyMultibase;\n            const keyPair = yield ed25519_verification_key_2020_1.Ed25519VerificationKey2020.from(Object.assign({ privateKeyMultibase: params.privateKeyMultibase }, publicKeyVerMethod));\n            const suite = new ed25519_signature_2020_1.Ed25519Signature2020({\n                verificationMethod: publicKeyId,\n                key: keyPair,\n            });\n            const signedVP = yield vc_js_1.default.signPresentation({\n                presentation: params.presentation,\n                suite,\n                challenge: params.challenge,\n                documentLoader,\n            });\n            return signedVP;\n        });\n    }\n    // https://github.com/digitalbazaar/vc-js/blob/44ca660f62ad3569f338eaaaecb11a7b09949bd2/lib/vc.js#L392\n    /**\n     * Verifies signed presentation document\n     * @params\n     *  - params.signedPresentation         : Signed presentation document\n     *  - params.holderDid                  : DID of the subject\n     *  - params.holderDidDocSigned         : DIDdocument of the subject\n     *  - params.holderVerificationMethodId : verificationMethodId of holder\n     *  - params.issuerDid                  : DID of the issuer\n     *  - params.issuerVerificationMethodId : Optional DIDDoc of the issuer\n     *  - params.domain                     : Optional domain\n     *  - params.challenge                  : Random challenge\n     * @returns {Promise<object>}\n     */\n    verify(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (params.holderDid && params.holderDidDocSigned) {\n                throw new Error('HID-SSI-SDK:: Either holderDid or holderDidDocSigned should be provided');\n            }\n            if (!params.issuerDid) {\n                throw new Error('HID-SSI-SDK:: params.issuerDid is required for verifying a presentation');\n            }\n            if (!params.challenge) {\n                throw new Error('HID-SSI-SDK:: params.challenge is required for verifying a presentation');\n            }\n            if (!params.holderVerificationMethodId) {\n                throw new Error('HID-SSI-SDK:: params.holderVerificationMethodId is required for verifying a presentation');\n            }\n            if (!params.issuerVerificationMethodId) {\n                throw new Error('HID-SSI-SDK:: params.issuerVerificationMethodId is required for verifying a presentation');\n            }\n            if (!this.vc || !this.hsDid) {\n                throw new Error('HID-SSI-SDK:: Error: HypersignVerifiableCredential class is not instantiated with Offlinesigner or have not been initilized');\n            }\n            if (!params.signedPresentation.proof) {\n                throw new Error('HID-SSI-SDK:: params.signedPresentation must be signed');\n            }\n            ///---------------------------------------\n            /// Holder\n            let resolvedDidDoc;\n            if (params.holderDid) {\n                resolvedDidDoc = yield this.hsDid.resolve({ did: params.holderDid });\n            }\n            else if (params.holderDidDocSigned) {\n                resolvedDidDoc = {};\n                resolvedDidDoc.didDocument = params.holderDidDocSigned;\n            }\n            else {\n                throw new Error('Either holderDid or holderDidDocSigned should be provided');\n            }\n            const { didDocument: holderDID } = resolvedDidDoc;\n            const holderDidDoc = holderDID;\n            const holderPublicKeyId = params.holderVerificationMethodId;\n            const holderPublicKeyVerMethod = holderDidDoc.verificationMethod.find((x) => x.id == holderPublicKeyId);\n            // Connvert the 45 byte pub key of holder into 48 byte\n            const { publicKeyMultibase: holderPublicKeyMultibase } = utils_1.default.convertedStableLibKeysIntoEd25519verificationkey2020({\n                publicKey: holderPublicKeyVerMethod.publicKeyMultibase,\n            });\n            holderPublicKeyVerMethod.publicKeyMultibase = holderPublicKeyMultibase;\n            const holderController = {\n                '@context': constants_1.DID.CONTROLLER_CONTEXT,\n                id: holderDidDoc.id,\n                authentication: holderDidDoc.authentication,\n            };\n            // TODO:  need to use domainname.\n            const presentationPurpose = new AuthenticationProofPurpose({\n                controller: holderController,\n                challenge: params.challenge,\n            });\n            const keyPair = yield ed25519_verification_key_2020_1.Ed25519VerificationKey2020.from(Object.assign({ privateKeyMultibase: '' }, holderPublicKeyVerMethod));\n            const vpSuite_holder = new ed25519_signature_2020_1.Ed25519Signature2020({\n                verificationMethod: holderPublicKeyId,\n                key: keyPair,\n            });\n            ///---------------------------------------\n            /// Issuer\n            const { didDocument: issuerDID } = yield this.hsDid.resolve({ did: params.issuerDid });\n            if (issuerDID === null || issuerDID === undefined) {\n                throw new Error('Issuer DID is not registered');\n            }\n            const issuerDidDoc = issuerDID;\n            const issuerDidDocController = issuerDidDoc.controller;\n            const issuerDidDocControllerVerificationMethod = params.issuerVerificationMethodId.split('#')[0];\n            if (!issuerDidDocController.includes(issuerDidDocControllerVerificationMethod)) {\n                throw new Error(issuerDidDocControllerVerificationMethod + ' is not a controller of ' + params.issuerDid);\n            }\n            const issuerPublicKeyId = params.issuerVerificationMethodId;\n            let issuerPublicKeyVerMethod = issuerDidDoc.verificationMethod.find((x) => x.id == issuerPublicKeyId);\n            if (issuerPublicKeyVerMethod === null || issuerPublicKeyVerMethod === undefined) {\n                const { didDocument: controllerDidDocT } = yield this.hsDid.resolve({\n                    did: issuerDidDocControllerVerificationMethod,\n                });\n                const controllerDidDoc = controllerDidDocT;\n                issuerPublicKeyVerMethod = controllerDidDoc.verificationMethod.find((x) => x.id == issuerPublicKeyId);\n            }\n            // Connvert the 45 byte pub key of issuer into 48 byte\n            const { publicKeyMultibase: issuerPublicKeyMultibase } = utils_1.default.convertedStableLibKeysIntoEd25519verificationkey2020({\n                publicKey: issuerPublicKeyVerMethod.publicKeyMultibase,\n            });\n            issuerPublicKeyVerMethod.publicKeyMultibase = issuerPublicKeyMultibase;\n            const issuerController = {\n                '@context': constants_1.DID.CONTROLLER_CONTEXT,\n                id: issuerDidDoc.id,\n                assertionMethod: issuerDidDoc.assertionMethod,\n            };\n            const purpose = new AssertionProofPurpose({\n                controller: issuerController,\n            });\n            const issuerKeyPair = yield ed25519_verification_key_2020_1.Ed25519VerificationKey2020.from(Object.assign({ privateKeyMultibase: '' }, issuerPublicKeyVerMethod));\n            const vcSuite_issuer = new ed25519_signature_2020_1.Ed25519Signature2020({\n                verificationMethod: issuerPublicKeyId,\n                key: issuerKeyPair,\n            });\n            /* eslint-disable */\n            const that = this;\n            /* eslint-enable */\n            const result = yield vc_js_1.default.verify({\n                presentation: params.signedPresentation,\n                presentationPurpose,\n                purpose,\n                suite: [vpSuite_holder, vcSuite_issuer],\n                documentLoader,\n                unsignedPresentation: true,\n                checkStatus: function (options) {\n                    return __awaiter(this, void 0, void 0, function* () {\n                        return yield that.vc.checkCredentialStatus({ credentialId: options.credential.id });\n                    });\n                },\n            });\n            return result;\n        });\n    }\n    signByClientSpec(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!params.holderDid) {\n                throw new Error('HID-SSI-SDK:: Either holderDid or holderDidDocSigned should be provided');\n            }\n            if (!params.presentation) {\n                throw new Error('HID-SSI-SDK:: params.presentation is required for signinng a presentation');\n            }\n            if (!params.challenge) {\n                throw new Error('HID-SSI-SDK:: params.challenge is required for signinng a presentation');\n            }\n            if (!params.verificationMethodId) {\n                throw new Error('HID-SSI-SDK:: params.verificationMethodId is required for signinng a presentation');\n            }\n            if (!this.hsDid) {\n                throw new Error('HID-SSI-SDK:: Error: HypersignVerifiableCredential class is not instantiated with Offlinesigner or have not been initilized');\n            }\n            let resolvedDidDoc;\n            if (params.holderDid) {\n                resolvedDidDoc = yield this.hsDid.resolve({ did: params.holderDid });\n            }\n            else {\n                throw new Error('holderDid should be provided');\n            }\n            const vcs = [];\n            params.presentation.verifiableCredential.forEach((vc) => {\n                return vcs.push(jcs_1.JCS.cannonicalize(vc));\n            });\n            params.presentation.verifiableCredential = Array();\n            params.presentation.verifiableCredential = vcs;\n            const EthereumEip712Signature2021obj = new ethereumeip712signature2021suite_1.EthereumEip712Signature2021({}, params.web3Obj);\n            const proof = yield EthereumEip712Signature2021obj.createProof({\n                document: params.presentation,\n                purpose: new jsonld_signatures_2.purposes.AuthenticationProofPurpose({\n                    challenge: params.challenge,\n                    domain: params.domain,\n                    controller: {\n                        '@context': constants_1.DID.CONTROLLER_CONTEXT,\n                        id: resolvedDidDoc.didDocument.id,\n                        authentication: resolvedDidDoc.didDocument.authentication,\n                    },\n                }),\n                verificationMethod: params.verificationMethodId,\n                date: new Date().toISOString(),\n                documentLoader,\n                domain: params.domain ? { name: params.domain } : undefined,\n            });\n            params.presentation.proof = proof;\n            const signedVP = params.presentation;\n            return signedVP;\n        });\n    }\n    verifyByClientSpec(params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                if (params.holderDid && params.holderDidDocSigned) {\n                    throw new Error('HID-SSI-SDK:: Either holderDid or holderDidDocSigned should be provided');\n                }\n                if (!params.issuerDid) {\n                    throw new Error('HID-SSI-SDK:: params.issuerDid is required for verifying a presentation');\n                }\n                if (!params.challenge) {\n                    throw new Error('HID-SSI-SDK:: params.challenge is required for verifying a presentation');\n                }\n                if (!params.holderVerificationMethodId) {\n                    throw new Error('HID-SSI-SDK:: params.holderVerificationMethodId is required for verifying a presentation');\n                }\n                if (!params.issuerVerificationMethodId) {\n                    throw new Error('HID-SSI-SDK:: params.issuerVerificationMethodId is required for verifying a presentation');\n                }\n                if (!this.vc || !this.hsDid) {\n                    throw new Error('HID-SSI-SDK:: Error: HypersignVerifiableCredential class is not instantiated with Offlinesigner or have not been initilized');\n                }\n                if (!params.signedPresentation.proof) {\n                    throw new Error('HID-SSI-SDK:: params.signedPresentation must be signed');\n                }\n                // Holder DID\n                let resolvedDidDoc;\n                if (params.holderDid) {\n                    resolvedDidDoc = yield this.hsDid.resolve({ did: params.holderDid });\n                }\n                else if (params.holderDidDocSigned) {\n                    resolvedDidDoc = {};\n                    resolvedDidDoc.didDocument = params.holderDidDocSigned;\n                }\n                else {\n                    throw new Error('Either holderDid or holderDidDocSigned should be provided');\n                }\n                // Issuer DID\n                const { didDocument: issuerDID } = yield this.hsDid.resolve({ did: params.issuerDid });\n                if (issuerDID === null || issuerDID === undefined) {\n                    throw new Error('Issuer DID is not registered');\n                }\n                const publicKeyId = params.issuerVerificationMethodId;\n                const issuerDidDoc = issuerDID;\n                const publicKeyVerMethod = issuerDidDoc.verificationMethod.find((x) => x.id == publicKeyId);\n                // TODO: Get rid of this hack later.\n                // Convert 45 byte publick key into 48\n                const { publicKeyMultibase } = utils_1.default.convertedStableLibKeysIntoEd25519verificationkey2020({\n                    publicKey: publicKeyVerMethod.publicKeyMultibase,\n                });\n                publicKeyVerMethod.publicKeyMultibase = publicKeyMultibase;\n                const assertionController = {\n                    '@context': ['DID.CONTROLLER_CONTEXT'],\n                    id: issuerDidDoc.id,\n                    assertionMethod: issuerDidDoc.assertionMethod,\n                };\n                const keyPair = yield ed25519_verification_key_2020_1.Ed25519VerificationKey2020.from(Object.assign({ privateKeyMultibase: '' }, publicKeyVerMethod));\n                const suite = new ed25519_signature_2020_1.Ed25519Signature2020({\n                    verificationMethod: publicKeyId,\n                    key: keyPair,\n                });\n                const EthereumEip712Signature2021obj = new ethereumeip712signature2021suite_1.EthereumEip712Signature2021({}, params.web3Obj);\n                /* eslint-disable */\n                const that = this;\n                const checkStatus = function (options) {\n                    return __awaiter(this, void 0, void 0, function* () {\n                        return yield that.vc.checkCredentialStatus({ credentialId: options.credential.id });\n                    });\n                };\n                let finalResult = {\n                    verified: false,\n                    credentialResults: Array(),\n                    presentationResult: {},\n                    error: null,\n                };\n                switch (params.signedPresentation.proof['type']) {\n                    case 'EthereumEip712Signature2021': {\n                        const res = Array();\n                        const VCs = params.signedPresentation.verifiableCredential;\n                        for (let i = 0; i < VCs.length; i++) {\n                            const result = yield vc_js_1.default.verifyCredential({\n                                credential: JSON.parse(VCs[i]),\n                                controller: assertionController,\n                                suite,\n                                documentLoader,\n                                checkStatus,\n                            });\n                            res.push(result);\n                        }\n                        const proof = params.signedPresentation.proof;\n                        const document = Object.assign({}, params.signedPresentation);\n                        delete document.proof;\n                        const verificaitonResult = yield EthereumEip712Signature2021obj.verifyProof({\n                            document,\n                            domain: params.domain ? { name: params.domain } : undefined,\n                            proof,\n                            types: params.signedPresentation.proof['eip712'].types,\n                            purpose: new AuthenticationProofPurpose({\n                                challenge: params.challenge,\n                                domain: params.domain,\n                                controller: {\n                                    '@context': 'DID.CONTROLLER_CONTEXT',\n                                    id: resolvedDidDoc.didDocument.id,\n                                    authentication: resolvedDidDoc.didDocument.authentication,\n                                },\n                            }),\n                            documentLoader,\n                        });\n                        if (!verificaitonResult.verified) {\n                            throw verificaitonResult.error;\n                        }\n                        finalResult = {\n                            verified: true,\n                            credentialResults: res,\n                            presentationResult: verificaitonResult,\n                            error: null,\n                        };\n                        break;\n                    }\n                    case 'Ed25519Signature2020': {\n                        throw new Error('HID-SSI-SDK:: Error: Ed25519Signature2020 is not supported yet');\n                        break;\n                    }\n                    default: {\n                        throw new Error('HID-SSI-SDK:: Error: Invalid proof type');\n                    }\n                }\n                return finalResult;\n            }\n            catch (error) {\n                return {\n                    verified: false,\n                    credentialResults: Array(),\n                    presentationResult: {},\n                    error: error,\n                };\n            }\n        });\n    }\n}\nexports.default = HypersignVerifiablePresentation;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}