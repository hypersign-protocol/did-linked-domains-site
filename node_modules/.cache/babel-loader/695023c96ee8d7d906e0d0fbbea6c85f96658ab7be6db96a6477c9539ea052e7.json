{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setupBankExtension = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst utils_1 = require(\"@cosmjs/utils\");\nconst query_1 = require(\"cosmjs-types/cosmos/bank/v1beta1/query\");\nconst utils_2 = require(\"./utils\");\nfunction setupBankExtension(base) {\n  const rpc = (0, utils_2.createProtobufRpcClient)(base);\n  // Use this service to get easy typed access to query methods\n  // This cannot be used for proof verification\n  const queryService = new query_1.QueryClientImpl(rpc);\n  return {\n    bank: {\n      balance: async (address, denom) => {\n        const {\n          balance\n        } = await queryService.Balance({\n          address: address,\n          denom: denom\n        });\n        (0, utils_1.assert)(balance);\n        return balance;\n      },\n      allBalances: async address => {\n        const {\n          balances\n        } = await queryService.AllBalances({\n          address: address\n        });\n        return balances;\n      },\n      totalSupply: async () => {\n        const {\n          supply\n        } = await queryService.TotalSupply({});\n        return supply;\n      },\n      supplyOf: async denom => {\n        const {\n          amount\n        } = await queryService.SupplyOf({\n          denom: denom\n        });\n        (0, utils_1.assert)(amount);\n        return amount;\n      },\n      denomMetadata: async denom => {\n        const {\n          metadata\n        } = await queryService.DenomMetadata({\n          denom\n        });\n        (0, utils_1.assert)(metadata);\n        return metadata;\n      },\n      denomsMetadata: async () => {\n        const {\n          metadatas\n        } = await queryService.DenomsMetadata({\n          pagination: undefined // Not implemented\n        });\n\n        return metadatas;\n      }\n    }\n  };\n}\nexports.setupBankExtension = setupBankExtension;","map":{"version":3,"names":["utils_1","require","query_1","utils_2","setupBankExtension","base","rpc","createProtobufRpcClient","queryService","QueryClientImpl","bank","balance","address","denom","Balance","assert","allBalances","balances","AllBalances","totalSupply","supply","TotalSupply","supplyOf","amount","SupplyOf","denomMetadata","metadata","DenomMetadata","denomsMetadata","metadatas","DenomsMetadata","pagination","undefined","exports"],"sources":["../../src/queries/bank.ts"],"sourcesContent":[null],"mappings":";;;;;;AAAA;AACA,MAAAA,OAAA,GAAAC,OAAA;AAEA,MAAAC,OAAA,GAAAD,OAAA;AAIA,MAAAE,OAAA,GAAAF,OAAA;AAaA,SAAgBG,kBAAkBA,CAACC,IAAiB;EAClD,MAAMC,GAAG,GAAG,IAAAH,OAAA,CAAAI,uBAAuB,EAACF,IAAI,CAAC;EACzC;EACA;EACA,MAAMG,YAAY,GAAG,IAAIN,OAAA,CAAAO,eAAe,CAACH,GAAG,CAAC;EAE7C,OAAO;IACLI,IAAI,EAAE;MACJC,OAAO,EAAE,MAAAA,CAAOC,OAAe,EAAEC,KAAa,KAAI;QAChD,MAAM;UAAEF;QAAO,CAAE,GAAG,MAAMH,YAAY,CAACM,OAAO,CAAC;UAAEF,OAAO,EAAEA,OAAO;UAAEC,KAAK,EAAEA;QAAK,CAAE,CAAC;QAClF,IAAAb,OAAA,CAAAe,MAAM,EAACJ,OAAO,CAAC;QACf,OAAOA,OAAO;MAChB,CAAC;MACDK,WAAW,EAAE,MAAOJ,OAAe,IAAI;QACrC,MAAM;UAAEK;QAAQ,CAAE,GAAG,MAAMT,YAAY,CAACU,WAAW,CAAC;UAAEN,OAAO,EAAEA;QAAO,CAAE,CAAC;QACzE,OAAOK,QAAQ;MACjB,CAAC;MACDE,WAAW,EAAE,MAAAA,CAAA,KAAW;QACtB,MAAM;UAAEC;QAAM,CAAE,GAAG,MAAMZ,YAAY,CAACa,WAAW,CAAC,EAAE,CAAC;QACrD,OAAOD,MAAM;MACf,CAAC;MACDE,QAAQ,EAAE,MAAOT,KAAa,IAAI;QAChC,MAAM;UAAEU;QAAM,CAAE,GAAG,MAAMf,YAAY,CAACgB,QAAQ,CAAC;UAAEX,KAAK,EAAEA;QAAK,CAAE,CAAC;QAChE,IAAAb,OAAA,CAAAe,MAAM,EAACQ,MAAM,CAAC;QACd,OAAOA,MAAM;MACf,CAAC;MACDE,aAAa,EAAE,MAAOZ,KAAa,IAAI;QACrC,MAAM;UAAEa;QAAQ,CAAE,GAAG,MAAMlB,YAAY,CAACmB,aAAa,CAAC;UAAEd;QAAK,CAAE,CAAC;QAChE,IAAAb,OAAA,CAAAe,MAAM,EAACW,QAAQ,CAAC;QAChB,OAAOA,QAAQ;MACjB,CAAC;MACDE,cAAc,EAAE,MAAAA,CAAA,KAAW;QACzB,MAAM;UAAEC;QAAS,CAAE,GAAG,MAAMrB,YAAY,CAACsB,cAAc,CAAC;UACtDC,UAAU,EAAEC,SAAS,CAAE;SACxB,CAAC;;QACF,OAAOH,SAAS;MAClB;;GAEH;AACH;AAvCAI,OAAA,CAAA7B,kBAAA,GAAAA,kBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}