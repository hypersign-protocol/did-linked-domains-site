{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport DomainLinkage from '@hypersign-protocol/did-linked-domain';\nimport { registerDID } from '../scripts/DidOperations';\nimport { HypersignDID } from 'hs-ssi-sdk';\nexport default {\n  name: 'PooDns',\n  data() {\n    return {\n      txtRecord: '',\n      domain: '',\n      didDocument: '',\n      status: false,\n      rpc: 'https://rpc.jagrat.hypersign.id/',\n      api: 'https://api.jagrat.hypersign.id/'\n    };\n  },\n  mounted() {\n    document.getElementById(\"verify\").style.display = \"block\";\n    this.domain = localStorage.getItem('domain');\n    this.didDocument = JSON.parse(localStorage.getItem('didDocument'));\n    this.txtRecord = \"hypersign-domain-verification.did=\" + JSON.parse(localStorage.getItem('didDocument')).id;\n  },\n  methods: {\n    async signDid() {\n      const key = JSON.parse(localStorage.getItem('keys'));\n      const hsDID = new HypersignDID({\n        namespace: 'testnet',\n        nodeRestEndpoint: this.api,\n        nodeRpcEndpoint: this.rpc\n      });\n      const signature = await hsDID.signDid({\n        didDocument: this.didDocument,\n        privateKeyMultibase: key.privateKeyMultibase\n      });\n      const data = await registerDID(this.didDocument, signature);\n      console.log(data);\n      // signature\n    },\n\n    openURl(url) {\n      window.open('https://api.jagrat.hypersign.id/hypersign-protocol/hidnode/ssi/did/' + url, '_blank');\n    },\n    copy() {\n      var copyText = document.getElementById(\"txt\");\n      copyText.select();\n      copyText.setSelectionRange(0, 99999);\n      // document.execCommand(\"copy\");\n      document.getElementById(\"copytxt\").innerHTML = \"Copied!\";\n      // color fade \n      document.getElementById(\"copytxt\").style.color = \"#90EE90\";\n      this.alert('Copied to clipboard');\n    },\n    alert(msg, time = 3000) {\n      //  a alert that will push a floatable div in the left corner\n      const div = document.createElement('div');\n      div.className = 'alert';\n      // style for top right corner floatable div fade in and out transperent blue\n      div.style.cssText = 'position:fixed; top:10px; right:10px; background-color: #054126; color: #fff; padding: 10px; border-radius: 5px; z-index: 9999; animation: fadein 0.5s, fadeout 0.5s 2.5s;';\n      div.innerHTML = msg;\n      document.body.appendChild(div);\n      setTimeout(function () {\n        div.remove();\n      }, time);\n    },\n    async verify() {\n      try {\n        this.loader(true);\n        const domainLinkage = new DomainLinkage(this.domain);\n        const txtRecord = await domainLinkage.verifyDnsTxtRecord(this.domain.includes('http') ? this.domain : new URL('https://' + this.domain), this.txtRecord);\n        await this.signDid();\n        if (txtRecord) {\n          this.alert('Domain verified successfully');\n          this.$emit('can-continue', {\n            value: true\n          });\n          document.getElementById(\"verify\").innerHTML = \"Verified ✔ \";\n          document.getElementById(\"verify\").style['background-color'] = \"#28A745\";\n          this.status = true;\n\n          // await this.register()\n        } else {\n          this.alert('Domain verification failed');\n          // retry \n          document.getElementById(\"verify\").innerHTML = \"Retry ↻ \";\n          document.getElementById(\"verify\").style['background-color'] = \"#DC3545\";\n        }\n        this.loader(false);\n      } catch (error) {\n        this.loader(false);\n        this.alert('Domain verification failed');\n      }\n    },\n    // async register() {\n    //     const hsDID = new HypersignDID({\n    //         namespace: 'testnet',\n    //         nodeRestEndpoint: this.api,\n    //         nodeRpcEndpoint: this.rpc\n    //     });\n    //     console.log(hsDID.sig);\n    // },\n\n    loader(show = true) {\n      // a div based loader that will show a loader in the middle of the screen based on show variable and transparent background and animated and use the loader image from cdn \n      if (show) {\n        const div = document.createElement('div');\n        div.className = 'loader';\n        div.style.cssText = 'position:fixed; top:0; left:0; width:100%; height:100%; background-color: rgba(0,0,0,0.8); z-index: 9999; display:flex; justify-content:center; align-items:center;';\n        div.img = document.createElement('img');\n        div.img.style.cssText = 'width:150px';\n        div.img.src = 'https://cdn.dribbble.com/users/421466/screenshots/2377950/drops-400px.gif';\n        div.appendChild(div.img);\n        document.body.appendChild(div);\n      } else {\n        document.querySelector('.loader').remove();\n      }\n    }\n  }\n};","map":{"version":3,"names":["DomainLinkage","registerDID","HypersignDID","name","data","txtRecord","domain","didDocument","status","rpc","api","mounted","document","getElementById","style","display","localStorage","getItem","JSON","parse","id","methods","signDid","key","hsDID","namespace","nodeRestEndpoint","nodeRpcEndpoint","signature","privateKeyMultibase","console","log","openURl","url","window","open","copy","copyText","select","setSelectionRange","innerHTML","color","alert","msg","time","div","createElement","className","cssText","body","appendChild","setTimeout","remove","verify","loader","domainLinkage","verifyDnsTxtRecord","includes","URL","$emit","value","error","show","img","src","querySelector"],"sources":["src/components/poo.vue"],"sourcesContent":["<template>\n    <div class=\"form\">\n        <p id=\"header\">DNS-01</p>\n        <h5>Please add the txt record to you domain.</h5>\n        <span id=\"copy\">\n            <a href=\"#\" id=\"copytxt\" @click=\"copy\">Copy</a>\n        </span>\n        <input type=\"text\" id=\"txt\" :value=\"txtRecord\" />\n        <br>\n        <button id=\"verify\" @click=\"verify\">Verify</button>\n        <br>\n        <div id=\"\" v-if=\"status\">\n            <p style=\"font-size: small;\">\n                <b>Domain:</b> {{domain}}\n                <br>\n                <b>TxtRecord:</b> {{txtRecord}}\n                <br>\n                <b>Status :</b> {{ status }}\n                <br>\n                <b id=\"flash-text\"><a @click=\"openURl(didDocument.id)\" style=\"text-decoration:none  ; color: #2c3e50; cursor: pointer; \"  >Did : {{ didDocument.id }} </a> </b>\n                <br>\n\n            </p>\n        </div>\n       \n\n\n        <!-- copy span -->\n\n\n\n    </div>\n</template>\n \n\n<script>\nimport DomainLinkage from '@hypersign-protocol/did-linked-domain'\nimport {registerDID} from '../scripts/DidOperations'\nimport {\n    HypersignDID\n} from 'hs-ssi-sdk'\nexport default {\n    name: 'PooDns',\n    data() {\n        return {\n            txtRecord: '',\n            domain: '',\n            didDocument: '',\n            status: false,\n            rpc: 'https://rpc.jagrat.hypersign.id/',\n            api: 'https://api.jagrat.hypersign.id/'\n        }\n    },\n    mounted() {\n        document.getElementById(\"verify\").style.display = \"block\";\n        this.domain = localStorage.getItem('domain')\n        this.didDocument= JSON.parse(localStorage.getItem('didDocument'))\n\n        this.txtRecord = \"hypersign-domain-verification.did=\" + JSON.parse(localStorage.getItem('didDocument')).id\n    },\n    methods: {\n        async signDid(){\n            const key=JSON.parse(localStorage.getItem('keys'))\n            const hsDID = new HypersignDID({\n                namespace: 'testnet',\n                nodeRestEndpoint: this.api,\n                nodeRpcEndpoint: this.rpc\n            });\n          \n            const signature= await hsDID.signDid({didDocument:this.didDocument, privateKeyMultibase:key.privateKeyMultibase})\n            const data=await registerDID(this.didDocument,signature)    \n            console.log(data);\n            // signature\n        },\n        openURl(url) {\n            window.open('https://api.jagrat.hypersign.id/hypersign-protocol/hidnode/ssi/did/' + url, '_blank');\n        },\n        copy() {\n            var copyText = document.getElementById(\"txt\");\n            copyText.select();\n            copyText.setSelectionRange(0, 99999)\n            // document.execCommand(\"copy\");\n            document.getElementById(\"copytxt\").innerHTML = \"Copied!\";\n            // color fade \n            document.getElementById(\"copytxt\").style.color = \"#90EE90\";\n            this.alert('Copied to clipboard')\n        },\n\n        alert(msg, time = 3000) {\n            //  a alert that will push a floatable div in the left corner\n            const div = document.createElement('div');\n            div.className = 'alert';\n            // style for top right corner floatable div fade in and out transperent blue\n            div.style.cssText = 'position:fixed; top:10px; right:10px; background-color: #054126; color: #fff; padding: 10px; border-radius: 5px; z-index: 9999; animation: fadein 0.5s, fadeout 0.5s 2.5s;';\n            div.innerHTML = msg;\n            document.body.appendChild(div);\n            setTimeout(function () {\n                div.remove();\n            }, time);\n        },\n        async verify() {\n            try {\n\n\n                this.loader(true)\n                const domainLinkage = new DomainLinkage(this.domain)\n                const txtRecord = await domainLinkage.verifyDnsTxtRecord(this.domain.includes('http')?this.domain:new URL('https://'+this.domain), this.txtRecord)\n                await this.signDid()\n\n                if (txtRecord) {\n                    this.alert('Domain verified successfully')\n                    this.$emit('can-continue', {\n                        value: true\n                    })\n                    document.getElementById(\"verify\").innerHTML = \"Verified ✔ \";\n                    document.getElementById(\"verify\").style['background-color'] = \"#28A745\"; this.status = true\n\n                    // await this.register()\n                } else {\n                    this.alert('Domain verification failed')\n                    // retry \n                    document.getElementById(\"verify\").innerHTML = \"Retry ↻ \";\n                    document.getElementById(\"verify\").style['background-color'] = \"#DC3545\";\n\n                }\n\n                this.loader(false)\n            } catch (error) {\n                this.loader(false)\n                this.alert('Domain verification failed')\n\n            }\n        },\n        // async register() {\n        //     const hsDID = new HypersignDID({\n        //         namespace: 'testnet',\n        //         nodeRestEndpoint: this.api,\n        //         nodeRpcEndpoint: this.rpc\n        //     });\n        //     console.log(hsDID.sig);\n        // },\n\n\n        loader(show = true) {\n            // a div based loader that will show a loader in the middle of the screen based on show variable and transparent background and animated and use the loader image from cdn \n            if (show) {\n                const div = document.createElement('div');\n                div.className = 'loader';\n                div.style.cssText = 'position:fixed; top:0; left:0; width:100%; height:100%; background-color: rgba(0,0,0,0.8); z-index: 9999; display:flex; justify-content:center; align-items:center;';\n                div.img = document.createElement('img');\n                div.img.style.cssText = 'width:150px'\n                div.img.src = 'https://cdn.dribbble.com/users/421466/screenshots/2377950/drops-400px.gif'\n\n                div.appendChild(div.img)\n\n                document.body.appendChild(div);\n            } else {\n                document.querySelector('.loader').remove()\n            }\n\n\n        }\n    }\n}\n\n</script>\n\n\n<style scoped>\n\n/* \\ text animation  gray and green in span of 1 sec */\n.flash-text{\n    /* color: gray; */\n    animation: flash 1s infinite;\n\n\n}\n#copy {\n    float: right;\n}\n\n#copy a {\n    color: #42b983;\n    text-decoration: none;\n    font-size: 14px;\n    font-weight: bold;\n\n}\n\n#txt {\n    width: 100%;\n    padding: 10px;\n    box-sizing: border-box;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 0;\n    font-size: 14px;\n}\n\n#profile {\n    width: 100%;\n    max-width: 600px;\n    margin: 0 auto;\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin-top: 20px;\n\n\n}\n\n.form {\n    width: 100%;\n    max-width: 600px;\n    margin: 0 auto;\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n}\n\ninput {\n    width: 100%;\n    padding: 10px;\n    box-sizing: border-box;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 0;\n    font-size: 14px;\n\n}\n\n#verify {\n    background-color: #42b983;\n    display: none;\n}\n\n/* animated button with status change verify to processing and verified and disable */\nbutton {\n    width: 100%;\n    padding: 10px;\n    box-sizing: border-box;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin: 10px 0;\n    font-size: 14px;\n    background-color: #054126;\n    color: #fff;\n    cursor: pointer;\n    transition: all 0.3s ease-in-out;\n}\n\n\n#header {\n    text-align: center;\n    font-size: 25px;\n    color: #054126;\n}\n\nh5 {\n    text-align: center;\n}\n\nh1 {\n    font-size: 30px;\n    text-align: center;\n    color: #054126;\n}\n\nh3 {\n    margin: 40px 0 0;\n}\n\nul {\n    list-style-type: none;\n    padding: 0;\n}\n\nli {\n    display: inline-block;\n    margin: 0 10px;\n}\n\na {\n    color: #42b983;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}