{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nrequire(\"core-js/modules/es.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/es.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/es.typed-array.with.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContractFactory = void 0;\nconst index_js_1 = require(\"../abi/index.js\");\nconst index_js_2 = require(\"../address/index.js\");\nconst index_js_3 = require(\"../utils/index.js\");\nconst contract_js_1 = require(\"./contract.js\");\n// A = Arguments to the constructor\n// I = Interface of deployed contracts\n/**\n *  A **ContractFactory** is used to deploy a Contract to the blockchain.\n */\nclass ContractFactory {\n  /**\n   *  Create a new **ContractFactory** with %%abi%% and %%bytecode%%,\n   *  optionally connected to %%runner%%.\n   *\n   *  The %%bytecode%% may be the ``bytecode`` property within the\n   *  standard Solidity JSON output.\n   */\n  constructor(abi, bytecode, runner) {\n    /**\n     *  The Contract Interface.\n     */\n    _defineProperty(this, \"interface\", void 0);\n    /**\n     *  The Contract deployment bytecode. Often called the initcode.\n     */\n    _defineProperty(this, \"bytecode\", void 0);\n    /**\n     *  The ContractRunner to deploy the Contract as.\n     */\n    _defineProperty(this, \"runner\", void 0);\n    const iface = index_js_1.Interface.from(abi);\n    // Dereference Solidity bytecode objects and allow a missing `0x`-prefix\n    if (bytecode instanceof Uint8Array) {\n      bytecode = (0, index_js_3.hexlify)((0, index_js_3.getBytes)(bytecode));\n    } else {\n      if (typeof bytecode === \"object\") {\n        bytecode = bytecode.object;\n      }\n      if (!bytecode.startsWith(\"0x\")) {\n        bytecode = \"0x\" + bytecode;\n      }\n      bytecode = (0, index_js_3.hexlify)((0, index_js_3.getBytes)(bytecode));\n    }\n    (0, index_js_3.defineProperties)(this, {\n      bytecode,\n      interface: iface,\n      runner: runner || null\n    });\n  }\n  attach(target) {\n    return new contract_js_1.BaseContract(target, this.interface, this.runner);\n  }\n  /**\n   *  Resolves to the transaction to deploy the contract, passing %%args%%\n   *  into the constructor.\n   */\n  async getDeployTransaction(...args) {\n    let overrides = {};\n    const fragment = this.interface.deploy;\n    if (fragment.inputs.length + 1 === args.length) {\n      overrides = await (0, contract_js_1.copyOverrides)(args.pop());\n    }\n    if (fragment.inputs.length !== args.length) {\n      throw new Error(\"incorrect number of arguments to constructor\");\n    }\n    const resolvedArgs = await (0, contract_js_1.resolveArgs)(this.runner, fragment.inputs, args);\n    const data = (0, index_js_3.concat)([this.bytecode, this.interface.encodeDeploy(resolvedArgs)]);\n    return Object.assign({}, overrides, {\n      data\n    });\n  }\n  /**\n   *  Resolves to the Contract deployed by passing %%args%% into the\n   *  constructor.\n   *\n   *  This will resovle to the Contract before it has been deployed to the\n   *  network, so the [[BaseContract-waitForDeployment]] should be used before\n   *  sending any transactions to it.\n   */\n  async deploy(...args) {\n    const tx = await this.getDeployTransaction(...args);\n    (0, index_js_3.assert)(this.runner && typeof this.runner.sendTransaction === \"function\", \"factory runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"sendTransaction\"\n    });\n    const sentTx = await this.runner.sendTransaction(tx);\n    const address = (0, index_js_2.getCreateAddress)(sentTx);\n    return new contract_js_1.BaseContract(address, this.interface, this.runner, sentTx);\n  }\n  /**\n   *  Return a new **ContractFactory** with the same ABI and bytecode,\n   *  but connected to %%runner%%.\n   */\n  connect(runner) {\n    return new ContractFactory(this.interface, this.bytecode, runner);\n  }\n  /**\n   *  Create a new **ContractFactory** from the standard Solidity JSON output.\n   */\n  static fromSolidity(output, runner) {\n    (0, index_js_3.assertArgument)(output != null, \"bad compiler output\", \"output\", output);\n    if (typeof output === \"string\") {\n      output = JSON.parse(output);\n    }\n    const abi = output.abi;\n    let bytecode = \"\";\n    if (output.bytecode) {\n      bytecode = output.bytecode;\n    } else if (output.evm && output.evm.bytecode) {\n      bytecode = output.evm.bytecode;\n    }\n    return new this(abi, bytecode, runner);\n  }\n}\nexports.ContractFactory = ContractFactory;","map":{"version":3,"names":["index_js_1","require","index_js_2","index_js_3","contract_js_1","ContractFactory","constructor","abi","bytecode","runner","_defineProperty","iface","Interface","from","Uint8Array","hexlify","getBytes","object","startsWith","defineProperties","interface","attach","target","BaseContract","getDeployTransaction","args","overrides","fragment","deploy","inputs","length","copyOverrides","pop","Error","resolvedArgs","resolveArgs","data","concat","encodeDeploy","Object","assign","tx","assert","sendTransaction","operation","sentTx","address","getCreateAddress","connect","fromSolidity","output","assertArgument","JSON","parse","evm","exports"],"sources":["../../src.ts/contract/factory.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}