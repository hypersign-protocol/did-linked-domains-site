{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HttpClient = exports.http = void 0;\nconst json_rpc_1 = require(\"@cosmjs/json-rpc\");\nconst axios_1 = __importDefault(require(\"axios\"));\nconst rpcclient_1 = require(\"./rpcclient\");\nfunction filterBadStatus(res) {\n  if (res.status >= 400) {\n    throw new Error(`Bad status on response: ${res.status}`);\n  }\n  return res;\n}\n/**\n * Helper to work around missing CORS support in Tendermint (https://github.com/tendermint/tendermint/pull/2800)\n *\n * For some reason, fetch does not complain about missing server-side CORS support.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nasync function http(method, url, request) {\n  if (typeof fetch !== \"undefined\") {\n    const body = request ? JSON.stringify(request) : undefined;\n    return fetch(url, {\n      method: method,\n      body: body\n    }).then(filterBadStatus).then(res => res.json());\n  } else {\n    return axios_1.default.request({\n      url: url,\n      method: method,\n      data: request\n    }).then(res => res.data);\n  }\n}\nexports.http = http;\nclass HttpClient {\n  constructor(url) {\n    // accept host.name:port and assume http protocol\n    this.url = (0, rpcclient_1.hasProtocol)(url) ? url : \"http://\" + url;\n  }\n  disconnect() {\n    // nothing to be done\n  }\n  async execute(request) {\n    const response = (0, json_rpc_1.parseJsonRpcResponse)(await http(\"POST\", this.url, request));\n    if ((0, json_rpc_1.isJsonRpcErrorResponse)(response)) {\n      throw new Error(JSON.stringify(response.error));\n    }\n    return response;\n  }\n}\nexports.HttpClient = HttpClient;","map":{"version":3,"names":["json_rpc_1","require","axios_1","__importDefault","rpcclient_1","filterBadStatus","res","status","Error","http","method","url","request","fetch","body","JSON","stringify","undefined","then","json","default","data","exports","HttpClient","constructor","hasProtocol","disconnect","execute","response","parseJsonRpcResponse","isJsonRpcErrorResponse","error"],"sources":["../../src/rpcclients/httpclient.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;AAAA,MAAAA,UAAA,GAAAC,OAAA;AAMA,MAAAC,OAAA,GAAAC,eAAA,CAAAF,OAAA;AAEA,MAAAG,WAAA,GAAAH,OAAA;AAMA,SAASI,eAAeA,CAACC,GAAQ;EAC/B,IAAIA,GAAG,CAACC,MAAM,IAAI,GAAG,EAAE;IACrB,MAAM,IAAIC,KAAK,CAAC,2BAA2BF,GAAG,CAACC,MAAM,EAAE,CAAC;;EAE1D,OAAOD,GAAG;AACZ;AAEA;;;;;AAKA;AACO,eAAeG,IAAIA,CAACC,MAAc,EAAEC,GAAW,EAAEC,OAAa;EACnE,IAAI,OAAOC,KAAK,KAAK,WAAW,EAAE;IAChC,MAAMC,IAAI,GAAGF,OAAO,GAAGG,IAAI,CAACC,SAAS,CAACJ,OAAO,CAAC,GAAGK,SAAS;IAC1D,OAAOJ,KAAK,CAACF,GAAG,EAAE;MAAED,MAAM,EAAEA,MAAM;MAAEI,IAAI,EAAEA;IAAI,CAAE,CAAC,CAC9CI,IAAI,CAACb,eAAe,CAAC,CACrBa,IAAI,CAAEZ,GAAQ,IAAKA,GAAG,CAACa,IAAI,EAAE,CAAC;GAClC,MAAM;IACL,OAAOjB,OAAA,CAAAkB,OAAK,CAACR,OAAO,CAAC;MAAED,GAAG,EAAEA,GAAG;MAAED,MAAM,EAAEA,MAAM;MAAEW,IAAI,EAAET;IAAO,CAAE,CAAC,CAACM,IAAI,CAAEZ,GAAG,IAAKA,GAAG,CAACe,IAAI,CAAC;;AAE7F;AATAC,OAAA,CAAAb,IAAA,GAAAA,IAAA;AAWA,MAAac,UAAU;EAGrBC,YAAmBb,GAAW;IAC5B;IACA,IAAI,CAACA,GAAG,GAAG,IAAAP,WAAA,CAAAqB,WAAW,EAACd,GAAG,CAAC,GAAGA,GAAG,GAAG,SAAS,GAAGA,GAAG;EACrD;EAEOe,UAAUA,CAAA;IACf;EAAA;EAGK,MAAMC,OAAOA,CAACf,OAAuB;IAC1C,MAAMgB,QAAQ,GAAG,IAAA5B,UAAA,CAAA6B,oBAAoB,EAAC,MAAMpB,IAAI,CAAC,MAAM,EAAE,IAAI,CAACE,GAAG,EAAEC,OAAO,CAAC,CAAC;IAC5E,IAAI,IAAAZ,UAAA,CAAA8B,sBAAsB,EAACF,QAAQ,CAAC,EAAE;MACpC,MAAM,IAAIpB,KAAK,CAACO,IAAI,CAACC,SAAS,CAACY,QAAQ,CAACG,KAAK,CAAC,CAAC;;IAEjD,OAAOH,QAAQ;EACjB;;AAlBFN,OAAA,CAAAC,UAAA,GAAAA,UAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}