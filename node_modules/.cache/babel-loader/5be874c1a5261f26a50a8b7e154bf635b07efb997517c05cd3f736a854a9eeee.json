{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StargateClient = exports.assertIsDeliverTxFailure = exports.assertIsDeliverTxSuccess = exports.isDeliverTxSuccess = exports.isDeliverTxFailure = exports.TimeoutError = void 0;\n/* eslint-disable @typescript-eslint/naming-convention */\nconst encoding_1 = require(\"@cosmjs/encoding\");\nconst math_1 = require(\"@cosmjs/math\");\nconst tendermint_rpc_1 = require(\"@cosmjs/tendermint-rpc\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst accounts_1 = require(\"./accounts\");\nconst queries_1 = require(\"./queries\");\nconst search_1 = require(\"./search\");\nclass TimeoutError extends Error {\n  constructor(message, txId) {\n    super(message);\n    this.txId = txId;\n  }\n}\nexports.TimeoutError = TimeoutError;\nfunction isDeliverTxFailure(result) {\n  return !!result.code;\n}\nexports.isDeliverTxFailure = isDeliverTxFailure;\nfunction isDeliverTxSuccess(result) {\n  return !isDeliverTxFailure(result);\n}\nexports.isDeliverTxSuccess = isDeliverTxSuccess;\n/**\n * Ensures the given result is a success. Throws a detailed error message otherwise.\n */\nfunction assertIsDeliverTxSuccess(result) {\n  if (isDeliverTxFailure(result)) {\n    throw new Error(`Error when broadcasting tx ${result.transactionHash} at height ${result.height}. Code: ${result.code}; Raw log: ${result.rawLog}`);\n  }\n}\nexports.assertIsDeliverTxSuccess = assertIsDeliverTxSuccess;\n/**\n * Ensures the given result is a failure. Throws a detailed error message otherwise.\n */\nfunction assertIsDeliverTxFailure(result) {\n  if (isDeliverTxSuccess(result)) {\n    throw new Error(`Transaction ${result.transactionHash} did not fail at height ${result.height}. Code: ${result.code}; Raw log: ${result.rawLog}`);\n  }\n}\nexports.assertIsDeliverTxFailure = assertIsDeliverTxFailure;\nclass StargateClient {\n  constructor(tmClient) {\n    if (tmClient) {\n      this.tmClient = tmClient;\n      this.queryClient = queries_1.QueryClient.withExtensions(tmClient, queries_1.setupAuthExtension, queries_1.setupBankExtension, queries_1.setupStakingExtension, queries_1.setupTxExtension);\n    }\n  }\n  static async connect(endpoint) {\n    const tmClient = await tendermint_rpc_1.Tendermint34Client.connect(endpoint);\n    return new StargateClient(tmClient);\n  }\n  getTmClient() {\n    return this.tmClient;\n  }\n  forceGetTmClient() {\n    if (!this.tmClient) {\n      throw new Error(\"Tendermint client not available. You cannot use online functionality in offline mode.\");\n    }\n    return this.tmClient;\n  }\n  getQueryClient() {\n    return this.queryClient;\n  }\n  forceGetQueryClient() {\n    if (!this.queryClient) {\n      throw new Error(\"Query client not available. You cannot use online functionality in offline mode.\");\n    }\n    return this.queryClient;\n  }\n  async getChainId() {\n    if (!this.chainId) {\n      const response = await this.forceGetTmClient().status();\n      const chainId = response.nodeInfo.network;\n      if (!chainId) throw new Error(\"Chain ID must not be empty\");\n      this.chainId = chainId;\n    }\n    return this.chainId;\n  }\n  async getHeight() {\n    const status = await this.forceGetTmClient().status();\n    return status.syncInfo.latestBlockHeight;\n  }\n  async getAccount(searchAddress) {\n    try {\n      const account = await this.forceGetQueryClient().auth.account(searchAddress);\n      return account ? (0, accounts_1.accountFromAny)(account) : null;\n    } catch (error) {\n      if (/rpc error: code = NotFound/i.test(error.toString())) {\n        return null;\n      }\n      throw error;\n    }\n  }\n  async getSequence(address) {\n    const account = await this.getAccount(address);\n    if (!account) {\n      throw new Error(\"Account does not exist on chain. Send some tokens there before trying to query sequence.\");\n    }\n    return {\n      accountNumber: account.accountNumber,\n      sequence: account.sequence\n    };\n  }\n  async getBlock(height) {\n    const response = await this.forceGetTmClient().block(height);\n    return {\n      id: (0, encoding_1.toHex)(response.blockId.hash).toUpperCase(),\n      header: {\n        version: {\n          block: new math_1.Uint53(response.block.header.version.block).toString(),\n          app: new math_1.Uint53(response.block.header.version.app).toString()\n        },\n        height: response.block.header.height,\n        chainId: response.block.header.chainId,\n        time: (0, tendermint_rpc_1.toRfc3339WithNanoseconds)(response.block.header.time)\n      },\n      txs: response.block.txs\n    };\n  }\n  async getBalance(address, searchDenom) {\n    return this.forceGetQueryClient().bank.balance(address, searchDenom);\n  }\n  /**\n   * Queries all balances for all denoms that belong to this address.\n   *\n   * Uses the grpc queries (which iterates over the store internally), and we cannot get\n   * proofs from such a method.\n   */\n  async getAllBalances(address) {\n    return this.forceGetQueryClient().bank.allBalances(address);\n  }\n  async getDelegation(delegatorAddress, validatorAddress) {\n    var _a;\n    let delegatedAmount;\n    try {\n      delegatedAmount = (_a = (await this.forceGetQueryClient().staking.delegation(delegatorAddress, validatorAddress)).delegationResponse) === null || _a === void 0 ? void 0 : _a.balance;\n    } catch (e) {\n      if (e.toString().includes(\"key not found\")) {\n        // ignore, `delegatedAmount` remains undefined\n      } else {\n        throw e;\n      }\n    }\n    return delegatedAmount || null;\n  }\n  async getTx(id) {\n    var _a;\n    const results = await this.txsQuery(`tx.hash='${id}'`);\n    return (_a = results[0]) !== null && _a !== void 0 ? _a : null;\n  }\n  async searchTx(query, filter = {}) {\n    const minHeight = filter.minHeight || 0;\n    const maxHeight = filter.maxHeight || Number.MAX_SAFE_INTEGER;\n    if (maxHeight < minHeight) return []; // optional optimization\n    function withFilters(originalQuery) {\n      return `${originalQuery} AND tx.height>=${minHeight} AND tx.height<=${maxHeight}`;\n    }\n    let txs;\n    if ((0, search_1.isSearchByHeightQuery)(query)) {\n      txs = query.height >= minHeight && query.height <= maxHeight ? await this.txsQuery(`tx.height=${query.height}`) : [];\n    } else if ((0, search_1.isSearchBySentFromOrToQuery)(query)) {\n      const sentQuery = withFilters(`message.module='bank' AND transfer.sender='${query.sentFromOrTo}'`);\n      const receivedQuery = withFilters(`message.module='bank' AND transfer.recipient='${query.sentFromOrTo}'`);\n      const [sent, received] = await Promise.all([sentQuery, receivedQuery].map(rawQuery => this.txsQuery(rawQuery)));\n      const sentHashes = sent.map(t => t.hash);\n      txs = [...sent, ...received.filter(t => !sentHashes.includes(t.hash))];\n    } else if ((0, search_1.isSearchByTagsQuery)(query)) {\n      const rawQuery = withFilters(query.tags.map(t => `${t.key}='${t.value}'`).join(\" AND \"));\n      txs = await this.txsQuery(rawQuery);\n    } else {\n      throw new Error(\"Unknown query type\");\n    }\n    const filtered = txs.filter(tx => tx.height >= minHeight && tx.height <= maxHeight);\n    return filtered;\n  }\n  disconnect() {\n    if (this.tmClient) this.tmClient.disconnect();\n  }\n  /**\n   * Broadcasts a signed transaction to the network and monitors its inclusion in a block.\n   *\n   * If broadcasting is rejected by the node for some reason (e.g. because of a CheckTx failure),\n   * an error is thrown.\n   *\n   * If the transaction is not included in a block before the provided timeout, this errors with a `TimeoutError`.\n   *\n   * If the transaction is included in a block, a `DeliverTxResponse` is returned. The caller then\n   * usually needs to check for execution success or failure.\n   */\n  async broadcastTx(tx, timeoutMs = 60000, pollIntervalMs = 3000) {\n    let timedOut = false;\n    const txPollTimeout = setTimeout(() => {\n      timedOut = true;\n    }, timeoutMs);\n    const pollForTx = async txId => {\n      if (timedOut) {\n        throw new TimeoutError(`Transaction with ID ${txId} was submitted but was not yet found on the chain. You might want to check later.`, txId);\n      }\n      await (0, utils_1.sleep)(pollIntervalMs);\n      const result = await this.getTx(txId);\n      return result ? {\n        code: result.code,\n        height: result.height,\n        rawLog: result.rawLog,\n        transactionHash: txId,\n        gasUsed: result.gasUsed,\n        gasWanted: result.gasWanted\n      } : pollForTx(txId);\n    };\n    const broadcasted = await this.forceGetTmClient().broadcastTxSync({\n      tx\n    });\n    if (broadcasted.code) {\n      throw new Error(`Broadcasting transaction failed with code ${broadcasted.code} (codespace: ${broadcasted.codeSpace}). Log: ${broadcasted.log}`);\n    }\n    const transactionId = (0, encoding_1.toHex)(broadcasted.hash).toUpperCase();\n    return new Promise((resolve, reject) => pollForTx(transactionId).then(value => {\n      clearTimeout(txPollTimeout);\n      resolve(value);\n    }, error => {\n      clearTimeout(txPollTimeout);\n      reject(error);\n    }));\n  }\n  async txsQuery(query) {\n    const results = await this.forceGetTmClient().txSearchAll({\n      query: query\n    });\n    return results.txs.map(tx => {\n      return {\n        height: tx.height,\n        hash: (0, encoding_1.toHex)(tx.hash).toUpperCase(),\n        code: tx.result.code,\n        rawLog: tx.result.log || \"\",\n        tx: tx.tx,\n        gasUsed: tx.result.gasUsed,\n        gasWanted: tx.result.gasWanted\n      };\n    });\n  }\n}\nexports.StargateClient = StargateClient;","map":{"version":3,"names":["encoding_1","require","math_1","tendermint_rpc_1","utils_1","accounts_1","queries_1","search_1","TimeoutError","Error","constructor","message","txId","exports","isDeliverTxFailure","result","code","isDeliverTxSuccess","assertIsDeliverTxSuccess","transactionHash","height","rawLog","assertIsDeliverTxFailure","StargateClient","tmClient","queryClient","QueryClient","withExtensions","setupAuthExtension","setupBankExtension","setupStakingExtension","setupTxExtension","connect","endpoint","Tendermint34Client","getTmClient","forceGetTmClient","getQueryClient","forceGetQueryClient","getChainId","chainId","response","status","nodeInfo","network","getHeight","syncInfo","latestBlockHeight","getAccount","searchAddress","account","auth","accountFromAny","error","test","toString","getSequence","address","accountNumber","sequence","getBlock","block","id","toHex","blockId","hash","toUpperCase","header","version","Uint53","app","time","toRfc3339WithNanoseconds","txs","getBalance","searchDenom","bank","balance","getAllBalances","allBalances","getDelegation","delegatorAddress","validatorAddress","delegatedAmount","_a","staking","delegation","delegationResponse","e","includes","getTx","results","txsQuery","searchTx","query","filter","minHeight","maxHeight","Number","MAX_SAFE_INTEGER","withFilters","originalQuery","isSearchByHeightQuery","isSearchBySentFromOrToQuery","sentQuery","sentFromOrTo","receivedQuery","sent","received","Promise","all","map","rawQuery","sentHashes","t","isSearchByTagsQuery","tags","key","value","join","filtered","tx","disconnect","broadcastTx","timeoutMs","pollIntervalMs","timedOut","txPollTimeout","setTimeout","pollForTx","sleep","gasUsed","gasWanted","broadcasted","broadcastTxSync","codeSpace","log","transactionId","resolve","reject","then","clearTimeout","txSearchAll"],"sources":["../src/stargateclient.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}