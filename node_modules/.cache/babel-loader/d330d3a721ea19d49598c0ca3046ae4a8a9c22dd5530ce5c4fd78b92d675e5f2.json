{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/es.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/es.typed-array.with.js\");\nrequire(\"core-js/modules/es.array.push.js\");\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CompressedNonExistenceProof = exports.CompressedExistenceProof = exports.CompressedBatchEntry = exports.CompressedBatchProof = exports.BatchEntry = exports.BatchProof = exports.InnerSpec = exports.ProofSpec = exports.InnerOp = exports.LeafOp = exports.CommitmentProof = exports.NonExistenceProof = exports.ExistenceProof = exports.lengthOpToJSON = exports.lengthOpFromJSON = exports.LengthOp = exports.hashOpToJSON = exports.hashOpFromJSON = exports.HashOp = exports.protobufPackage = void 0;\n/* eslint-disable */\nconst long_1 = __importDefault(require(\"long\"));\nconst minimal_1 = __importDefault(require(\"protobufjs/minimal\"));\nexports.protobufPackage = \"ics23\";\nvar HashOp;\n(function (HashOp) {\n  /** NO_HASH - NO_HASH is the default if no data passed. Note this is an illegal argument some places. */\n  HashOp[HashOp[\"NO_HASH\"] = 0] = \"NO_HASH\";\n  HashOp[HashOp[\"SHA256\"] = 1] = \"SHA256\";\n  HashOp[HashOp[\"SHA512\"] = 2] = \"SHA512\";\n  HashOp[HashOp[\"KECCAK\"] = 3] = \"KECCAK\";\n  HashOp[HashOp[\"RIPEMD160\"] = 4] = \"RIPEMD160\";\n  /** BITCOIN - ripemd160(sha256(x)) */\n  HashOp[HashOp[\"BITCOIN\"] = 5] = \"BITCOIN\";\n  HashOp[HashOp[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(HashOp = exports.HashOp || (exports.HashOp = {}));\nfunction hashOpFromJSON(object) {\n  switch (object) {\n    case 0:\n    case \"NO_HASH\":\n      return HashOp.NO_HASH;\n    case 1:\n    case \"SHA256\":\n      return HashOp.SHA256;\n    case 2:\n    case \"SHA512\":\n      return HashOp.SHA512;\n    case 3:\n    case \"KECCAK\":\n      return HashOp.KECCAK;\n    case 4:\n    case \"RIPEMD160\":\n      return HashOp.RIPEMD160;\n    case 5:\n    case \"BITCOIN\":\n      return HashOp.BITCOIN;\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return HashOp.UNRECOGNIZED;\n  }\n}\nexports.hashOpFromJSON = hashOpFromJSON;\nfunction hashOpToJSON(object) {\n  switch (object) {\n    case HashOp.NO_HASH:\n      return \"NO_HASH\";\n    case HashOp.SHA256:\n      return \"SHA256\";\n    case HashOp.SHA512:\n      return \"SHA512\";\n    case HashOp.KECCAK:\n      return \"KECCAK\";\n    case HashOp.RIPEMD160:\n      return \"RIPEMD160\";\n    case HashOp.BITCOIN:\n      return \"BITCOIN\";\n    default:\n      return \"UNKNOWN\";\n  }\n}\nexports.hashOpToJSON = hashOpToJSON;\n/**\n * LengthOp defines how to process the key and value of the LeafOp\n * to include length information. After encoding the length with the given\n * algorithm, the length will be prepended to the key and value bytes.\n * (Each one with it's own encoded length)\n */\nvar LengthOp;\n(function (LengthOp) {\n  /** NO_PREFIX - NO_PREFIX don't include any length info */\n  LengthOp[LengthOp[\"NO_PREFIX\"] = 0] = \"NO_PREFIX\";\n  /** VAR_PROTO - VAR_PROTO uses protobuf (and go-amino) varint encoding of the length */\n  LengthOp[LengthOp[\"VAR_PROTO\"] = 1] = \"VAR_PROTO\";\n  /** VAR_RLP - VAR_RLP uses rlp int encoding of the length */\n  LengthOp[LengthOp[\"VAR_RLP\"] = 2] = \"VAR_RLP\";\n  /** FIXED32_BIG - FIXED32_BIG uses big-endian encoding of the length as a 32 bit integer */\n  LengthOp[LengthOp[\"FIXED32_BIG\"] = 3] = \"FIXED32_BIG\";\n  /** FIXED32_LITTLE - FIXED32_LITTLE uses little-endian encoding of the length as a 32 bit integer */\n  LengthOp[LengthOp[\"FIXED32_LITTLE\"] = 4] = \"FIXED32_LITTLE\";\n  /** FIXED64_BIG - FIXED64_BIG uses big-endian encoding of the length as a 64 bit integer */\n  LengthOp[LengthOp[\"FIXED64_BIG\"] = 5] = \"FIXED64_BIG\";\n  /** FIXED64_LITTLE - FIXED64_LITTLE uses little-endian encoding of the length as a 64 bit integer */\n  LengthOp[LengthOp[\"FIXED64_LITTLE\"] = 6] = \"FIXED64_LITTLE\";\n  /** REQUIRE_32_BYTES - REQUIRE_32_BYTES is like NONE, but will fail if the input is not exactly 32 bytes (sha256 output) */\n  LengthOp[LengthOp[\"REQUIRE_32_BYTES\"] = 7] = \"REQUIRE_32_BYTES\";\n  /** REQUIRE_64_BYTES - REQUIRE_64_BYTES is like NONE, but will fail if the input is not exactly 64 bytes (sha512 output) */\n  LengthOp[LengthOp[\"REQUIRE_64_BYTES\"] = 8] = \"REQUIRE_64_BYTES\";\n  LengthOp[LengthOp[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(LengthOp = exports.LengthOp || (exports.LengthOp = {}));\nfunction lengthOpFromJSON(object) {\n  switch (object) {\n    case 0:\n    case \"NO_PREFIX\":\n      return LengthOp.NO_PREFIX;\n    case 1:\n    case \"VAR_PROTO\":\n      return LengthOp.VAR_PROTO;\n    case 2:\n    case \"VAR_RLP\":\n      return LengthOp.VAR_RLP;\n    case 3:\n    case \"FIXED32_BIG\":\n      return LengthOp.FIXED32_BIG;\n    case 4:\n    case \"FIXED32_LITTLE\":\n      return LengthOp.FIXED32_LITTLE;\n    case 5:\n    case \"FIXED64_BIG\":\n      return LengthOp.FIXED64_BIG;\n    case 6:\n    case \"FIXED64_LITTLE\":\n      return LengthOp.FIXED64_LITTLE;\n    case 7:\n    case \"REQUIRE_32_BYTES\":\n      return LengthOp.REQUIRE_32_BYTES;\n    case 8:\n    case \"REQUIRE_64_BYTES\":\n      return LengthOp.REQUIRE_64_BYTES;\n    case -1:\n    case \"UNRECOGNIZED\":\n    default:\n      return LengthOp.UNRECOGNIZED;\n  }\n}\nexports.lengthOpFromJSON = lengthOpFromJSON;\nfunction lengthOpToJSON(object) {\n  switch (object) {\n    case LengthOp.NO_PREFIX:\n      return \"NO_PREFIX\";\n    case LengthOp.VAR_PROTO:\n      return \"VAR_PROTO\";\n    case LengthOp.VAR_RLP:\n      return \"VAR_RLP\";\n    case LengthOp.FIXED32_BIG:\n      return \"FIXED32_BIG\";\n    case LengthOp.FIXED32_LITTLE:\n      return \"FIXED32_LITTLE\";\n    case LengthOp.FIXED64_BIG:\n      return \"FIXED64_BIG\";\n    case LengthOp.FIXED64_LITTLE:\n      return \"FIXED64_LITTLE\";\n    case LengthOp.REQUIRE_32_BYTES:\n      return \"REQUIRE_32_BYTES\";\n    case LengthOp.REQUIRE_64_BYTES:\n      return \"REQUIRE_64_BYTES\";\n    default:\n      return \"UNKNOWN\";\n  }\n}\nexports.lengthOpToJSON = lengthOpToJSON;\nconst baseExistenceProof = {};\nexports.ExistenceProof = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.key.length !== 0) {\n      writer.uint32(10).bytes(message.key);\n    }\n    if (message.value.length !== 0) {\n      writer.uint32(18).bytes(message.value);\n    }\n    if (message.leaf !== undefined) {\n      exports.LeafOp.encode(message.leaf, writer.uint32(26).fork()).ldelim();\n    }\n    for (const v of message.path) {\n      exports.InnerOp.encode(v, writer.uint32(34).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseExistenceProof);\n    message.path = [];\n    message.key = new Uint8Array();\n    message.value = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.bytes();\n          break;\n        case 2:\n          message.value = reader.bytes();\n          break;\n        case 3:\n          message.leaf = exports.LeafOp.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.path.push(exports.InnerOp.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    var _a;\n    const message = Object.assign({}, baseExistenceProof);\n    message.key = object.key !== undefined && object.key !== null ? bytesFromBase64(object.key) : new Uint8Array();\n    message.value = object.value !== undefined && object.value !== null ? bytesFromBase64(object.value) : new Uint8Array();\n    message.leaf = object.leaf !== undefined && object.leaf !== null ? exports.LeafOp.fromJSON(object.leaf) : undefined;\n    message.path = ((_a = object.path) !== null && _a !== void 0 ? _a : []).map(e => exports.InnerOp.fromJSON(e));\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.key !== undefined && (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n    message.value !== undefined && (obj.value = base64FromBytes(message.value !== undefined ? message.value : new Uint8Array()));\n    message.leaf !== undefined && (obj.leaf = message.leaf ? exports.LeafOp.toJSON(message.leaf) : undefined);\n    if (message.path) {\n      obj.path = message.path.map(e => e ? exports.InnerOp.toJSON(e) : undefined);\n    } else {\n      obj.path = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    var _a, _b, _c;\n    const message = Object.assign({}, baseExistenceProof);\n    message.key = (_a = object.key) !== null && _a !== void 0 ? _a : new Uint8Array();\n    message.value = (_b = object.value) !== null && _b !== void 0 ? _b : new Uint8Array();\n    message.leaf = object.leaf !== undefined && object.leaf !== null ? exports.LeafOp.fromPartial(object.leaf) : undefined;\n    message.path = ((_c = object.path) === null || _c === void 0 ? void 0 : _c.map(e => exports.InnerOp.fromPartial(e))) || [];\n    return message;\n  }\n};\nconst baseNonExistenceProof = {};\nexports.NonExistenceProof = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.key.length !== 0) {\n      writer.uint32(10).bytes(message.key);\n    }\n    if (message.left !== undefined) {\n      exports.ExistenceProof.encode(message.left, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.right !== undefined) {\n      exports.ExistenceProof.encode(message.right, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseNonExistenceProof);\n    message.key = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.bytes();\n          break;\n        case 2:\n          message.left = exports.ExistenceProof.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.right = exports.ExistenceProof.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseNonExistenceProof);\n    message.key = object.key !== undefined && object.key !== null ? bytesFromBase64(object.key) : new Uint8Array();\n    message.left = object.left !== undefined && object.left !== null ? exports.ExistenceProof.fromJSON(object.left) : undefined;\n    message.right = object.right !== undefined && object.right !== null ? exports.ExistenceProof.fromJSON(object.right) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.key !== undefined && (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n    message.left !== undefined && (obj.left = message.left ? exports.ExistenceProof.toJSON(message.left) : undefined);\n    message.right !== undefined && (obj.right = message.right ? exports.ExistenceProof.toJSON(message.right) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a;\n    const message = Object.assign({}, baseNonExistenceProof);\n    message.key = (_a = object.key) !== null && _a !== void 0 ? _a : new Uint8Array();\n    message.left = object.left !== undefined && object.left !== null ? exports.ExistenceProof.fromPartial(object.left) : undefined;\n    message.right = object.right !== undefined && object.right !== null ? exports.ExistenceProof.fromPartial(object.right) : undefined;\n    return message;\n  }\n};\nconst baseCommitmentProof = {};\nexports.CommitmentProof = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.exist !== undefined) {\n      exports.ExistenceProof.encode(message.exist, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.nonexist !== undefined) {\n      exports.NonExistenceProof.encode(message.nonexist, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.batch !== undefined) {\n      exports.BatchProof.encode(message.batch, writer.uint32(26).fork()).ldelim();\n    }\n    if (message.compressed !== undefined) {\n      exports.CompressedBatchProof.encode(message.compressed, writer.uint32(34).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseCommitmentProof);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.exist = exports.ExistenceProof.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.nonexist = exports.NonExistenceProof.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.batch = exports.BatchProof.decode(reader, reader.uint32());\n          break;\n        case 4:\n          message.compressed = exports.CompressedBatchProof.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseCommitmentProof);\n    message.exist = object.exist !== undefined && object.exist !== null ? exports.ExistenceProof.fromJSON(object.exist) : undefined;\n    message.nonexist = object.nonexist !== undefined && object.nonexist !== null ? exports.NonExistenceProof.fromJSON(object.nonexist) : undefined;\n    message.batch = object.batch !== undefined && object.batch !== null ? exports.BatchProof.fromJSON(object.batch) : undefined;\n    message.compressed = object.compressed !== undefined && object.compressed !== null ? exports.CompressedBatchProof.fromJSON(object.compressed) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.exist !== undefined && (obj.exist = message.exist ? exports.ExistenceProof.toJSON(message.exist) : undefined);\n    message.nonexist !== undefined && (obj.nonexist = message.nonexist ? exports.NonExistenceProof.toJSON(message.nonexist) : undefined);\n    message.batch !== undefined && (obj.batch = message.batch ? exports.BatchProof.toJSON(message.batch) : undefined);\n    message.compressed !== undefined && (obj.compressed = message.compressed ? exports.CompressedBatchProof.toJSON(message.compressed) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseCommitmentProof);\n    message.exist = object.exist !== undefined && object.exist !== null ? exports.ExistenceProof.fromPartial(object.exist) : undefined;\n    message.nonexist = object.nonexist !== undefined && object.nonexist !== null ? exports.NonExistenceProof.fromPartial(object.nonexist) : undefined;\n    message.batch = object.batch !== undefined && object.batch !== null ? exports.BatchProof.fromPartial(object.batch) : undefined;\n    message.compressed = object.compressed !== undefined && object.compressed !== null ? exports.CompressedBatchProof.fromPartial(object.compressed) : undefined;\n    return message;\n  }\n};\nconst baseLeafOp = {\n  hash: 0,\n  prehashKey: 0,\n  prehashValue: 0,\n  length: 0\n};\nexports.LeafOp = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.hash !== 0) {\n      writer.uint32(8).int32(message.hash);\n    }\n    if (message.prehashKey !== 0) {\n      writer.uint32(16).int32(message.prehashKey);\n    }\n    if (message.prehashValue !== 0) {\n      writer.uint32(24).int32(message.prehashValue);\n    }\n    if (message.length !== 0) {\n      writer.uint32(32).int32(message.length);\n    }\n    if (message.prefix.length !== 0) {\n      writer.uint32(42).bytes(message.prefix);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseLeafOp);\n    message.prefix = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.hash = reader.int32();\n          break;\n        case 2:\n          message.prehashKey = reader.int32();\n          break;\n        case 3:\n          message.prehashValue = reader.int32();\n          break;\n        case 4:\n          message.length = reader.int32();\n          break;\n        case 5:\n          message.prefix = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseLeafOp);\n    message.hash = object.hash !== undefined && object.hash !== null ? hashOpFromJSON(object.hash) : 0;\n    message.prehashKey = object.prehashKey !== undefined && object.prehashKey !== null ? hashOpFromJSON(object.prehashKey) : 0;\n    message.prehashValue = object.prehashValue !== undefined && object.prehashValue !== null ? hashOpFromJSON(object.prehashValue) : 0;\n    message.length = object.length !== undefined && object.length !== null ? lengthOpFromJSON(object.length) : 0;\n    message.prefix = object.prefix !== undefined && object.prefix !== null ? bytesFromBase64(object.prefix) : new Uint8Array();\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.hash !== undefined && (obj.hash = hashOpToJSON(message.hash));\n    message.prehashKey !== undefined && (obj.prehashKey = hashOpToJSON(message.prehashKey));\n    message.prehashValue !== undefined && (obj.prehashValue = hashOpToJSON(message.prehashValue));\n    message.length !== undefined && (obj.length = lengthOpToJSON(message.length));\n    message.prefix !== undefined && (obj.prefix = base64FromBytes(message.prefix !== undefined ? message.prefix : new Uint8Array()));\n    return obj;\n  },\n  fromPartial(object) {\n    var _a, _b, _c, _d, _e;\n    const message = Object.assign({}, baseLeafOp);\n    message.hash = (_a = object.hash) !== null && _a !== void 0 ? _a : 0;\n    message.prehashKey = (_b = object.prehashKey) !== null && _b !== void 0 ? _b : 0;\n    message.prehashValue = (_c = object.prehashValue) !== null && _c !== void 0 ? _c : 0;\n    message.length = (_d = object.length) !== null && _d !== void 0 ? _d : 0;\n    message.prefix = (_e = object.prefix) !== null && _e !== void 0 ? _e : new Uint8Array();\n    return message;\n  }\n};\nconst baseInnerOp = {\n  hash: 0\n};\nexports.InnerOp = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.hash !== 0) {\n      writer.uint32(8).int32(message.hash);\n    }\n    if (message.prefix.length !== 0) {\n      writer.uint32(18).bytes(message.prefix);\n    }\n    if (message.suffix.length !== 0) {\n      writer.uint32(26).bytes(message.suffix);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseInnerOp);\n    message.prefix = new Uint8Array();\n    message.suffix = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.hash = reader.int32();\n          break;\n        case 2:\n          message.prefix = reader.bytes();\n          break;\n        case 3:\n          message.suffix = reader.bytes();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseInnerOp);\n    message.hash = object.hash !== undefined && object.hash !== null ? hashOpFromJSON(object.hash) : 0;\n    message.prefix = object.prefix !== undefined && object.prefix !== null ? bytesFromBase64(object.prefix) : new Uint8Array();\n    message.suffix = object.suffix !== undefined && object.suffix !== null ? bytesFromBase64(object.suffix) : new Uint8Array();\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.hash !== undefined && (obj.hash = hashOpToJSON(message.hash));\n    message.prefix !== undefined && (obj.prefix = base64FromBytes(message.prefix !== undefined ? message.prefix : new Uint8Array()));\n    message.suffix !== undefined && (obj.suffix = base64FromBytes(message.suffix !== undefined ? message.suffix : new Uint8Array()));\n    return obj;\n  },\n  fromPartial(object) {\n    var _a, _b, _c;\n    const message = Object.assign({}, baseInnerOp);\n    message.hash = (_a = object.hash) !== null && _a !== void 0 ? _a : 0;\n    message.prefix = (_b = object.prefix) !== null && _b !== void 0 ? _b : new Uint8Array();\n    message.suffix = (_c = object.suffix) !== null && _c !== void 0 ? _c : new Uint8Array();\n    return message;\n  }\n};\nconst baseProofSpec = {\n  maxDepth: 0,\n  minDepth: 0\n};\nexports.ProofSpec = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.leafSpec !== undefined) {\n      exports.LeafOp.encode(message.leafSpec, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.innerSpec !== undefined) {\n      exports.InnerSpec.encode(message.innerSpec, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.maxDepth !== 0) {\n      writer.uint32(24).int32(message.maxDepth);\n    }\n    if (message.minDepth !== 0) {\n      writer.uint32(32).int32(message.minDepth);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseProofSpec);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.leafSpec = exports.LeafOp.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.innerSpec = exports.InnerSpec.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.maxDepth = reader.int32();\n          break;\n        case 4:\n          message.minDepth = reader.int32();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseProofSpec);\n    message.leafSpec = object.leafSpec !== undefined && object.leafSpec !== null ? exports.LeafOp.fromJSON(object.leafSpec) : undefined;\n    message.innerSpec = object.innerSpec !== undefined && object.innerSpec !== null ? exports.InnerSpec.fromJSON(object.innerSpec) : undefined;\n    message.maxDepth = object.maxDepth !== undefined && object.maxDepth !== null ? Number(object.maxDepth) : 0;\n    message.minDepth = object.minDepth !== undefined && object.minDepth !== null ? Number(object.minDepth) : 0;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.leafSpec !== undefined && (obj.leafSpec = message.leafSpec ? exports.LeafOp.toJSON(message.leafSpec) : undefined);\n    message.innerSpec !== undefined && (obj.innerSpec = message.innerSpec ? exports.InnerSpec.toJSON(message.innerSpec) : undefined);\n    message.maxDepth !== undefined && (obj.maxDepth = message.maxDepth);\n    message.minDepth !== undefined && (obj.minDepth = message.minDepth);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = Object.assign({}, baseProofSpec);\n    message.leafSpec = object.leafSpec !== undefined && object.leafSpec !== null ? exports.LeafOp.fromPartial(object.leafSpec) : undefined;\n    message.innerSpec = object.innerSpec !== undefined && object.innerSpec !== null ? exports.InnerSpec.fromPartial(object.innerSpec) : undefined;\n    message.maxDepth = (_a = object.maxDepth) !== null && _a !== void 0 ? _a : 0;\n    message.minDepth = (_b = object.minDepth) !== null && _b !== void 0 ? _b : 0;\n    return message;\n  }\n};\nconst baseInnerSpec = {\n  childOrder: 0,\n  childSize: 0,\n  minPrefixLength: 0,\n  maxPrefixLength: 0,\n  hash: 0\n};\nexports.InnerSpec = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    writer.uint32(10).fork();\n    for (const v of message.childOrder) {\n      writer.int32(v);\n    }\n    writer.ldelim();\n    if (message.childSize !== 0) {\n      writer.uint32(16).int32(message.childSize);\n    }\n    if (message.minPrefixLength !== 0) {\n      writer.uint32(24).int32(message.minPrefixLength);\n    }\n    if (message.maxPrefixLength !== 0) {\n      writer.uint32(32).int32(message.maxPrefixLength);\n    }\n    if (message.emptyChild.length !== 0) {\n      writer.uint32(42).bytes(message.emptyChild);\n    }\n    if (message.hash !== 0) {\n      writer.uint32(48).int32(message.hash);\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseInnerSpec);\n    message.childOrder = [];\n    message.emptyChild = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          if ((tag & 7) === 2) {\n            const end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) {\n              message.childOrder.push(reader.int32());\n            }\n          } else {\n            message.childOrder.push(reader.int32());\n          }\n          break;\n        case 2:\n          message.childSize = reader.int32();\n          break;\n        case 3:\n          message.minPrefixLength = reader.int32();\n          break;\n        case 4:\n          message.maxPrefixLength = reader.int32();\n          break;\n        case 5:\n          message.emptyChild = reader.bytes();\n          break;\n        case 6:\n          message.hash = reader.int32();\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    var _a;\n    const message = Object.assign({}, baseInnerSpec);\n    message.childOrder = ((_a = object.childOrder) !== null && _a !== void 0 ? _a : []).map(e => Number(e));\n    message.childSize = object.childSize !== undefined && object.childSize !== null ? Number(object.childSize) : 0;\n    message.minPrefixLength = object.minPrefixLength !== undefined && object.minPrefixLength !== null ? Number(object.minPrefixLength) : 0;\n    message.maxPrefixLength = object.maxPrefixLength !== undefined && object.maxPrefixLength !== null ? Number(object.maxPrefixLength) : 0;\n    message.emptyChild = object.emptyChild !== undefined && object.emptyChild !== null ? bytesFromBase64(object.emptyChild) : new Uint8Array();\n    message.hash = object.hash !== undefined && object.hash !== null ? hashOpFromJSON(object.hash) : 0;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.childOrder) {\n      obj.childOrder = message.childOrder.map(e => e);\n    } else {\n      obj.childOrder = [];\n    }\n    message.childSize !== undefined && (obj.childSize = message.childSize);\n    message.minPrefixLength !== undefined && (obj.minPrefixLength = message.minPrefixLength);\n    message.maxPrefixLength !== undefined && (obj.maxPrefixLength = message.maxPrefixLength);\n    message.emptyChild !== undefined && (obj.emptyChild = base64FromBytes(message.emptyChild !== undefined ? message.emptyChild : new Uint8Array()));\n    message.hash !== undefined && (obj.hash = hashOpToJSON(message.hash));\n    return obj;\n  },\n  fromPartial(object) {\n    var _a, _b, _c, _d, _e, _f;\n    const message = Object.assign({}, baseInnerSpec);\n    message.childOrder = ((_a = object.childOrder) === null || _a === void 0 ? void 0 : _a.map(e => e)) || [];\n    message.childSize = (_b = object.childSize) !== null && _b !== void 0 ? _b : 0;\n    message.minPrefixLength = (_c = object.minPrefixLength) !== null && _c !== void 0 ? _c : 0;\n    message.maxPrefixLength = (_d = object.maxPrefixLength) !== null && _d !== void 0 ? _d : 0;\n    message.emptyChild = (_e = object.emptyChild) !== null && _e !== void 0 ? _e : new Uint8Array();\n    message.hash = (_f = object.hash) !== null && _f !== void 0 ? _f : 0;\n    return message;\n  }\n};\nconst baseBatchProof = {};\nexports.BatchProof = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.entries) {\n      exports.BatchEntry.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseBatchProof);\n    message.entries = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.entries.push(exports.BatchEntry.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    var _a;\n    const message = Object.assign({}, baseBatchProof);\n    message.entries = ((_a = object.entries) !== null && _a !== void 0 ? _a : []).map(e => exports.BatchEntry.fromJSON(e));\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.entries) {\n      obj.entries = message.entries.map(e => e ? exports.BatchEntry.toJSON(e) : undefined);\n    } else {\n      obj.entries = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    var _a;\n    const message = Object.assign({}, baseBatchProof);\n    message.entries = ((_a = object.entries) === null || _a === void 0 ? void 0 : _a.map(e => exports.BatchEntry.fromPartial(e))) || [];\n    return message;\n  }\n};\nconst baseBatchEntry = {};\nexports.BatchEntry = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.exist !== undefined) {\n      exports.ExistenceProof.encode(message.exist, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.nonexist !== undefined) {\n      exports.NonExistenceProof.encode(message.nonexist, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseBatchEntry);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.exist = exports.ExistenceProof.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.nonexist = exports.NonExistenceProof.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseBatchEntry);\n    message.exist = object.exist !== undefined && object.exist !== null ? exports.ExistenceProof.fromJSON(object.exist) : undefined;\n    message.nonexist = object.nonexist !== undefined && object.nonexist !== null ? exports.NonExistenceProof.fromJSON(object.nonexist) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.exist !== undefined && (obj.exist = message.exist ? exports.ExistenceProof.toJSON(message.exist) : undefined);\n    message.nonexist !== undefined && (obj.nonexist = message.nonexist ? exports.NonExistenceProof.toJSON(message.nonexist) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseBatchEntry);\n    message.exist = object.exist !== undefined && object.exist !== null ? exports.ExistenceProof.fromPartial(object.exist) : undefined;\n    message.nonexist = object.nonexist !== undefined && object.nonexist !== null ? exports.NonExistenceProof.fromPartial(object.nonexist) : undefined;\n    return message;\n  }\n};\nconst baseCompressedBatchProof = {};\nexports.CompressedBatchProof = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    for (const v of message.entries) {\n      exports.CompressedBatchEntry.encode(v, writer.uint32(10).fork()).ldelim();\n    }\n    for (const v of message.lookupInners) {\n      exports.InnerOp.encode(v, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseCompressedBatchProof);\n    message.entries = [];\n    message.lookupInners = [];\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.entries.push(exports.CompressedBatchEntry.decode(reader, reader.uint32()));\n          break;\n        case 2:\n          message.lookupInners.push(exports.InnerOp.decode(reader, reader.uint32()));\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    var _a, _b;\n    const message = Object.assign({}, baseCompressedBatchProof);\n    message.entries = ((_a = object.entries) !== null && _a !== void 0 ? _a : []).map(e => exports.CompressedBatchEntry.fromJSON(e));\n    message.lookupInners = ((_b = object.lookupInners) !== null && _b !== void 0 ? _b : []).map(e => exports.InnerOp.fromJSON(e));\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    if (message.entries) {\n      obj.entries = message.entries.map(e => e ? exports.CompressedBatchEntry.toJSON(e) : undefined);\n    } else {\n      obj.entries = [];\n    }\n    if (message.lookupInners) {\n      obj.lookupInners = message.lookupInners.map(e => e ? exports.InnerOp.toJSON(e) : undefined);\n    } else {\n      obj.lookupInners = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    var _a, _b;\n    const message = Object.assign({}, baseCompressedBatchProof);\n    message.entries = ((_a = object.entries) === null || _a === void 0 ? void 0 : _a.map(e => exports.CompressedBatchEntry.fromPartial(e))) || [];\n    message.lookupInners = ((_b = object.lookupInners) === null || _b === void 0 ? void 0 : _b.map(e => exports.InnerOp.fromPartial(e))) || [];\n    return message;\n  }\n};\nconst baseCompressedBatchEntry = {};\nexports.CompressedBatchEntry = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.exist !== undefined) {\n      exports.CompressedExistenceProof.encode(message.exist, writer.uint32(10).fork()).ldelim();\n    }\n    if (message.nonexist !== undefined) {\n      exports.CompressedNonExistenceProof.encode(message.nonexist, writer.uint32(18).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseCompressedBatchEntry);\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.exist = exports.CompressedExistenceProof.decode(reader, reader.uint32());\n          break;\n        case 2:\n          message.nonexist = exports.CompressedNonExistenceProof.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseCompressedBatchEntry);\n    message.exist = object.exist !== undefined && object.exist !== null ? exports.CompressedExistenceProof.fromJSON(object.exist) : undefined;\n    message.nonexist = object.nonexist !== undefined && object.nonexist !== null ? exports.CompressedNonExistenceProof.fromJSON(object.nonexist) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.exist !== undefined && (obj.exist = message.exist ? exports.CompressedExistenceProof.toJSON(message.exist) : undefined);\n    message.nonexist !== undefined && (obj.nonexist = message.nonexist ? exports.CompressedNonExistenceProof.toJSON(message.nonexist) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    const message = Object.assign({}, baseCompressedBatchEntry);\n    message.exist = object.exist !== undefined && object.exist !== null ? exports.CompressedExistenceProof.fromPartial(object.exist) : undefined;\n    message.nonexist = object.nonexist !== undefined && object.nonexist !== null ? exports.CompressedNonExistenceProof.fromPartial(object.nonexist) : undefined;\n    return message;\n  }\n};\nconst baseCompressedExistenceProof = {\n  path: 0\n};\nexports.CompressedExistenceProof = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.key.length !== 0) {\n      writer.uint32(10).bytes(message.key);\n    }\n    if (message.value.length !== 0) {\n      writer.uint32(18).bytes(message.value);\n    }\n    if (message.leaf !== undefined) {\n      exports.LeafOp.encode(message.leaf, writer.uint32(26).fork()).ldelim();\n    }\n    writer.uint32(34).fork();\n    for (const v of message.path) {\n      writer.int32(v);\n    }\n    writer.ldelim();\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseCompressedExistenceProof);\n    message.path = [];\n    message.key = new Uint8Array();\n    message.value = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.bytes();\n          break;\n        case 2:\n          message.value = reader.bytes();\n          break;\n        case 3:\n          message.leaf = exports.LeafOp.decode(reader, reader.uint32());\n          break;\n        case 4:\n          if ((tag & 7) === 2) {\n            const end2 = reader.uint32() + reader.pos;\n            while (reader.pos < end2) {\n              message.path.push(reader.int32());\n            }\n          } else {\n            message.path.push(reader.int32());\n          }\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    var _a;\n    const message = Object.assign({}, baseCompressedExistenceProof);\n    message.key = object.key !== undefined && object.key !== null ? bytesFromBase64(object.key) : new Uint8Array();\n    message.value = object.value !== undefined && object.value !== null ? bytesFromBase64(object.value) : new Uint8Array();\n    message.leaf = object.leaf !== undefined && object.leaf !== null ? exports.LeafOp.fromJSON(object.leaf) : undefined;\n    message.path = ((_a = object.path) !== null && _a !== void 0 ? _a : []).map(e => Number(e));\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.key !== undefined && (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n    message.value !== undefined && (obj.value = base64FromBytes(message.value !== undefined ? message.value : new Uint8Array()));\n    message.leaf !== undefined && (obj.leaf = message.leaf ? exports.LeafOp.toJSON(message.leaf) : undefined);\n    if (message.path) {\n      obj.path = message.path.map(e => e);\n    } else {\n      obj.path = [];\n    }\n    return obj;\n  },\n  fromPartial(object) {\n    var _a, _b, _c;\n    const message = Object.assign({}, baseCompressedExistenceProof);\n    message.key = (_a = object.key) !== null && _a !== void 0 ? _a : new Uint8Array();\n    message.value = (_b = object.value) !== null && _b !== void 0 ? _b : new Uint8Array();\n    message.leaf = object.leaf !== undefined && object.leaf !== null ? exports.LeafOp.fromPartial(object.leaf) : undefined;\n    message.path = ((_c = object.path) === null || _c === void 0 ? void 0 : _c.map(e => e)) || [];\n    return message;\n  }\n};\nconst baseCompressedNonExistenceProof = {};\nexports.CompressedNonExistenceProof = {\n  encode(message, writer = minimal_1.default.Writer.create()) {\n    if (message.key.length !== 0) {\n      writer.uint32(10).bytes(message.key);\n    }\n    if (message.left !== undefined) {\n      exports.CompressedExistenceProof.encode(message.left, writer.uint32(18).fork()).ldelim();\n    }\n    if (message.right !== undefined) {\n      exports.CompressedExistenceProof.encode(message.right, writer.uint32(26).fork()).ldelim();\n    }\n    return writer;\n  },\n  decode(input, length) {\n    const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);\n    let end = length === undefined ? reader.len : reader.pos + length;\n    const message = Object.assign({}, baseCompressedNonExistenceProof);\n    message.key = new Uint8Array();\n    while (reader.pos < end) {\n      const tag = reader.uint32();\n      switch (tag >>> 3) {\n        case 1:\n          message.key = reader.bytes();\n          break;\n        case 2:\n          message.left = exports.CompressedExistenceProof.decode(reader, reader.uint32());\n          break;\n        case 3:\n          message.right = exports.CompressedExistenceProof.decode(reader, reader.uint32());\n          break;\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n    return message;\n  },\n  fromJSON(object) {\n    const message = Object.assign({}, baseCompressedNonExistenceProof);\n    message.key = object.key !== undefined && object.key !== null ? bytesFromBase64(object.key) : new Uint8Array();\n    message.left = object.left !== undefined && object.left !== null ? exports.CompressedExistenceProof.fromJSON(object.left) : undefined;\n    message.right = object.right !== undefined && object.right !== null ? exports.CompressedExistenceProof.fromJSON(object.right) : undefined;\n    return message;\n  },\n  toJSON(message) {\n    const obj = {};\n    message.key !== undefined && (obj.key = base64FromBytes(message.key !== undefined ? message.key : new Uint8Array()));\n    message.left !== undefined && (obj.left = message.left ? exports.CompressedExistenceProof.toJSON(message.left) : undefined);\n    message.right !== undefined && (obj.right = message.right ? exports.CompressedExistenceProof.toJSON(message.right) : undefined);\n    return obj;\n  },\n  fromPartial(object) {\n    var _a;\n    const message = Object.assign({}, baseCompressedNonExistenceProof);\n    message.key = (_a = object.key) !== null && _a !== void 0 ? _a : new Uint8Array();\n    message.left = object.left !== undefined && object.left !== null ? exports.CompressedExistenceProof.fromPartial(object.left) : undefined;\n    message.right = object.right !== undefined && object.right !== null ? exports.CompressedExistenceProof.fromPartial(object.right) : undefined;\n    return message;\n  }\n};\nvar globalThis = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  if (typeof self !== \"undefined\") return self;\n  if (typeof window !== \"undefined\") return window;\n  if (typeof global !== \"undefined\") return global;\n  throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob || (b64 => globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n  const bin = atob(b64);\n  const arr = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; ++i) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return arr;\n}\nconst btoa = globalThis.btoa || (bin => globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n  const bin = [];\n  for (const byte of arr) {\n    bin.push(String.fromCharCode(byte));\n  }\n  return btoa(bin.join(\"\"));\n}\nif (minimal_1.default.util.Long !== long_1.default) {\n  minimal_1.default.util.Long = long_1.default;\n  minimal_1.default.configure();\n}","map":{"version":3,"names":["long_1","__importDefault","require","minimal_1","exports","protobufPackage","HashOp","hashOpFromJSON","object","NO_HASH","SHA256","SHA512","KECCAK","RIPEMD160","BITCOIN","UNRECOGNIZED","hashOpToJSON","LengthOp","lengthOpFromJSON","NO_PREFIX","VAR_PROTO","VAR_RLP","FIXED32_BIG","FIXED32_LITTLE","FIXED64_BIG","FIXED64_LITTLE","REQUIRE_32_BYTES","REQUIRE_64_BYTES","lengthOpToJSON","baseExistenceProof","ExistenceProof","encode","message","writer","default","Writer","create","key","length","uint32","bytes","value","leaf","undefined","LeafOp","fork","ldelim","v","path","InnerOp","decode","input","reader","Reader","end","len","pos","Object","assign","Uint8Array","tag","push","skipType","fromJSON","bytesFromBase64","_a","map","e","toJSON","obj","base64FromBytes","fromPartial","_b","_c","baseNonExistenceProof","NonExistenceProof","left","right","baseCommitmentProof","CommitmentProof","exist","nonexist","batch","BatchProof","compressed","CompressedBatchProof","baseLeafOp","hash","prehashKey","prehashValue","int32","prefix","_d","_e","baseInnerOp","suffix","baseProofSpec","maxDepth","minDepth","ProofSpec","leafSpec","innerSpec","InnerSpec","Number","baseInnerSpec","childOrder","childSize","minPrefixLength","maxPrefixLength","emptyChild","end2","_f","baseBatchProof","entries","BatchEntry","baseBatchEntry","baseCompressedBatchProof","CompressedBatchEntry","lookupInners","baseCompressedBatchEntry","CompressedExistenceProof","CompressedNonExistenceProof","baseCompressedExistenceProof","baseCompressedNonExistenceProof","globalThis","self","window","global","atob","b64","Buffer","from","toString","bin","arr","i","charCodeAt","btoa","byte","String","fromCharCode","join","util","Long","configure"],"sources":["../../src/confio/proofs.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}