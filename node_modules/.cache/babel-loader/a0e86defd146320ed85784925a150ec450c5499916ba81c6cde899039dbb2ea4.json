{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.accountFromAny = void 0;\nconst math_1 = require(\"@cosmjs/math\");\nconst proto_signing_1 = require(\"@cosmjs/proto-signing\");\nconst utils_1 = require(\"@cosmjs/utils\");\nconst auth_1 = require(\"cosmjs-types/cosmos/auth/v1beta1/auth\");\nconst vesting_1 = require(\"cosmjs-types/cosmos/vesting/v1beta1/vesting\");\nfunction uint64FromProto(input) {\n  return math_1.Uint64.fromString(input.toString());\n}\nfunction accountFromBaseAccount(input) {\n  const {\n    address,\n    pubKey,\n    accountNumber,\n    sequence\n  } = input;\n  const pubkey = (0, proto_signing_1.decodePubkey)(pubKey);\n  return {\n    address: address,\n    pubkey: pubkey,\n    accountNumber: uint64FromProto(accountNumber).toNumber(),\n    sequence: uint64FromProto(sequence).toNumber()\n  };\n}\n/**\n * Takes an `Any` encoded account from the chain and extracts some common\n * `Account` information from it. This is supposed to support the most relevant\n * common Cosmos SDK account types. If you need support for exotic account types,\n * you'll need to write your own account decoder.\n */\nfunction accountFromAny(input) {\n  var _a, _b, _c, _d, _e, _f, _g;\n  const {\n    typeUrl,\n    value\n  } = input;\n  switch (typeUrl) {\n    // auth\n    case \"/cosmos.auth.v1beta1.BaseAccount\":\n      return accountFromBaseAccount(auth_1.BaseAccount.decode(value));\n    case \"/cosmos.auth.v1beta1.ModuleAccount\":\n      {\n        const baseAccount = auth_1.ModuleAccount.decode(value).baseAccount;\n        (0, utils_1.assert)(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n    // vesting\n    case \"/cosmos.vesting.v1beta1.BaseVestingAccount\":\n      {\n        const baseAccount = (_a = vesting_1.BaseVestingAccount.decode(value)) === null || _a === void 0 ? void 0 : _a.baseAccount;\n        (0, utils_1.assert)(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n    case \"/cosmos.vesting.v1beta1.ContinuousVestingAccount\":\n      {\n        const baseAccount = (_c = (_b = vesting_1.ContinuousVestingAccount.decode(value)) === null || _b === void 0 ? void 0 : _b.baseVestingAccount) === null || _c === void 0 ? void 0 : _c.baseAccount;\n        (0, utils_1.assert)(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n    case \"/cosmos.vesting.v1beta1.DelayedVestingAccount\":\n      {\n        const baseAccount = (_e = (_d = vesting_1.DelayedVestingAccount.decode(value)) === null || _d === void 0 ? void 0 : _d.baseVestingAccount) === null || _e === void 0 ? void 0 : _e.baseAccount;\n        (0, utils_1.assert)(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n    case \"/cosmos.vesting.v1beta1.PeriodicVestingAccount\":\n      {\n        const baseAccount = (_g = (_f = vesting_1.PeriodicVestingAccount.decode(value)) === null || _f === void 0 ? void 0 : _f.baseVestingAccount) === null || _g === void 0 ? void 0 : _g.baseAccount;\n        (0, utils_1.assert)(baseAccount);\n        return accountFromBaseAccount(baseAccount);\n      }\n    default:\n      throw new Error(`Unsupported type: '${typeUrl}'`);\n  }\n}\nexports.accountFromAny = accountFromAny;","map":{"version":3,"names":["math_1","require","proto_signing_1","utils_1","auth_1","vesting_1","uint64FromProto","input","Uint64","fromString","toString","accountFromBaseAccount","address","pubKey","accountNumber","sequence","pubkey","decodePubkey","toNumber","accountFromAny","typeUrl","value","BaseAccount","decode","baseAccount","ModuleAccount","assert","_a","BaseVestingAccount","_c","_b","ContinuousVestingAccount","baseVestingAccount","_e","_d","DelayedVestingAccount","_g","_f","PeriodicVestingAccount","Error","exports"],"sources":["../src/accounts.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}