{"ast":null,"code":"\"use strict\";\n\nvar _classPrivateFieldInitSpec = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _classPrivateFieldGet = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateFieldGet.js\").default;\nvar _classPrivateFieldSet = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateFieldSet.js\").default;\nvar _defineProperty = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nlet _Symbol$iterator, _Symbol$iterator2;\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionResponse = exports.TransactionReceipt = exports.Log = exports.Block = exports.copyRequest = exports.FeeData = void 0;\n//import { resolveAddress } from \"@ethersproject/address\";\nconst index_js_1 = require(\"../utils/index.js\");\nconst index_js_2 = require(\"../transaction/index.js\");\nconst BN_0 = BigInt(0);\n// -----------------------\nfunction getValue(value) {\n  if (value == null) {\n    return null;\n  }\n  return value;\n}\nfunction toJson(value) {\n  if (value == null) {\n    return null;\n  }\n  return value.toString();\n}\n// @TODO? <T extends FeeData = { }> implements Required<T>\n/**\n *  A **FeeData** wraps all the fee-related values associated with\n *  the network.\n */\nclass FeeData {\n  /**\n   *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and\n   *  %%maxPriorityFeePerGas%%.\n   */\n  constructor(gasPrice, maxFeePerGas, maxPriorityFeePerGas) {\n    /**\n     *  The gas price for legacy networks.\n     */\n    _defineProperty(this, \"gasPrice\", void 0);\n    /**\n     *  The maximum fee to pay per gas.\n     *\n     *  The base fee per gas is defined by the network and based on\n     *  congestion, increasing the cost during times of heavy load\n     *  and lowering when less busy.\n     *\n     *  The actual fee per gas will be the base fee for the block\n     *  and the priority fee, up to the max fee per gas.\n     *\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n     */\n    _defineProperty(this, \"maxFeePerGas\", void 0);\n    /**\n     *  The additional amout to pay per gas to encourage a validator\n     *  to include the transaction.\n     *\n     *  The purpose of this is to compensate the validator for the\n     *  adjusted risk for including a given transaction.\n     *\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n     */\n    _defineProperty(this, \"maxPriorityFeePerGas\", void 0);\n    (0, index_js_1.defineProperties)(this, {\n      gasPrice: getValue(gasPrice),\n      maxFeePerGas: getValue(maxFeePerGas),\n      maxPriorityFeePerGas: getValue(maxPriorityFeePerGas)\n    });\n  }\n  /**\n   *  Returns a JSON-friendly value.\n   */\n  toJSON() {\n    const {\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    } = this;\n    return {\n      _type: \"FeeData\",\n      gasPrice: toJson(gasPrice),\n      maxFeePerGas: toJson(maxFeePerGas),\n      maxPriorityFeePerGas: toJson(maxPriorityFeePerGas)\n    };\n  }\n}\nexports.FeeData = FeeData;\n;\n/**\n *  Returns a copy of %%req%% with all properties coerced to their strict\n *  types.\n */\nfunction copyRequest(req) {\n  const result = {};\n  // These could be addresses, ENS names or Addressables\n  if (req.to) {\n    result.to = req.to;\n  }\n  if (req.from) {\n    result.from = req.from;\n  }\n  if (req.data) {\n    result.data = (0, index_js_1.hexlify)(req.data);\n  }\n  const bigIntKeys = \"chainId,gasLimit,gasPrice,maxFeePerGas,maxPriorityFeePerGas,value\".split(/,/);\n  for (const key of bigIntKeys) {\n    if (!(key in req) || req[key] == null) {\n      continue;\n    }\n    result[key] = (0, index_js_1.getBigInt)(req[key], `request.${key}`);\n  }\n  const numberKeys = \"type,nonce\".split(/,/);\n  for (const key of numberKeys) {\n    if (!(key in req) || req[key] == null) {\n      continue;\n    }\n    result[key] = (0, index_js_1.getNumber)(req[key], `request.${key}`);\n  }\n  if (req.accessList) {\n    result.accessList = (0, index_js_2.accessListify)(req.accessList);\n  }\n  if (\"blockTag\" in req) {\n    result.blockTag = req.blockTag;\n  }\n  if (\"enableCcipRead\" in req) {\n    result.enableCcipRead = !!req.enableCcipRead;\n  }\n  if (\"customData\" in req) {\n    result.customData = req.customData;\n  }\n  return result;\n}\nexports.copyRequest = copyRequest;\n/**\n *  A **Block** represents the data associated with a full block on\n *  Ethereum.\n */\nvar _transactions = /*#__PURE__*/new WeakMap();\n_Symbol$iterator = Symbol.iterator;\nclass Block {\n  /**\n   *  Create a new **Block** object.\n   *\n   *  This should generally not be necessary as the unless implementing a\n   *  low-level library.\n   */\n  constructor(block, provider) {\n    /**\n     *  The provider connected to the block used to fetch additional details\n     *  if necessary.\n     */\n    _defineProperty(this, \"provider\", void 0);\n    /**\n     *  The block number, sometimes called the block height. This is a\n     *  sequential number that is one higher than the parent block.\n     */\n    _defineProperty(this, \"number\", void 0);\n    /**\n     *  The block hash.\n     *\n     *  This hash includes all properties, so can be safely used to identify\n     *  an exact set of block properties.\n     */\n    _defineProperty(this, \"hash\", void 0);\n    /**\n     *  The timestamp for this block, which is the number of seconds since\n     *  epoch that this block was included.\n     */\n    _defineProperty(this, \"timestamp\", void 0);\n    /**\n     *  The block hash of the parent block.\n     */\n    _defineProperty(this, \"parentHash\", void 0);\n    /**\n     *  The nonce.\n     *\n     *  On legacy networks, this is the random number inserted which\n     *  permitted the difficulty target to be reached.\n     */\n    _defineProperty(this, \"nonce\", void 0);\n    /**\n     *  The difficulty target.\n     *\n     *  On legacy networks, this is the proof-of-work target required\n     *  for a block to meet the protocol rules to be included.\n     *\n     *  On modern networks, this is a random number arrived at using\n     *  randao.  @TODO: Find links?\n     */\n    _defineProperty(this, \"difficulty\", void 0);\n    /**\n     *  The total gas limit for this block.\n     */\n    _defineProperty(this, \"gasLimit\", void 0);\n    /**\n     *  The total gas used in this block.\n     */\n    _defineProperty(this, \"gasUsed\", void 0);\n    /**\n     *  The miner coinbase address, wihch receives any subsidies for\n     *  including this block.\n     */\n    _defineProperty(this, \"miner\", void 0);\n    /**\n     *  Any extra data the validator wished to include.\n     */\n    _defineProperty(this, \"extraData\", void 0);\n    /**\n     *  The base fee per gas that all transactions in this block were\n     *  charged.\n     *\n     *  This adjusts after each block, depending on how congested the network\n     *  is.\n     */\n    _defineProperty(this, \"baseFeePerGas\", void 0);\n    _classPrivateFieldInitSpec(this, _transactions, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _transactions, block.transactions.map(tx => {\n      if (typeof tx !== \"string\") {\n        return new TransactionResponse(tx, provider);\n      }\n      return tx;\n    }));\n    (0, index_js_1.defineProperties)(this, {\n      provider,\n      hash: getValue(block.hash),\n      number: block.number,\n      timestamp: block.timestamp,\n      parentHash: block.parentHash,\n      nonce: block.nonce,\n      difficulty: block.difficulty,\n      gasLimit: block.gasLimit,\n      gasUsed: block.gasUsed,\n      miner: block.miner,\n      extraData: block.extraData,\n      baseFeePerGas: getValue(block.baseFeePerGas)\n    });\n  }\n  /**\n   *  Returns the list of transaction hashes.\n   */\n  get transactions() {\n    return _classPrivateFieldGet(this, _transactions).map(tx => {\n      if (typeof tx === \"string\") {\n        return tx;\n      }\n      return tx.hash;\n    });\n  }\n  /**\n   *  Returns the complete transactions for blocks which\n   *  prefetched them, by passing ``true`` to %%prefetchTxs%%\n   *  into [[Provider-getBlock]].\n   */\n  get prefetchedTransactions() {\n    const txs = _classPrivateFieldGet(this, _transactions).slice();\n    // Doesn't matter...\n    if (txs.length === 0) {\n      return [];\n    }\n    // Make sure we prefetched the transactions\n    (0, index_js_1.assert)(typeof txs[0] === \"object\", \"transactions were not prefetched with block request\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"transactionResponses()\"\n    });\n    return txs;\n  }\n  /**\n   *  Returns a JSON-friendly value.\n   */\n  toJSON() {\n    const {\n      baseFeePerGas,\n      difficulty,\n      extraData,\n      gasLimit,\n      gasUsed,\n      hash,\n      miner,\n      nonce,\n      number,\n      parentHash,\n      timestamp,\n      transactions\n    } = this;\n    return {\n      _type: \"Block\",\n      baseFeePerGas: toJson(baseFeePerGas),\n      difficulty: toJson(difficulty),\n      extraData,\n      gasLimit: toJson(gasLimit),\n      gasUsed: toJson(gasUsed),\n      hash,\n      miner,\n      nonce,\n      number,\n      parentHash,\n      timestamp,\n      transactions\n    };\n  }\n  [_Symbol$iterator]() {\n    let index = 0;\n    const txs = this.transactions;\n    return {\n      next: () => {\n        if (index < this.length) {\n          return {\n            value: txs[index++],\n            done: false\n          };\n        }\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n    };\n  }\n  /**\n   *  The number of transactions in this block.\n   */\n  get length() {\n    return _classPrivateFieldGet(this, _transactions).length;\n  }\n  /**\n   *  The [[link-js-date]] this block was included at.\n   */\n  get date() {\n    if (this.timestamp == null) {\n      return null;\n    }\n    return new Date(this.timestamp * 1000);\n  }\n  /**\n   *  Get the transaction at %%indexe%% within this block.\n   */\n  async getTransaction(indexOrHash) {\n    // Find the internal value by its index or hash\n    let tx = undefined;\n    if (typeof indexOrHash === \"number\") {\n      tx = _classPrivateFieldGet(this, _transactions)[indexOrHash];\n    } else {\n      const hash = indexOrHash.toLowerCase();\n      for (const v of _classPrivateFieldGet(this, _transactions)) {\n        if (typeof v === \"string\") {\n          if (v !== hash) {\n            continue;\n          }\n          tx = v;\n          break;\n        } else {\n          if (v.hash === hash) {\n            continue;\n          }\n          tx = v;\n          break;\n        }\n      }\n    }\n    if (tx == null) {\n      throw new Error(\"no such tx\");\n    }\n    if (typeof tx === \"string\") {\n      return await this.provider.getTransaction(tx);\n    } else {\n      return tx;\n    }\n  }\n  /**\n   *  If a **Block** was fetched with a request to include the transactions\n   *  this will allow synchronous access to those transactions.\n   *\n   *  If the transactions were not prefetched, this will throw.\n   */\n  getPrefetchedTransaction(indexOrHash) {\n    const txs = this.prefetchedTransactions;\n    if (typeof indexOrHash === \"number\") {\n      return txs[indexOrHash];\n    }\n    indexOrHash = indexOrHash.toLowerCase();\n    for (const tx of txs) {\n      if (tx.hash === indexOrHash) {\n        return tx;\n      }\n    }\n    (0, index_js_1.assertArgument)(false, \"no matching transaction\", \"indexOrHash\", indexOrHash);\n  }\n  /**\n   *  Returns true if this block been mined. This provides a type guard\n   *  for all properties on a [[MinedBlock]].\n   */\n  isMined() {\n    return !!this.hash;\n  }\n  /**\n   *  Returns true if this block is an [[link-eip-2930]] block.\n   */\n  isLondon() {\n    return !!this.baseFeePerGas;\n  }\n  /**\n   *  @_ignore:\n   */\n  orphanedEvent() {\n    if (!this.isMined()) {\n      throw new Error(\"\");\n    }\n    return createOrphanedBlockFilter(this);\n  }\n}\nexports.Block = Block;\n//////////////////////\n// Log\n/**\n *  A **Log** in Ethereum represents an event that has been included in a\n *  transaction using the ``LOG*`` opcodes, which are most commonly used by\n *  Solidity's emit for announcing events.\n */\nclass Log {\n  /**\n   *  @_ignore:\n   */\n  constructor(log, provider) {\n    /**\n     *  The provider connected to the log used to fetch additional details\n     *  if necessary.\n     */\n    _defineProperty(this, \"provider\", void 0);\n    /**\n     *  The transaction hash of the transaction this log occurred in. Use the\n     *  [[Log-getTransaction]] to get the [[TransactionResponse]].\n     */\n    _defineProperty(this, \"transactionHash\", void 0);\n    /**\n     *  The block hash of the block this log occurred in. Use the\n     *  [[Log-getBlock]] to get the [[Block]].\n     */\n    _defineProperty(this, \"blockHash\", void 0);\n    /**\n     *  The block number of the block this log occurred in. It is preferred\n     *  to use the [[Block-hash]] when fetching the related [[Block]],\n     *  since in the case of an orphaned block, the block at that height may\n     *  have changed.\n     */\n    _defineProperty(this, \"blockNumber\", void 0);\n    /**\n     *  If the **Log** represents a block that was removed due to an orphaned\n     *  block, this will be true.\n     *\n     *  This can only happen within an orphan event listener.\n     */\n    _defineProperty(this, \"removed\", void 0);\n    /**\n     *  The address of the contract that emitted this log.\n     */\n    _defineProperty(this, \"address\", void 0);\n    /**\n     *  The data included in this log when it was emitted.\n     */\n    _defineProperty(this, \"data\", void 0);\n    /**\n     *  The indexed topics included in this log when it was emitted.\n     *\n     *  All topics are included in the bloom filters, so they can be\n     *  efficiently filtered using the [[Provider-getLogs]] method.\n     */\n    _defineProperty(this, \"topics\", void 0);\n    /**\n     *  The index within the block this log occurred at. This is generally\n     *  not useful to developers, but can be used with the various roots\n     *  to proof inclusion within a block.\n     */\n    _defineProperty(this, \"index\", void 0);\n    /**\n     *  The index within the transaction of this log.\n     */\n    _defineProperty(this, \"transactionIndex\", void 0);\n    this.provider = provider;\n    const topics = Object.freeze(log.topics.slice());\n    (0, index_js_1.defineProperties)(this, {\n      transactionHash: log.transactionHash,\n      blockHash: log.blockHash,\n      blockNumber: log.blockNumber,\n      removed: log.removed,\n      address: log.address,\n      data: log.data,\n      topics,\n      index: log.index,\n      transactionIndex: log.transactionIndex\n    });\n  }\n  /**\n   *  Returns a JSON-compatible object.\n   */\n  toJSON() {\n    const {\n      address,\n      blockHash,\n      blockNumber,\n      data,\n      index,\n      removed,\n      topics,\n      transactionHash,\n      transactionIndex\n    } = this;\n    return {\n      _type: \"log\",\n      address,\n      blockHash,\n      blockNumber,\n      data,\n      index,\n      removed,\n      topics,\n      transactionHash,\n      transactionIndex\n    };\n  }\n  /**\n   *  Returns the block that this log occurred in.\n   */\n  async getBlock() {\n    const block = await this.provider.getBlock(this.blockHash);\n    (0, index_js_1.assert)(!!block, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\n    return block;\n  }\n  /**\n   *  Returns the transaction that this log occurred in.\n   */\n  async getTransaction() {\n    const tx = await this.provider.getTransaction(this.transactionHash);\n    (0, index_js_1.assert)(!!tx, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\n    return tx;\n  }\n  /**\n   *  Returns the transaction receipt fot the transaction that this\n   *  log occurred in.\n   */\n  async getTransactionReceipt() {\n    const receipt = await this.provider.getTransactionReceipt(this.transactionHash);\n    (0, index_js_1.assert)(!!receipt, \"failed to find transaction receipt\", \"UNKNOWN_ERROR\", {});\n    return receipt;\n  }\n  /**\n   *  @_ignore:\n   */\n  removedEvent() {\n    return createRemovedLogFilter(this);\n  }\n}\nexports.Log = Log;\n//////////////////////\n// Transaction Receipt\n/*\nexport interface LegacyTransactionReceipt {\n    byzantium: false;\n    status: null;\n    root: string;\n}\n\nexport interface ByzantiumTransactionReceipt {\n    byzantium: true;\n    status: number;\n    root: null;\n}\n*/\n/**\n *  A **TransactionReceipt** includes additional information about a\n *  transaction that is only available after it has been mined.\n */\nvar _logs = /*#__PURE__*/new WeakMap();\n_Symbol$iterator2 = Symbol.iterator;\nclass TransactionReceipt {\n  /**\n   *  @_ignore:\n   */\n  constructor(tx, provider) {\n    /**\n     *  The provider connected to the log used to fetch additional details\n     *  if necessary.\n     */\n    _defineProperty(this, \"provider\", void 0);\n    /**\n     *  The address the transaction was send to.\n     */\n    _defineProperty(this, \"to\", void 0);\n    /**\n     *  The sender of the transaction.\n     */\n    _defineProperty(this, \"from\", void 0);\n    /**\n     *  The address of the contract if the transaction was directly\n     *  responsible for deploying one.\n     *\n     *  This is non-null **only** if the ``to`` is empty and the ``data``\n     *  was successfully executed as initcode.\n     */\n    _defineProperty(this, \"contractAddress\", void 0);\n    /**\n     *  The transaction hash.\n     */\n    _defineProperty(this, \"hash\", void 0);\n    /**\n     *  The index of this transaction within the block transactions.\n     */\n    _defineProperty(this, \"index\", void 0);\n    /**\n     *  The block hash of the [[Block]] this transaction was included in.\n     */\n    _defineProperty(this, \"blockHash\", void 0);\n    /**\n     *  The block number of the [[Block]] this transaction was included in.\n     */\n    _defineProperty(this, \"blockNumber\", void 0);\n    /**\n     *  The bloom filter bytes that represent all logs that occurred within\n     *  this transaction. This is generally not useful for most developers,\n     *  but can be used to validate the included logs.\n     */\n    _defineProperty(this, \"logsBloom\", void 0);\n    /**\n     *  The actual amount of gas used by this transaction.\n     *\n     *  When creating a transaction, the amount of gas that will be used can\n     *  only be approximated, but the sender must pay the gas fee for the\n     *  entire gas limit. After the transaction, the difference is refunded.\n     */\n    _defineProperty(this, \"gasUsed\", void 0);\n    /**\n     *  The amount of gas used by all transactions within the block for this\n     *  and all transactions with a lower ``index``.\n     *\n     *  This is generally not useful for developers but can be used to\n     *  validate certain aspects of execution.\n     */\n    _defineProperty(this, \"cumulativeGasUsed\", void 0);\n    /**\n     *  The actual gas price used during execution.\n     *\n     *  Due to the complexity of [[link-eip-1559]] this value can only\n     *  be caluclated after the transaction has been mined, snce the base\n     *  fee is protocol-enforced.\n     */\n    _defineProperty(this, \"gasPrice\", void 0);\n    /**\n     *  The [[link-eip-2718]] transaction type.\n     */\n    _defineProperty(this, \"type\", void 0);\n    //readonly byzantium!: boolean;\n    /**\n     *  The status of this transaction, indicating success (i.e. ``1``) or\n     *  a revert (i.e. ``0``).\n     *\n     *  This is available in post-byzantium blocks, but some backends may\n     *  backfill this value.\n     */\n    _defineProperty(this, \"status\", void 0);\n    /**\n     *  The root hash of this transaction.\n     *\n     *  This is no present and was only included in pre-byzantium blocks, but\n     *  could be used to validate certain parts of the receipt.\n     */\n    _defineProperty(this, \"root\", void 0);\n    _classPrivateFieldInitSpec(this, _logs, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _logs, Object.freeze(tx.logs.map(log => {\n      return new Log(log, provider);\n    })));\n    let gasPrice = BN_0;\n    if (tx.effectiveGasPrice != null) {\n      gasPrice = tx.effectiveGasPrice;\n    } else if (tx.gasPrice != null) {\n      gasPrice = tx.gasPrice;\n    }\n    (0, index_js_1.defineProperties)(this, {\n      provider,\n      to: tx.to,\n      from: tx.from,\n      contractAddress: tx.contractAddress,\n      hash: tx.hash,\n      index: tx.index,\n      blockHash: tx.blockHash,\n      blockNumber: tx.blockNumber,\n      logsBloom: tx.logsBloom,\n      gasUsed: tx.gasUsed,\n      cumulativeGasUsed: tx.cumulativeGasUsed,\n      gasPrice,\n      type: tx.type,\n      //byzantium: tx.byzantium,\n      status: tx.status,\n      root: tx.root\n    });\n  }\n  /**\n   *  The logs for this transaction.\n   */\n  get logs() {\n    return _classPrivateFieldGet(this, _logs);\n  }\n  /**\n   *  Returns a JSON-compatible representation.\n   */\n  toJSON() {\n    const {\n      to,\n      from,\n      contractAddress,\n      hash,\n      index,\n      blockHash,\n      blockNumber,\n      logsBloom,\n      logs,\n      //byzantium, \n      status,\n      root\n    } = this;\n    return {\n      _type: \"TransactionReceipt\",\n      blockHash,\n      blockNumber,\n      //byzantium, \n      contractAddress,\n      cumulativeGasUsed: toJson(this.cumulativeGasUsed),\n      from,\n      gasPrice: toJson(this.gasPrice),\n      gasUsed: toJson(this.gasUsed),\n      hash,\n      index,\n      logs,\n      logsBloom,\n      root,\n      status,\n      to\n    };\n  }\n  /**\n   *  @_ignore:\n   */\n  get length() {\n    return this.logs.length;\n  }\n  [_Symbol$iterator2]() {\n    let index = 0;\n    return {\n      next: () => {\n        if (index < this.length) {\n          return {\n            value: this.logs[index++],\n            done: false\n          };\n        }\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n    };\n  }\n  /**\n   *  The total fee for this transaction, in wei.\n   */\n  get fee() {\n    return this.gasUsed * this.gasPrice;\n  }\n  /**\n   *  Resolves to the block this transaction occurred in.\n   */\n  async getBlock() {\n    const block = await this.provider.getBlock(this.blockHash);\n    if (block == null) {\n      throw new Error(\"TODO\");\n    }\n    return block;\n  }\n  /**\n   *  Resolves to the transaction this transaction occurred in.\n   */\n  async getTransaction() {\n    const tx = await this.provider.getTransaction(this.hash);\n    if (tx == null) {\n      throw new Error(\"TODO\");\n    }\n    return tx;\n  }\n  /**\n   *  Resolves to the return value of the execution of this transaction.\n   *\n   *  Support for this feature is limited, as it requires an archive node\n   *  with the ``debug_`` or ``trace_`` API enabled.\n   */\n  async getResult() {\n    return await this.provider.getTransactionResult(this.hash);\n  }\n  /**\n   *  Resolves to the number of confirmations this transaction has.\n   */\n  async confirmations() {\n    return (await this.provider.getBlockNumber()) - this.blockNumber + 1;\n  }\n  /**\n   *  @_ignore:\n   */\n  removedEvent() {\n    return createRemovedTransactionFilter(this);\n  }\n  /**\n   *  @_ignore:\n   */\n  reorderedEvent(other) {\n    (0, index_js_1.assert)(!other || other.isMined(), \"unmined 'other' transction cannot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"reorderedEvent(other)\"\n    });\n    return createReorderedTransactionFilter(this, other);\n  }\n}\nexports.TransactionReceipt = TransactionReceipt;\n/**\n *  A **TransactionResponse** includes all properties about a transaction\n *  that was sent to the network, which may or may not be included in a\n *  block.\n *\n *  The [[TransactionResponse-isMined]] can be used to check if the\n *  transaction has been mined as well as type guard that the otherwise\n *  possibly ``null`` properties are defined.\n */\nvar _startBlock = /*#__PURE__*/new WeakMap();\nclass TransactionResponse {\n  /**\n   *  @_ignore:\n   */\n  constructor(tx, provider) {\n    /**\n     *  The provider this is connected to, which will influence how its\n     *  methods will resolve its async inspection methods.\n     */\n    _defineProperty(this, \"provider\", void 0);\n    /**\n     *  The block number of the block that this transaction was included in.\n     *\n     *  This is ``null`` for pending transactions.\n     */\n    _defineProperty(this, \"blockNumber\", void 0);\n    /**\n     *  The blockHash of the block that this transaction was included in.\n     *\n     *  This is ``null`` for pending transactions.\n     */\n    _defineProperty(this, \"blockHash\", void 0);\n    /**\n     *  The index within the block that this transaction resides at.\n     */\n    _defineProperty(this, \"index\", void 0);\n    /**\n     *  The transaction hash.\n     */\n    _defineProperty(this, \"hash\", void 0);\n    /**\n     *  The [[link-eip-2718]] transaction envelope type. This is\n     *  ``0`` for legacy transactions types.\n     */\n    _defineProperty(this, \"type\", void 0);\n    /**\n     *  The receiver of this transaction.\n     *\n     *  If ``null``, then the transaction is an initcode transaction.\n     *  This means the result of executing the [[data]] will be deployed\n     *  as a new contract on chain (assuming it does not revert) and the\n     *  address may be computed using [[getCreateAddress]].\n     */\n    _defineProperty(this, \"to\", void 0);\n    /**\n     *  The sender of this transaction. It is implicitly computed\n     *  from the transaction pre-image hash (as the digest) and the\n     *  [[signature]] using ecrecover.\n     */\n    _defineProperty(this, \"from\", void 0);\n    /**\n     *  The nonce, which is used to prevent replay attacks and offer\n     *  a method to ensure transactions from a given sender are explicitly\n     *  ordered.\n     *\n     *  When sending a transaction, this must be equal to the number of\n     *  transactions ever sent by [[from]].\n     */\n    _defineProperty(this, \"nonce\", void 0);\n    /**\n     *  The maximum units of gas this transaction can consume. If execution\n     *  exceeds this, the entries transaction is reverted and the sender\n     *  is charged for the full amount, despite not state changes being made.\n     */\n    _defineProperty(this, \"gasLimit\", void 0);\n    /**\n     *  The gas price can have various values, depending on the network.\n     *\n     *  In modern networks, for transactions that are included this is\n     *  the //effective gas price// (the fee per gas that was actually\n     *  charged), while for transactions that have not been included yet\n     *  is the [[maxFeePerGas]].\n     *\n     *  For legacy transactions, or transactions on legacy networks, this\n     *  is the fee that will be charged per unit of gas the transaction\n     *  consumes.\n     */\n    _defineProperty(this, \"gasPrice\", void 0);\n    /**\n     *  The maximum priority fee (per unit of gas) to allow a\n     *  validator to charge the sender. This is inclusive of the\n     *  [[maxFeeFeePerGas]].\n     */\n    _defineProperty(this, \"maxPriorityFeePerGas\", void 0);\n    /**\n     *  The maximum fee (per unit of gas) to allow this transaction\n     *  to charge the sender.\n     */\n    _defineProperty(this, \"maxFeePerGas\", void 0);\n    /**\n     *  The data.\n     */\n    _defineProperty(this, \"data\", void 0);\n    /**\n     *  The value, in wei. Use [[formatEther]] to format this value\n     *  as ether.\n     */\n    _defineProperty(this, \"value\", void 0);\n    /**\n     *  The chain ID.\n     */\n    _defineProperty(this, \"chainId\", void 0);\n    /**\n     *  The signature.\n     */\n    _defineProperty(this, \"signature\", void 0);\n    /**\n     *  The [[link-eip-2930]] access list for transaction types that\n     *  support it, otherwise ``null``.\n     */\n    _defineProperty(this, \"accessList\", void 0);\n    _classPrivateFieldInitSpec(this, _startBlock, {\n      writable: true,\n      value: void 0\n    });\n    this.provider = provider;\n    this.blockNumber = tx.blockNumber != null ? tx.blockNumber : null;\n    this.blockHash = tx.blockHash != null ? tx.blockHash : null;\n    this.hash = tx.hash;\n    this.index = tx.index;\n    this.type = tx.type;\n    this.from = tx.from;\n    this.to = tx.to || null;\n    this.gasLimit = tx.gasLimit;\n    this.nonce = tx.nonce;\n    this.data = tx.data;\n    this.value = tx.value;\n    this.gasPrice = tx.gasPrice;\n    this.maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? tx.maxPriorityFeePerGas : null;\n    this.maxFeePerGas = tx.maxFeePerGas != null ? tx.maxFeePerGas : null;\n    this.chainId = tx.chainId;\n    this.signature = tx.signature;\n    this.accessList = tx.accessList != null ? tx.accessList : null;\n    _classPrivateFieldSet(this, _startBlock, -1);\n  }\n  /**\n   *  Returns a JSON-compatible representation of this transaction.\n   */\n  toJSON() {\n    const {\n      blockNumber,\n      blockHash,\n      index,\n      hash,\n      type,\n      to,\n      from,\n      nonce,\n      data,\n      signature,\n      accessList\n    } = this;\n    return {\n      _type: \"TransactionReceipt\",\n      accessList,\n      blockNumber,\n      blockHash,\n      chainId: toJson(this.chainId),\n      data,\n      from,\n      gasLimit: toJson(this.gasLimit),\n      gasPrice: toJson(this.gasPrice),\n      hash,\n      maxFeePerGas: toJson(this.maxFeePerGas),\n      maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),\n      nonce,\n      signature,\n      to,\n      index,\n      type,\n      value: toJson(this.value)\n    };\n  }\n  /**\n   *  Resolves to the Block that this transaction was included in.\n   *\n   *  This will return null if the transaction has not been included yet.\n   */\n  async getBlock() {\n    let blockNumber = this.blockNumber;\n    if (blockNumber == null) {\n      const tx = await this.getTransaction();\n      if (tx) {\n        blockNumber = tx.blockNumber;\n      }\n    }\n    if (blockNumber == null) {\n      return null;\n    }\n    const block = this.provider.getBlock(blockNumber);\n    if (block == null) {\n      throw new Error(\"TODO\");\n    }\n    return block;\n  }\n  /**\n   *  Resolves to this transaction being re-requested from the\n   *  provider. This can be used if you have an unmined transaction\n   *  and wish to get an up-to-date populated instance.\n   */\n  async getTransaction() {\n    return this.provider.getTransaction(this.hash);\n  }\n  /**\n   *  Resolve to the number of confirmations this transaction has.\n   */\n  async confirmations() {\n    if (this.blockNumber == null) {\n      const {\n        tx,\n        blockNumber\n      } = await (0, index_js_1.resolveProperties)({\n        tx: this.getTransaction(),\n        blockNumber: this.provider.getBlockNumber()\n      });\n      // Not mined yet...\n      if (tx == null || tx.blockNumber == null) {\n        return 0;\n      }\n      return blockNumber - tx.blockNumber + 1;\n    }\n    const blockNumber = await this.provider.getBlockNumber();\n    return blockNumber - this.blockNumber + 1;\n  }\n  /**\n   *  Resolves once this transaction has been mined and has\n   *  %%confirms%% blocks including it (default: ``1``) with an\n   *  optional %%timeout%%.\n   *\n   *  This can resolve to ``null`` only if %%confirms%% is ``0``\n   *  and the transaction has not been mined, otherwise this will\n   *  wait until enough confirmations have completed.\n   */\n  async wait(_confirms, _timeout) {\n    const confirms = _confirms == null ? 1 : _confirms;\n    const timeout = _timeout == null ? 0 : _timeout;\n    let startBlock = _classPrivateFieldGet(this, _startBlock);\n    let nextScan = -1;\n    let stopScanning = startBlock === -1 ? true : false;\n    const checkReplacement = async () => {\n      // Get the current transaction count for this sender\n      if (stopScanning) {\n        return null;\n      }\n      const {\n        blockNumber,\n        nonce\n      } = await (0, index_js_1.resolveProperties)({\n        blockNumber: this.provider.getBlockNumber(),\n        nonce: this.provider.getTransactionCount(this.from)\n      });\n      // No transaction or our nonce has not been mined yet; but we\n      // can start scanning later when we do start\n      if (nonce < this.nonce) {\n        startBlock = blockNumber;\n        return;\n      }\n      // We were mined; no replacement\n      if (stopScanning) {\n        return null;\n      }\n      const mined = await this.getTransaction();\n      if (mined && mined.blockNumber != null) {\n        return;\n      }\n      // We were replaced; start scanning for that transaction\n      // Starting to scan; look back a few extra blocks for safety\n      if (nextScan === -1) {\n        nextScan = startBlock - 3;\n        if (nextScan < _classPrivateFieldGet(this, _startBlock)) {\n          nextScan = _classPrivateFieldGet(this, _startBlock);\n        }\n      }\n      while (nextScan <= blockNumber) {\n        // Get the next block to scan\n        if (stopScanning) {\n          return null;\n        }\n        const block = await this.provider.getBlock(nextScan, true);\n        // This should not happen; but we'll try again shortly\n        if (block == null) {\n          return;\n        }\n        // We were mined; no replacement\n        for (const hash of block) {\n          if (hash === this.hash) {\n            return;\n          }\n        }\n        // Search for the transaction that replaced us\n        for (let i = 0; i < block.length; i++) {\n          const tx = await block.getTransaction(i);\n          if (tx.from === this.from && tx.nonce === this.nonce) {\n            // Get the receipt\n            if (stopScanning) {\n              return null;\n            }\n            const receipt = await this.provider.getTransactionReceipt(tx.hash);\n            // This should not happen; but we'll try again shortly\n            if (receipt == null) {\n              return;\n            }\n            // We will retry this on the next block (this case could be optimized)\n            if (blockNumber - receipt.blockNumber + 1 < confirms) {\n              return;\n            }\n            // The reason we were replaced\n            let reason = \"replaced\";\n            if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {\n              reason = \"repriced\";\n            } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value === BN_0) {\n              reason = \"cancelled\";\n            }\n            (0, index_js_1.assert)(false, \"transaction was replaced\", \"TRANSACTION_REPLACED\", {\n              cancelled: reason === \"replaced\" || reason === \"cancelled\",\n              reason,\n              replacement: tx.replaceableTransaction(startBlock),\n              hash: tx.hash,\n              receipt\n            });\n          }\n        }\n        nextScan++;\n      }\n      return;\n    };\n    const receipt = await this.provider.getTransactionReceipt(this.hash);\n    if (confirms === 0) {\n      return receipt;\n    }\n    if (receipt) {\n      if ((await receipt.confirmations()) >= confirms) {\n        return receipt;\n      }\n    } else {\n      // Check for a replacement; throws if a replacement was found\n      await checkReplacement();\n      // Allow null only when the confirms is 0\n      if (confirms === 0) {\n        return null;\n      }\n    }\n    const waiter = new Promise((resolve, reject) => {\n      // List of things to cancel when we have a result (one way or the other)\n      const cancellers = [];\n      const cancel = () => {\n        cancellers.forEach(c => c());\n      };\n      // On cancel, stop scanning for replacements\n      cancellers.push(() => {\n        stopScanning = true;\n      });\n      // Set up any timeout requested\n      if (timeout > 0) {\n        const timer = setTimeout(() => {\n          cancel();\n          reject((0, index_js_1.makeError)(\"wait for transaction timeout\", \"TIMEOUT\"));\n        }, timeout);\n        cancellers.push(() => {\n          clearTimeout(timer);\n        });\n      }\n      const txListener = async receipt => {\n        // Done; return it!\n        if ((await receipt.confirmations()) >= confirms) {\n          cancel();\n          resolve(receipt);\n        }\n      };\n      cancellers.push(() => {\n        this.provider.off(this.hash, txListener);\n      });\n      this.provider.on(this.hash, txListener);\n      // We support replacement detection; start checking\n      if (startBlock >= 0) {\n        const replaceListener = async () => {\n          try {\n            // Check for a replacement; this throws only if one is found\n            await checkReplacement();\n          } catch (error) {\n            // We were replaced (with enough confirms); re-throw the error\n            if ((0, index_js_1.isError)(error, \"TRANSACTION_REPLACED\")) {\n              cancel();\n              reject(error);\n              return;\n            }\n          }\n          // Rescheudle a check on the next block\n          if (!stopScanning) {\n            this.provider.once(\"block\", replaceListener);\n          }\n        };\n        cancellers.push(() => {\n          this.provider.off(\"block\", replaceListener);\n        });\n        this.provider.once(\"block\", replaceListener);\n      }\n    });\n    return await waiter;\n  }\n  /**\n   *  Returns ``true`` if this transaction has been included.\n   *\n   *  This is effective only as of the time the TransactionResponse\n   *  was instantiated. To get up-to-date information, use\n   *  [[getTransaction]].\n   *\n   *  This provides a Type Guard that this transaction will have\n   *  non-null property values for properties that are null for\n   *  unmined transactions.\n   */\n  isMined() {\n    return this.blockHash != null;\n  }\n  /**\n   *  Returns true if the transaction is a legacy (i.e. ``type == 0``)\n   *  transaction.\n   *\n   *  This provides a Type Guard that this transaction will have\n   *  the ``null``-ness for hardfork-specific properties set correctly.\n   */\n  isLegacy() {\n    return this.type === 0;\n  }\n  /**\n   *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)\n   *  transaction. See [[link-eip-2070]].\n   *\n   *  This provides a Type Guard that this transaction will have\n   *  the ``null``-ness for hardfork-specific properties set correctly.\n   */\n  isBerlin() {\n    return this.type === 1;\n  }\n  /**\n   *  Returns true if the transaction is a London (i.e. ``type == 2``)\n   *  transaction. See [[link-eip-1559]].\n   *\n   *  This provides a Type Guard that this transaction will have\n   *  the ``null``-ness for hardfork-specific properties set correctly.\n   */\n  isLondon() {\n    return this.type === 2;\n  }\n  /**\n   *  Returns a filter which can be used to listen for orphan events\n   *  that evict this transaction.\n   */\n  removedEvent() {\n    (0, index_js_1.assert)(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"removeEvent()\"\n    });\n    return createRemovedTransactionFilter(this);\n  }\n  /**\n   *  Returns a filter which can be used to listen for orphan events\n   *  that re-order this event against %%other%%.\n   */\n  reorderedEvent(other) {\n    (0, index_js_1.assert)(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"removeEvent()\"\n    });\n    (0, index_js_1.assert)(!other || other.isMined(), \"unmined 'other' transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"removeEvent()\"\n    });\n    return createReorderedTransactionFilter(this, other);\n  }\n  /**\n   *  Returns a new TransactionResponse instance which has the ability to\n   *  detect (and throw an error) if the transaction is replaced, which\n   *  will begin scanning at %%startBlock%%.\n   *\n   *  This should generally not be used by developers and is intended\n   *  primarily for internal use. Setting an incorrect %%startBlock%% can\n   *  have devastating performance consequences if used incorrectly.\n   */\n  replaceableTransaction(startBlock) {\n    (0, index_js_1.assertArgument)(Number.isInteger(startBlock) && startBlock >= 0, \"invalid startBlock\", \"startBlock\", startBlock);\n    const tx = new TransactionResponse(this, this.provider);\n    _classPrivateFieldSet(tx, _startBlock, startBlock);\n    return tx;\n  }\n}\nexports.TransactionResponse = TransactionResponse;\nfunction createOrphanedBlockFilter(block) {\n  return {\n    orphan: \"drop-block\",\n    hash: block.hash,\n    number: block.number\n  };\n}\nfunction createReorderedTransactionFilter(tx, other) {\n  return {\n    orphan: \"reorder-transaction\",\n    tx,\n    other\n  };\n}\nfunction createRemovedTransactionFilter(tx) {\n  return {\n    orphan: \"drop-transaction\",\n    tx\n  };\n}\nfunction createRemovedLogFilter(log) {\n  return {\n    orphan: \"drop-log\",\n    log: {\n      transactionHash: log.transactionHash,\n      blockHash: log.blockHash,\n      blockNumber: log.blockNumber,\n      address: log.address,\n      data: log.data,\n      topics: Object.freeze(log.topics.slice()),\n      index: log.index\n    }\n  };\n}","map":{"version":3,"names":["index_js_1","require","index_js_2","BN_0","BigInt","getValue","value","toJson","toString","FeeData","constructor","gasPrice","maxFeePerGas","maxPriorityFeePerGas","_defineProperty","defineProperties","toJSON","_type","exports","copyRequest","req","result","to","from","data","hexlify","bigIntKeys","split","key","getBigInt","numberKeys","getNumber","accessList","accessListify","blockTag","enableCcipRead","customData","_transactions","WeakMap","_Symbol$iterator","Symbol","iterator","Block","block","provider","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","transactions","map","tx","TransactionResponse","hash","number","timestamp","parentHash","nonce","difficulty","gasLimit","gasUsed","miner","extraData","baseFeePerGas","_classPrivateFieldGet","prefetchedTransactions","txs","slice","length","assert","operation","index","next","done","undefined","date","Date","getTransaction","indexOrHash","toLowerCase","v","Error","getPrefetchedTransaction","assertArgument","isMined","isLondon","orphanedEvent","createOrphanedBlockFilter","Log","log","topics","Object","freeze","transactionHash","blockHash","blockNumber","removed","address","transactionIndex","getBlock","getTransactionReceipt","receipt","removedEvent","createRemovedLogFilter","_logs","_Symbol$iterator2","TransactionReceipt","logs","effectiveGasPrice","contractAddress","logsBloom","cumulativeGasUsed","type","status","root","fee","getResult","getTransactionResult","confirmations","getBlockNumber","createRemovedTransactionFilter","reorderedEvent","other","createReorderedTransactionFilter","_startBlock","chainId","signature","resolveProperties","wait","_confirms","_timeout","confirms","timeout","startBlock","nextScan","stopScanning","checkReplacement","getTransactionCount","mined","i","reason","cancelled","replacement","replaceableTransaction","waiter","Promise","resolve","reject","cancellers","cancel","forEach","c","push","timer","setTimeout","makeError","clearTimeout","txListener","off","on","replaceListener","error","isError","once","isLegacy","isBerlin","Number","isInteger","orphan"],"sources":["../../src.ts/providers/provider.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}