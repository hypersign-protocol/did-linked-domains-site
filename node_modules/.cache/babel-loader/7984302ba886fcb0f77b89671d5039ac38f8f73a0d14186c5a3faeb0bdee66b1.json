{"ast":null,"code":"\"use strict\";\n\nvar _classPrivateFieldInitSpec = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateFieldInitSpec.js\").default;\nvar _classPrivateFieldSet = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateFieldSet.js\").default;\nvar _classPrivateFieldGet = require(\"/home/pratap/domain-linkege/node_modules/@babel/runtime/helpers/classPrivateFieldGet.js\").default;\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transaction = void 0;\nconst index_js_1 = require(\"../address/index.js\");\nconst index_js_2 = require(\"../crypto/index.js\");\nconst index_js_3 = require(\"../utils/index.js\");\nconst accesslist_js_1 = require(\"./accesslist.js\");\nconst address_js_1 = require(\"./address.js\");\nconst BN_0 = BigInt(0);\nconst BN_2 = BigInt(2);\nconst BN_27 = BigInt(27);\nconst BN_28 = BigInt(28);\nconst BN_35 = BigInt(35);\nconst BN_MAX_UINT = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nfunction handleAddress(value) {\n  if (value === \"0x\") {\n    return null;\n  }\n  return (0, index_js_1.getAddress)(value);\n}\nfunction handleAccessList(value, param) {\n  try {\n    return (0, accesslist_js_1.accessListify)(value);\n  } catch (error) {\n    (0, index_js_3.assertArgument)(false, error.message, param, value);\n  }\n}\nfunction handleNumber(_value, param) {\n  if (_value === \"0x\") {\n    return 0;\n  }\n  return (0, index_js_3.getNumber)(_value, param);\n}\nfunction handleUint(_value, param) {\n  if (_value === \"0x\") {\n    return BN_0;\n  }\n  const value = (0, index_js_3.getBigInt)(_value, param);\n  (0, index_js_3.assertArgument)(value <= BN_MAX_UINT, \"value exceeds uint size\", param, value);\n  return value;\n}\nfunction formatNumber(_value, name) {\n  const value = (0, index_js_3.getBigInt)(_value, \"value\");\n  const result = (0, index_js_3.toBeArray)(value);\n  (0, index_js_3.assertArgument)(result.length <= 32, `value too large`, `tx.${name}`, value);\n  return result;\n}\nfunction formatAccessList(value) {\n  return (0, accesslist_js_1.accessListify)(value).map(set => [set.address, set.storageKeys]);\n}\nfunction _parseLegacy(data) {\n  const fields = (0, index_js_3.decodeRlp)(data);\n  (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 9 || fields.length === 6), \"invalid field count for legacy transaction\", \"data\", data);\n  const tx = {\n    type: 0,\n    nonce: handleNumber(fields[0], \"nonce\"),\n    gasPrice: handleUint(fields[1], \"gasPrice\"),\n    gasLimit: handleUint(fields[2], \"gasLimit\"),\n    to: handleAddress(fields[3]),\n    value: handleUint(fields[4], \"value\"),\n    data: (0, index_js_3.hexlify)(fields[5]),\n    chainId: BN_0\n  };\n  // Legacy unsigned transaction\n  if (fields.length === 6) {\n    return tx;\n  }\n  const v = handleUint(fields[6], \"v\");\n  const r = handleUint(fields[7], \"r\");\n  const s = handleUint(fields[8], \"s\");\n  if (r === BN_0 && s === BN_0) {\n    // EIP-155 unsigned transaction\n    tx.chainId = v;\n  } else {\n    // Compute the EIP-155 chain ID (or 0 for legacy)\n    let chainId = (v - BN_35) / BN_2;\n    if (chainId < BN_0) {\n      chainId = BN_0;\n    }\n    tx.chainId = chainId;\n    // Signed Legacy Transaction\n    (0, index_js_3.assertArgument)(chainId !== BN_0 || v === BN_27 || v === BN_28, \"non-canonical legacy v\", \"v\", fields[6]);\n    tx.signature = index_js_2.Signature.from({\n      r: (0, index_js_3.zeroPadValue)(fields[7], 32),\n      s: (0, index_js_3.zeroPadValue)(fields[8], 32),\n      v\n    });\n    tx.hash = (0, index_js_2.keccak256)(data);\n  }\n  return tx;\n}\nfunction _serializeLegacy(tx, sig) {\n  const fields = [formatNumber(tx.nonce || 0, \"nonce\"), formatNumber(tx.gasPrice || 0, \"gasPrice\"), formatNumber(tx.gasLimit || 0, \"gasLimit\"), tx.to != null ? (0, index_js_1.getAddress)(tx.to) : \"0x\", formatNumber(tx.value || 0, \"value\"), tx.data || \"0x\"];\n  let chainId = BN_0;\n  if (tx.chainId != BN_0) {\n    // A chainId was provided; if non-zero we'll use EIP-155\n    chainId = (0, index_js_3.getBigInt)(tx.chainId, \"tx.chainId\");\n    // We have a chainId in the tx and an EIP-155 v in the signature,\n    // make sure they agree with each other\n    (0, index_js_3.assertArgument)(!sig || sig.networkV == null || sig.legacyChainId === chainId, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n  } else if (tx.signature) {\n    // No explicit chainId, but EIP-155 have a derived implicit chainId\n    const legacy = tx.signature.legacyChainId;\n    if (legacy != null) {\n      chainId = legacy;\n    }\n  }\n  // Requesting an unsigned transaction\n  if (!sig) {\n    // We have an EIP-155 transaction (chainId was specified and non-zero)\n    if (chainId !== BN_0) {\n      fields.push((0, index_js_3.toBeArray)(chainId));\n      fields.push(\"0x\");\n      fields.push(\"0x\");\n    }\n    return (0, index_js_3.encodeRlp)(fields);\n  }\n  // @TODO: We should probably check that tx.signature, chainId, and sig\n  //        match but that logic could break existing code, so schedule\n  //        this for the next major bump.\n  // Compute the EIP-155 v\n  let v = BigInt(27 + sig.yParity);\n  if (chainId !== BN_0) {\n    v = index_js_2.Signature.getChainIdV(chainId, sig.v);\n  } else if (BigInt(sig.v) !== v) {\n    (0, index_js_3.assertArgument)(false, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n  }\n  // Add the signature\n  fields.push((0, index_js_3.toBeArray)(v));\n  fields.push((0, index_js_3.toBeArray)(sig.r));\n  fields.push((0, index_js_3.toBeArray)(sig.s));\n  return (0, index_js_3.encodeRlp)(fields);\n}\nfunction _parseEipSignature(tx, fields) {\n  let yParity;\n  try {\n    yParity = handleNumber(fields[0], \"yParity\");\n    if (yParity !== 0 && yParity !== 1) {\n      throw new Error(\"bad yParity\");\n    }\n  } catch (error) {\n    (0, index_js_3.assertArgument)(false, \"invalid yParity\", \"yParity\", fields[0]);\n  }\n  const r = (0, index_js_3.zeroPadValue)(fields[1], 32);\n  const s = (0, index_js_3.zeroPadValue)(fields[2], 32);\n  const signature = index_js_2.Signature.from({\n    r,\n    s,\n    yParity\n  });\n  tx.signature = signature;\n}\nfunction _parseEip1559(data) {\n  const fields = (0, index_js_3.decodeRlp)((0, index_js_3.getBytes)(data).slice(1));\n  (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 9 || fields.length === 12), \"invalid field count for transaction type: 2\", \"data\", (0, index_js_3.hexlify)(data));\n  const maxPriorityFeePerGas = handleUint(fields[2], \"maxPriorityFeePerGas\");\n  const maxFeePerGas = handleUint(fields[3], \"maxFeePerGas\");\n  const tx = {\n    type: 2,\n    chainId: handleUint(fields[0], \"chainId\"),\n    nonce: handleNumber(fields[1], \"nonce\"),\n    maxPriorityFeePerGas: maxPriorityFeePerGas,\n    maxFeePerGas: maxFeePerGas,\n    gasPrice: null,\n    gasLimit: handleUint(fields[4], \"gasLimit\"),\n    to: handleAddress(fields[5]),\n    value: handleUint(fields[6], \"value\"),\n    data: (0, index_js_3.hexlify)(fields[7]),\n    accessList: handleAccessList(fields[8], \"accessList\")\n  };\n  // Unsigned EIP-1559 Transaction\n  if (fields.length === 9) {\n    return tx;\n  }\n  tx.hash = (0, index_js_2.keccak256)(data);\n  _parseEipSignature(tx, fields.slice(9));\n  return tx;\n}\nfunction _serializeEip1559(tx, sig) {\n  const fields = [formatNumber(tx.chainId || 0, \"chainId\"), formatNumber(tx.nonce || 0, \"nonce\"), formatNumber(tx.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"), formatNumber(tx.maxFeePerGas || 0, \"maxFeePerGas\"), formatNumber(tx.gasLimit || 0, \"gasLimit\"), tx.to != null ? (0, index_js_1.getAddress)(tx.to) : \"0x\", formatNumber(tx.value || 0, \"value\"), tx.data || \"0x\", formatAccessList(tx.accessList || [])];\n  if (sig) {\n    fields.push(formatNumber(sig.yParity, \"yParity\"));\n    fields.push((0, index_js_3.toBeArray)(sig.r));\n    fields.push((0, index_js_3.toBeArray)(sig.s));\n  }\n  return (0, index_js_3.concat)([\"0x02\", (0, index_js_3.encodeRlp)(fields)]);\n}\nfunction _parseEip2930(data) {\n  const fields = (0, index_js_3.decodeRlp)((0, index_js_3.getBytes)(data).slice(1));\n  (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 8 || fields.length === 11), \"invalid field count for transaction type: 1\", \"data\", (0, index_js_3.hexlify)(data));\n  const tx = {\n    type: 1,\n    chainId: handleUint(fields[0], \"chainId\"),\n    nonce: handleNumber(fields[1], \"nonce\"),\n    gasPrice: handleUint(fields[2], \"gasPrice\"),\n    gasLimit: handleUint(fields[3], \"gasLimit\"),\n    to: handleAddress(fields[4]),\n    value: handleUint(fields[5], \"value\"),\n    data: (0, index_js_3.hexlify)(fields[6]),\n    accessList: handleAccessList(fields[7], \"accessList\")\n  };\n  // Unsigned EIP-2930 Transaction\n  if (fields.length === 8) {\n    return tx;\n  }\n  tx.hash = (0, index_js_2.keccak256)(data);\n  _parseEipSignature(tx, fields.slice(8));\n  return tx;\n}\nfunction _serializeEip2930(tx, sig) {\n  const fields = [formatNumber(tx.chainId || 0, \"chainId\"), formatNumber(tx.nonce || 0, \"nonce\"), formatNumber(tx.gasPrice || 0, \"gasPrice\"), formatNumber(tx.gasLimit || 0, \"gasLimit\"), tx.to != null ? (0, index_js_1.getAddress)(tx.to) : \"0x\", formatNumber(tx.value || 0, \"value\"), tx.data || \"0x\", formatAccessList(tx.accessList || [])];\n  if (sig) {\n    fields.push(formatNumber(sig.yParity, \"recoveryParam\"));\n    fields.push((0, index_js_3.toBeArray)(sig.r));\n    fields.push((0, index_js_3.toBeArray)(sig.s));\n  }\n  return (0, index_js_3.concat)([\"0x01\", (0, index_js_3.encodeRlp)(fields)]);\n}\n/**\n *  A **Transaction** describes an operation to be executed on\n *  Ethereum by an Externally Owned Account (EOA). It includes\n *  who (the [[to]] address), what (the [[data]]) and how much (the\n *  [[value]] in ether) the operation should entail.\n *\n *  @example:\n *    tx = new Transaction()\n *    //_result:\n *\n *    tx.data = \"0x1234\";\n *    //_result:\n */\nvar _type = /*#__PURE__*/new WeakMap();\nvar _to = /*#__PURE__*/new WeakMap();\nvar _data = /*#__PURE__*/new WeakMap();\nvar _nonce = /*#__PURE__*/new WeakMap();\nvar _gasLimit = /*#__PURE__*/new WeakMap();\nvar _gasPrice = /*#__PURE__*/new WeakMap();\nvar _maxPriorityFeePerGas = /*#__PURE__*/new WeakMap();\nvar _maxFeePerGas = /*#__PURE__*/new WeakMap();\nvar _value2 = /*#__PURE__*/new WeakMap();\nvar _chainId = /*#__PURE__*/new WeakMap();\nvar _sig = /*#__PURE__*/new WeakMap();\nvar _accessList = /*#__PURE__*/new WeakMap();\nclass Transaction {\n  /**\n   *  The transaction type.\n   *\n   *  If null, the type will be automatically inferred based on\n   *  explicit properties.\n   */\n  get type() {\n    return _classPrivateFieldGet(this, _type);\n  }\n  set type(value) {\n    switch (value) {\n      case null:\n        _classPrivateFieldSet(this, _type, null);\n        break;\n      case 0:\n      case \"legacy\":\n        _classPrivateFieldSet(this, _type, 0);\n        break;\n      case 1:\n      case \"berlin\":\n      case \"eip-2930\":\n        _classPrivateFieldSet(this, _type, 1);\n        break;\n      case 2:\n      case \"london\":\n      case \"eip-1559\":\n        _classPrivateFieldSet(this, _type, 2);\n        break;\n      default:\n        (0, index_js_3.assertArgument)(false, \"unsupported transaction type\", \"type\", value);\n    }\n  }\n  /**\n   *  The name of the transaction type.\n   */\n  get typeName() {\n    switch (this.type) {\n      case 0:\n        return \"legacy\";\n      case 1:\n        return \"eip-2930\";\n      case 2:\n        return \"eip-1559\";\n    }\n    return null;\n  }\n  /**\n   *  The ``to`` address for the transaction or ``null`` if the\n   *  transaction is an ``init`` transaction.\n   */\n  get to() {\n    return _classPrivateFieldGet(this, _to);\n  }\n  set to(value) {\n    _classPrivateFieldSet(this, _to, value == null ? null : (0, index_js_1.getAddress)(value));\n  }\n  /**\n   *  The transaction nonce.\n   */\n  get nonce() {\n    return _classPrivateFieldGet(this, _nonce);\n  }\n  set nonce(value) {\n    _classPrivateFieldSet(this, _nonce, (0, index_js_3.getNumber)(value, \"value\"));\n  }\n  /**\n   *  The gas limit.\n   */\n  get gasLimit() {\n    return _classPrivateFieldGet(this, _gasLimit);\n  }\n  set gasLimit(value) {\n    _classPrivateFieldSet(this, _gasLimit, (0, index_js_3.getBigInt)(value));\n  }\n  /**\n   *  The gas price.\n   *\n   *  On legacy networks this defines the fee that will be paid. On\n   *  EIP-1559 networks, this should be ``null``.\n   */\n  get gasPrice() {\n    const value = _classPrivateFieldGet(this, _gasPrice);\n    if (value == null && (this.type === 0 || this.type === 1)) {\n      return BN_0;\n    }\n    return value;\n  }\n  set gasPrice(value) {\n    _classPrivateFieldSet(this, _gasPrice, value == null ? null : (0, index_js_3.getBigInt)(value, \"gasPrice\"));\n  }\n  /**\n   *  The maximum priority fee per unit of gas to pay. On legacy\n   *  networks this should be ``null``.\n   */\n  get maxPriorityFeePerGas() {\n    const value = _classPrivateFieldGet(this, _maxPriorityFeePerGas);\n    if (value == null) {\n      if (this.type === 2) {\n        return BN_0;\n      }\n      return null;\n    }\n    return value;\n  }\n  set maxPriorityFeePerGas(value) {\n    _classPrivateFieldSet(this, _maxPriorityFeePerGas, value == null ? null : (0, index_js_3.getBigInt)(value, \"maxPriorityFeePerGas\"));\n  }\n  /**\n   *  The maximum total fee per unit of gas to pay. On legacy\n   *  networks this should be ``null``.\n   */\n  get maxFeePerGas() {\n    const value = _classPrivateFieldGet(this, _maxFeePerGas);\n    if (value == null) {\n      if (this.type === 2) {\n        return BN_0;\n      }\n      return null;\n    }\n    return value;\n  }\n  set maxFeePerGas(value) {\n    _classPrivateFieldSet(this, _maxFeePerGas, value == null ? null : (0, index_js_3.getBigInt)(value, \"maxFeePerGas\"));\n  }\n  /**\n   *  The transaction data. For ``init`` transactions this is the\n   *  deployment code.\n   */\n  get data() {\n    return _classPrivateFieldGet(this, _data);\n  }\n  set data(value) {\n    _classPrivateFieldSet(this, _data, (0, index_js_3.hexlify)(value));\n  }\n  /**\n   *  The amount of ether (in wei) to send in this transactions.\n   */\n  get value() {\n    return _classPrivateFieldGet(this, _value2);\n  }\n  set value(value) {\n    _classPrivateFieldSet(this, _value2, (0, index_js_3.getBigInt)(value, \"value\"));\n  }\n  /**\n   *  The chain ID this transaction is valid on.\n   */\n  get chainId() {\n    return _classPrivateFieldGet(this, _chainId);\n  }\n  set chainId(value) {\n    _classPrivateFieldSet(this, _chainId, (0, index_js_3.getBigInt)(value));\n  }\n  /**\n   *  If signed, the signature for this transaction.\n   */\n  get signature() {\n    return _classPrivateFieldGet(this, _sig) || null;\n  }\n  set signature(value) {\n    _classPrivateFieldSet(this, _sig, value == null ? null : index_js_2.Signature.from(value));\n  }\n  /**\n   *  The access list.\n   *\n   *  An access list permits discounted (but pre-paid) access to\n   *  bytecode and state variable access within contract execution.\n   */\n  get accessList() {\n    const value = _classPrivateFieldGet(this, _accessList) || null;\n    if (value == null) {\n      if (this.type === 1 || this.type === 2) {\n        return [];\n      }\n      return null;\n    }\n    return value;\n  }\n  set accessList(value) {\n    _classPrivateFieldSet(this, _accessList, value == null ? null : (0, accesslist_js_1.accessListify)(value));\n  }\n  /**\n   *  Creates a new Transaction with default values.\n   */\n  constructor() {\n    _classPrivateFieldInitSpec(this, _type, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _to, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _data, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _nonce, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _gasLimit, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _gasPrice, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _maxPriorityFeePerGas, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _maxFeePerGas, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _value2, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _chainId, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _sig, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _accessList, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _type, null);\n    _classPrivateFieldSet(this, _to, null);\n    _classPrivateFieldSet(this, _nonce, 0);\n    _classPrivateFieldSet(this, _gasLimit, BigInt(0));\n    _classPrivateFieldSet(this, _gasPrice, null);\n    _classPrivateFieldSet(this, _maxPriorityFeePerGas, null);\n    _classPrivateFieldSet(this, _maxFeePerGas, null);\n    _classPrivateFieldSet(this, _data, \"0x\");\n    _classPrivateFieldSet(this, _value2, BigInt(0));\n    _classPrivateFieldSet(this, _chainId, BigInt(0));\n    _classPrivateFieldSet(this, _sig, null);\n    _classPrivateFieldSet(this, _accessList, null);\n  }\n  /**\n   *  The transaction hash, if signed. Otherwise, ``null``.\n   */\n  get hash() {\n    if (this.signature == null) {\n      return null;\n    }\n    return (0, index_js_2.keccak256)(this.serialized);\n  }\n  /**\n   *  The pre-image hash of this transaction.\n   *\n   *  This is the digest that a [[Signer]] must sign to authorize\n   *  this transaction.\n   */\n  get unsignedHash() {\n    return (0, index_js_2.keccak256)(this.unsignedSerialized);\n  }\n  /**\n   *  The sending address, if signed. Otherwise, ``null``.\n   */\n  get from() {\n    if (this.signature == null) {\n      return null;\n    }\n    return (0, address_js_1.recoverAddress)(this.unsignedHash, this.signature);\n  }\n  /**\n   *  The public key of the sender, if signed. Otherwise, ``null``.\n   */\n  get fromPublicKey() {\n    if (this.signature == null) {\n      return null;\n    }\n    return index_js_2.SigningKey.recoverPublicKey(this.unsignedHash, this.signature);\n  }\n  /**\n   *  Returns true if signed.\n   *\n   *  This provides a Type Guard that properties requiring a signed\n   *  transaction are non-null.\n   */\n  isSigned() {\n    //isSigned(): this is SignedTransaction {\n    return this.signature != null;\n  }\n  /**\n   *  The serialized transaction.\n   *\n   *  This throws if the transaction is unsigned. For the pre-image,\n   *  use [[unsignedSerialized]].\n   */\n  get serialized() {\n    (0, index_js_3.assert)(this.signature != null, \"cannot serialize unsigned transaction; maybe you meant .unsignedSerialized\", \"UNSUPPORTED_OPERATION\", {\n      operation: \".serialized\"\n    });\n    switch (this.inferType()) {\n      case 0:\n        return _serializeLegacy(this, this.signature);\n      case 1:\n        return _serializeEip2930(this, this.signature);\n      case 2:\n        return _serializeEip1559(this, this.signature);\n    }\n    (0, index_js_3.assert)(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", {\n      operation: \".serialized\"\n    });\n  }\n  /**\n   *  The transaction pre-image.\n   *\n   *  The hash of this is the digest which needs to be signed to\n   *  authorize this transaction.\n   */\n  get unsignedSerialized() {\n    switch (this.inferType()) {\n      case 0:\n        return _serializeLegacy(this);\n      case 1:\n        return _serializeEip2930(this);\n      case 2:\n        return _serializeEip1559(this);\n    }\n    (0, index_js_3.assert)(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", {\n      operation: \".unsignedSerialized\"\n    });\n  }\n  /**\n   *  Return the most \"likely\" type; currently the highest\n   *  supported transaction type.\n   */\n  inferType() {\n    return this.inferTypes().pop();\n  }\n  /**\n   *  Validates the explicit properties and returns a list of compatible\n   *  transaction types.\n   */\n  inferTypes() {\n    // Checks that there are no conflicting properties set\n    const hasGasPrice = this.gasPrice != null;\n    const hasFee = this.maxFeePerGas != null || this.maxPriorityFeePerGas != null;\n    const hasAccessList = this.accessList != null;\n    //if (hasGasPrice && hasFee) {\n    //    throw new Error(\"transaction cannot have gasPrice and maxFeePerGas\");\n    //}\n    if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {\n      (0, index_js_3.assert)(this.maxFeePerGas >= this.maxPriorityFeePerGas, \"priorityFee cannot be more than maxFee\", \"BAD_DATA\", {\n        value: this\n      });\n    }\n    //if (this.type === 2 && hasGasPrice) {\n    //    throw new Error(\"eip-1559 transaction cannot have gasPrice\");\n    //}\n    (0, index_js_3.assert)(!hasFee || this.type !== 0 && this.type !== 1, \"transaction type cannot have maxFeePerGas or maxPriorityFeePerGas\", \"BAD_DATA\", {\n      value: this\n    });\n    (0, index_js_3.assert)(this.type !== 0 || !hasAccessList, \"legacy transaction cannot have accessList\", \"BAD_DATA\", {\n      value: this\n    });\n    const types = [];\n    // Explicit type\n    if (this.type != null) {\n      types.push(this.type);\n    } else {\n      if (hasFee) {\n        types.push(2);\n      } else if (hasGasPrice) {\n        types.push(1);\n        if (!hasAccessList) {\n          types.push(0);\n        }\n      } else if (hasAccessList) {\n        types.push(1);\n        types.push(2);\n      } else {\n        types.push(0);\n        types.push(1);\n        types.push(2);\n      }\n    }\n    types.sort();\n    return types;\n  }\n  /**\n   *  Returns true if this transaction is a legacy transaction (i.e.\n   *  ``type === 0``).\n   *\n   *  This provides a Type Guard that the related properties are\n   *  non-null.\n   */\n  isLegacy() {\n    return this.type === 0;\n  }\n  /**\n   *  Returns true if this transaction is berlin hardform transaction (i.e.\n   *  ``type === 1``).\n   *\n   *  This provides a Type Guard that the related properties are\n   *  non-null.\n   */\n  isBerlin() {\n    return this.type === 1;\n  }\n  /**\n   *  Returns true if this transaction is london hardform transaction (i.e.\n   *  ``type === 2``).\n   *\n   *  This provides a Type Guard that the related properties are\n   *  non-null.\n   */\n  isLondon() {\n    return this.type === 2;\n  }\n  /**\n   *  Create a copy of this transaciton.\n   */\n  clone() {\n    return Transaction.from(this);\n  }\n  /**\n   *  Return a JSON-friendly object.\n   */\n  toJSON() {\n    const s = v => {\n      if (v == null) {\n        return null;\n      }\n      return v.toString();\n    };\n    return {\n      type: this.type,\n      to: this.to,\n      //            from: this.from,\n      data: this.data,\n      nonce: this.nonce,\n      gasLimit: s(this.gasLimit),\n      gasPrice: s(this.gasPrice),\n      maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),\n      maxFeePerGas: s(this.maxFeePerGas),\n      value: s(this.value),\n      chainId: s(this.chainId),\n      sig: this.signature ? this.signature.toJSON() : null,\n      accessList: this.accessList\n    };\n  }\n  /**\n   *  Create a **Transaction** from a serialized transaction or a\n   *  Transaction-like object.\n   */\n  static from(tx) {\n    if (tx == null) {\n      return new Transaction();\n    }\n    if (typeof tx === \"string\") {\n      const payload = (0, index_js_3.getBytes)(tx);\n      if (payload[0] >= 0x7f) {\n        // @TODO: > vs >= ??\n        return Transaction.from(_parseLegacy(payload));\n      }\n      switch (payload[0]) {\n        case 1:\n          return Transaction.from(_parseEip2930(payload));\n        case 2:\n          return Transaction.from(_parseEip1559(payload));\n      }\n      (0, index_js_3.assert)(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"from\"\n      });\n    }\n    const result = new Transaction();\n    if (tx.type != null) {\n      result.type = tx.type;\n    }\n    if (tx.to != null) {\n      result.to = tx.to;\n    }\n    if (tx.nonce != null) {\n      result.nonce = tx.nonce;\n    }\n    if (tx.gasLimit != null) {\n      result.gasLimit = tx.gasLimit;\n    }\n    if (tx.gasPrice != null) {\n      result.gasPrice = tx.gasPrice;\n    }\n    if (tx.maxPriorityFeePerGas != null) {\n      result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;\n    }\n    if (tx.maxFeePerGas != null) {\n      result.maxFeePerGas = tx.maxFeePerGas;\n    }\n    if (tx.data != null) {\n      result.data = tx.data;\n    }\n    if (tx.value != null) {\n      result.value = tx.value;\n    }\n    if (tx.chainId != null) {\n      result.chainId = tx.chainId;\n    }\n    if (tx.signature != null) {\n      result.signature = index_js_2.Signature.from(tx.signature);\n    }\n    if (tx.accessList != null) {\n      result.accessList = tx.accessList;\n    }\n    if (tx.hash != null) {\n      (0, index_js_3.assertArgument)(result.isSigned(), \"unsigned transaction cannot define hash\", \"tx\", tx);\n      (0, index_js_3.assertArgument)(result.hash === tx.hash, \"hash mismatch\", \"tx\", tx);\n    }\n    if (tx.from != null) {\n      (0, index_js_3.assertArgument)(result.isSigned(), \"unsigned transaction cannot define from\", \"tx\", tx);\n      (0, index_js_3.assertArgument)(result.from.toLowerCase() === (tx.from || \"\").toLowerCase(), \"from mismatch\", \"tx\", tx);\n    }\n    return result;\n  }\n}\nexports.Transaction = Transaction;","map":{"version":3,"names":["index_js_1","require","index_js_2","index_js_3","accesslist_js_1","address_js_1","BN_0","BigInt","BN_2","BN_27","BN_28","BN_35","BN_MAX_UINT","handleAddress","value","getAddress","handleAccessList","param","accessListify","error","assertArgument","message","handleNumber","_value","getNumber","handleUint","getBigInt","formatNumber","name","result","toBeArray","length","formatAccessList","map","set","address","storageKeys","_parseLegacy","data","fields","decodeRlp","Array","isArray","tx","type","nonce","gasPrice","gasLimit","to","hexlify","chainId","v","r","s","signature","Signature","from","zeroPadValue","hash","keccak256","_serializeLegacy","sig","networkV","legacyChainId","legacy","push","encodeRlp","yParity","getChainIdV","_parseEipSignature","Error","_parseEip1559","getBytes","slice","maxPriorityFeePerGas","maxFeePerGas","accessList","_serializeEip1559","concat","_parseEip2930","_serializeEip2930","_type","WeakMap","_to","_data","_nonce","_gasLimit","_gasPrice","_maxPriorityFeePerGas","_maxFeePerGas","_value2","_chainId","_sig","_accessList","Transaction","_classPrivateFieldGet","_classPrivateFieldSet","typeName","constructor","_classPrivateFieldInitSpec","writable","serialized","unsignedHash","unsignedSerialized","recoverAddress","fromPublicKey","SigningKey","recoverPublicKey","isSigned","assert","operation","inferType","inferTypes","pop","hasGasPrice","hasFee","hasAccessList","types","sort","isLegacy","isBerlin","isLondon","clone","toJSON","toString","payload","toLowerCase","exports"],"sources":["../../src.ts/transaction/transaction.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}